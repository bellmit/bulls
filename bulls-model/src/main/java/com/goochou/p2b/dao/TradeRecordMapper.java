package com.goochou.p2b.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.goochou.p2b.model.TradeRecord;
import com.goochou.p2b.model.TradeRecordExample;
import com.goochou.p2b.model.vo.ActivityDataVO;
import com.goochou.p2b.model.vo.TradeRecordVO;
import com.goochou.p2b.model.vo.TransactionRecordVO;

public interface TradeRecordMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	long countByExample(TradeRecordExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int deleteByExample(TradeRecordExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int deleteByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int insert(TradeRecord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int insertSelective(TradeRecord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	List<TradeRecord> selectByExample(TradeRecordExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	TradeRecord selectByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int updateByExampleSelective(@Param("record") TradeRecord record, @Param("example") TradeRecordExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int updateByExample(@Param("record") TradeRecord record, @Param("example") TradeRecordExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int updateByPrimaryKeySelective(TradeRecord record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table trade_record
	 * @mbg.generated  Thu Jun 13 14:33:06 CST 2019
	 */
	int updateByPrimaryKey(TradeRecord record);

	public List<Map<String, Object>> findByUserId(Map<String, Object> map);

    public Integer findByUserIdCount(Map<String, Object> map);

    public List<TradeRecord> findExcelTradeRecord(Map<String, Object> map);

    public List<TradeRecord> findByUserIdApp(Map<String, Object> map);

    public Integer findByUserIdAppCount(Map<String, Object> map);

    /**
     * 查询交易记录同时显示每日利率
     *
     * @param map
     * @return
     */
    public List<Map<String, Object>> getWithRate(Map<String, Object> map);

    public int getWithRateCount(Map<String, Object> map);

    Double selectAllAmountByType(int type);
    /**
     * 查询收益
     */
    Double selectAllAmountSource(Map<String, Object> map);


    List<Double> getNewInvesting(@Param("date") Date date, @Param("userId") Integer userId);

    public List<Map<String, Object>> query(Map<String, Object> map);

    public Integer queryCount(Map<String, Object> map);

    public List<Map<String, Object>> tradeAdd();

    /**
     * 在timeSlot时间段内，连续days天提现最少extractAmount的用户详情
     * 刘源 2015-11-6
     *
     * @param timeSlot      时间段 基本单位天
     * @param extractAmount 提现金额
     * @param days          连续天数
     * @return
     */
    public List<Map<String, Object>> continuousExtractionInTimeSlot(Map<String, Object> map);

    /**
     * 某天刚充值则提现的用户（充值提现时间间隔小于1天）
     * 刘源 2015-11-6
     *
     * @param date
     * @return
     */
    public List<Map<String, Object>> rechargeAndReflectInSameDay(Date date);

    /**
     * 前天投资时间在晚上21:00后，提现时间第二天在9::00前，以及用户数据
     * 刘源 2015-11-11
     *
     * @param 时间区间 morning - late
     * @return
     */
    public List<Map<String, Object>> immediatelyAfterInvestmentOfAdjacent(Map<String, Object> map);


    /**
     * @param map
     * @return
     * @author 王信
     * @Create Date: 2015年12月28日下午3:48:50
     */
    public List<Map<String, Object>> selectShakeRecord(Map<String, Object> map);

    /**
     * @param map
     * @return
     * @author 王信
     * @Create Date: 2015年12月28日下午3:48:50
     */
    public Integer selectShakeRecordCount(Map<String, Object> map);

    /**
     * 查询单个用户的摇一摇摇奖次数
     *
     * @param phone
     * @return
     * @author 王信
     * @Create Date: 2015年12月28日下午4:56:50
     */
    public Map<String, Object> selectShakeCount(String phone);

    /**
     * Description(描述):查询昨日定期收益
     * DATE:2016/4/30 10:22
     *
     * @author：王信
     */

    public double selectRegularIncome(Integer userId);


    public List<Map<String, Object>> selectMonthlyBill(Map<String, Object> map);

    public List<Map<String, Object>> selectAllInvestment(Map<String, Object> map);

    public List<Map<String, Object>> selectAllInvestment2(Map<String, Object> map);


    /**
     * 定期回款到用户余额后，用户未对进行投资、提现的用户名单
     * 回款日期后，用户未进行投资或提现的用户，充值未记录
     *
     * @param
     * @author 刘源
     * @date 2016/5/27
     */
    List<Map<String, Object>> noOperationAfterBackPay();

    /**
     * TODO 根据用户Id查询投资大于2000的数量//
     *
     * @param userId
     * @return赵星星
     */
    public int findByUserIdandAmount(@Param("userId") Integer userId);


    /**
     * 根据类型获取金额信息
     */
    public Double getTransactionAmount(List<Integer> type);


    /**
     * @Description(描述):运营周报表
     * @author 王信
     * @date 2016/8/29
     * @params
     **/
    List<Map<String, Object>> selectUserInvestmentWeeklyReport(Map<String, Object> map);

    /**
     * @Description(描述):运营周报表 查询新客活期投资金额多少
     * @author 王信
     * @date 2016/8/29
     * @params
     **/
    List<Map<String, Object>> selectNewUserHuoTotalAmount(Map<String, Object> map);

    List<Map<String, Object>> hourReport(@Param("adminId")Integer adminId,
    		@Param("departmentId")Integer departmentId,@Param("aoeType") String aoeType);

    /**
     * @Description:赎回减去活转定（活转定的实际金额使用红包）
     * @date  2017/04/17
     * @author 王信
     */
    public Double getTodayRedeemAmount(Integer userId);

    public List<TradeRecord> getHuoTradeList(Map<String, Object> map);

    public Integer getHuoTradeListCount(Map<String, Object> map);


    /**
     * @Description: 累计收益
     * @date  2016/11/29
     * @author 王信
     */
    Map<String,Object> selectAccumulatedIncome(@Param("userId") Integer userId);


    public Double getHongbaoAmountByMonth(Map<String,Object> map);

    /**
     * @Description: 根据投资金额，时间获取各个客服下用户投资信息
     * @author xueqi
     * @param map
     * @return List<TradeRecordVO>
     */
    public List<TradeRecordVO> queryInvestRecodeByDate(Map<String,Object> map);

    int insertBatch(List<TradeRecord> list);

    List<ActivityDataVO> queryTradeRecordInfoByHour(Map<String,Object> map);

    List<ActivityDataVO> queryTradeRecordInfoByAge(Map<String,Object> map);

    List<ActivityDataVO> queryTradeRecordInfoByArea(Map<String,Object> map);

    Double sumAmountByType(Map<String,Object> map);

    /**
     * 根据月月盈投资ID,查询其回款记录
     * @param investmentId
     * @return
     */
    List<TradeRecord> queryMonthlyGainRepayMentRecord(Map<String,Object> searchMap);

    /**
     * 根据月月盈投资ID,查询其回款记录条数
     * @param searchMap
     * @return
     */
    int queryMonthlyGainRepayMentRecordCount(Map<String,Object> searchMap);

    /**
     * 根据月月盈投资ID,查询其投资的月月盈的回款利息和本金之和
     * @param investmentId
     * @return
     */
    Double queryMonthlyGainRepayMentAmount(Map<String,Object> searchMap);

	List<Map<String, Object>> queryTradeRecord(Map<String, Object> map);

	int queryTradeRecordCount(Map<String, Object> map);

	/**
	 * @description 交易记录查询
	 * @author shuys
	 * @date 2019/6/13
	 * @param searchMap
	 * @return java.util.List<com.goochou.p2b.model.vo.TransactionRecordVO>
	*/
    List<TransactionRecordVO> queryUserTradeRecord(Map<String,Object> searchMap);

    /**
     * @description 交易记录查询 Count
     * @author shuys
     * @date 2019/6/13
     * @param searchMap
     * @return int
    */
    int queryUserTradeRecordCount(Map<String,Object> searchMap);

    /**
     * @description 收入/支出
     * @author shuys
     * @date 2019/6/17
     * @param searchMap
     * @return double
    */
    double queryUserTradeSumAmount(Map<String,Object> searchMap);

    /**
     * 预支回报明细
    * @Title: listReturnDetailByPage
    * @param userId
    * @return List<Map<String,Object>>
    * @author zj
    * @date 2019-06-18 13:56
     */
   List<Map<String, Object>> listReturnDetailByPage(@Param("orderNo")String orderNo,@Param("limitStart")Integer limitStart,@Param("limitEnd")Integer limitEnd);
   /**
    * 统计预支回报明细数量
   * @Title: countReturnDetail
   * @param userId
   * @return int
   * @author zj
   * @date 2019-06-18 13:57
    */
   int countReturnDetail(String orderNo);

    /**
     * @description 某个表客户资金明细
     * @author shuys
     * @date 2019/7/31
     * @param tableName
     * @return java.util.List<java.util.Map<java.lang.String,java.lang.Object>>
    */
    List<Map<String, String>> customDetailOfFunds(@Param("tableName") String tableName,
    		@Param("adminId")Integer adminId,@Param("departmentId")Integer departmentId);

    /**
     * @description 某个表客户资金明细总和
     * @author shuys
     * @date 2019/7/31
     * @param tableName
     * @return java.util.Map<java.lang.String,java.lang.Object>
    */
    Map<String, String> customDetailOfFundsSum(@Param("tableName") String tableName,
    		@Param("adminId")Integer adminId,@Param("departmentId")Integer departmentId);
}
