package com.goochou.p2b.dao;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.goochou.p2b.model.Project;
import com.goochou.p2b.model.ProjectExample;
import com.goochou.p2b.model.vo.BondPayVO;
import com.goochou.p2b.model.vo.FilialeSellDetailVO;
import com.goochou.p2b.model.vo.FilialeSellVO;
import com.goochou.p2b.model.vo.InvestStatementVO;
import com.goochou.p2b.model.vo.OrderChangeVO;
import com.goochou.p2b.model.vo.ProjectGpsListVo;
import com.goochou.p2b.model.vo.ScreenInfo;
import com.goochou.p2b.model.vo.p2peye.P2pEyeInvestData;
import com.goochou.p2b.model.vo.p2peye.P2pEyeLoansData;

public interface ProjectMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int countByExample(ProjectExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int deleteByExample(ProjectExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int deleteByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int insert(Project record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int insertSelective(Project record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	List<Project> selectByExample(ProjectExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	Project selectByPrimaryKey(Integer id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int updateByExampleSelective(@Param("record") Project record, @Param("example") ProjectExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int updateByExample(@Param("record") Project record, @Param("example") ProjectExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int updateByPrimaryKeySelective(Project record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table project
	 * @mbg.generated
	 */
	int updateByPrimaryKey(Project record);

	Integer selectHuoProjectSuper(Integer id);

	//int updateByPrimaryKeySelectiveWithLock(Project parentProject);

	Project getProjectByInvestmentId(Integer investmentId);

	int getUsableBondListCountByProjectId(Map<String, Object> params);

	Project getProjectById(Integer id);

	List<Project> queryList(@Param("keyword") String keyword, @Param("status") Integer status, @Param("projectType") Integer projectType,
			@Param("noob") Integer noob, @Param("limitDays") Integer limitDays, @Param("start") Integer start, @Param("limit") Integer limit,
			@Param("orderby") String orderby, @Param("sort") String sort, @Param("lendBeginTimeStartTime") String lendBeginTimeStartTime,
			@Param("lendBeginTimeEndTime") String lendBeginTimeEndTime);

	Integer countProjectList(@Param("keyword") String keyword, @Param("status") Integer status, @Param("projectType") Integer projectType,
			@Param("noob") Integer noob, @Param("limitDays") Integer limitDays, @Param("lendBeginTimeStartTime") String lendBeginTimeStartTime,
			@Param("lendBeginTimeEndTime") String lendBeginTimeEndTime);

	Integer queryListCount(@Param("keyword") String keyword, @Param("status") Integer status, @Param("projectType") Integer projectType,
			@Param("noob") Integer noob);

	List<Map<String, Object>> selectDebts(Map<String, Object> params);

	Map<String, Object> detailSafe(Integer id);

	Map<String, Object> detailSafeBond(Integer id);

	Project detailNew(Integer id);

	Project detailNewBond(Integer id);

	Project detailNewBondPC(Integer id);

	List<Map<String, Object>> getInvestors(Map<String, Object> params);

	List<Map<String, Object>> getInvestors1(Map<String, Object> params);

	List<Map<String, Object>> getMonthlyGainInvestors(Map<String, Object> params);

	int getMonthlyGainInvestorsCount(Integer projectId);

	int getInvestorsCount1(Integer projectId, Integer status);

	int getInvestorsCount(Integer projectId, Integer status);

	List<Map<String, Object>> getUsableBondList(Map<String, Object> map);

	Integer getUsableBondListCount(Integer userId);

	Map<String, Object> getTransferedProjectByUserId(Integer userId);

	List<Map<String, Object>> getAssignBondList(Map<String, Object> map);

	int getAssignBondCount(Map<String, Object> map);

	List<Map<String, Object>> getPurchasedBondList(Map<String, Object> map);

	int getPurchasedBondCount(Integer userId);

	List<Integer> getAllInvestors(Integer projectId);

	Project getNewProjectByApp();

	Integer getAllProjectCountByApp();

	List<Map<String, Object>> queryCreditor(Map<String, Object> map);

	Integer queryCreditorCount(Map<String, Object> map);

	Project selectNoobProject();

	Project selectRegularProject(int level);

	Integer selectInvestment(Integer project_id);

	Integer selectRegularCount();

	List<Project> selectRegularList();

	List<Map<String, Object>> queryCreditorAssignmentAssets(Map<String, Object> map);

	Integer queryCreditorAssignmentAssetsCount(Integer userId);

	Map<String, Object> queryCreditorAssignmentAssetsDetail(Map<String, Object> map);

	String queryEnterprise(Integer valueOf);

	Map<String, Object> queryEnterprise2(Integer valueOf);

	Map<String, Object> queryCreditorContractData(Map<String, Object> map);

	List<Project> getProjectTitleOption(Integer id);

	Integer selectUserInvestment(Integer userId, Integer projectId);

	List<Project> selectRegularProjectList(Map<String, Object> map);

	Integer selectRegularProjectCount();

	List<Project> selectRegularProjectTunnelList();

	List<Project> selectRegularProjectListold(Map<String, Object> map);

	Integer selectRegularProjectCountold();

	List<Map<String, Object>> selectCreditorList(Map<String, Object> map);

	Integer selectCreditorCount(Map<String, Object> map);

	List<Project> getRegularProject(Map<String, Object> params);

	List<Map<String, Object>> queryCurrentCreditorList(Map<String, Object> map);

	List<Map<String, Object>> queryNewCurrentCreditorList(Map<String, Object> map);

	Integer queryCurrentCreditorCount(Integer userId);

	Integer queryNewCurrentCreditorCount(Map<String, Object> map);

	List<Project> selectSuperProjectList(Integer userId);

	Integer listMyCurrentCount(Map<String, Object> map);

	Double getTransferAmountByInvestmentId(Integer investmentId);

	List<Map<String, Object>> listMyCurrent(Map<String, Object> map);

	List<Map<String, Object>> projectCost(Map<String, Object> map);

	List<Map<String, Object>> projectCost1(Map<String, Object> map);

	List<Project> selectRegularReport(Map<String, Object> map);

	List<Project> selectPackageList(Map<String, Object> map);

	List<Project> getProjectListByProduct(Integer productId);

	Map<String, Object> selectProjectLimit();

	List<Map<String, Object>> getThreeInvestors(Map<String, Object> params);

	List<Map<String, Object>> getMonthlyGainThreeInvestors(Map<String, Object> params);

	Integer selectTodayHuoProject();

	List<Project> queryCycleList(Map<String, Object> map);

	int queryCycleCount(Map<String, Object> map);

	Integer countProjectCost(Map<String, Object> map);

	List<Project> queryCanAutoReleaseProjects(Map<String, Object> map);

	List<Integer> querySellOutProjectCountByLimitDays(Map<String, Object> map);

	int updateProjectSortBylimitDays(Map<String, Object> map);

	List<Project> selectHotProjectList(Map<String, Object> map);

	List<Map<String, Object>> selectRegularProjectLimitList();

	List<Project> selectStatus2ProjectList(Map<String, Object> map);

	Integer selectStatus2ProjectCount(Map<String, Object> map);

	Double getProjectClassTotalAmount(Map<String, Object> map);

	Integer queryProjectListCount(Map<String, Object> map);

	void insertProjectList(List<Project> list);

	Integer selectRegularlyProjectCount(Map<String, Object> searchMap);

	Integer selectAssignmentOfDebtNewCount(Map<String, Object> searchMap);

	List<Project> selectRegularlyProjectListPage(Map<String, Object> searchMap);

	List<Map<String, Object>> selectAssignmentOfDebtListPage(Map<String, Object> searchMap);

	List<Map<String, Object>> selectAssignmentOfDebtNewListPage(Map<String, Object> searchMap);

	Integer selectAssignmentOfDebtCount(Map<String, Object> searchDebt);

	Project queryByLimitDays(int limitDays);

	List<Project> queryByContractId(String contractId);

	List<P2pEyeLoansData> queryP2pEyeLoansData(Map<String, Object> params);

	List<P2pEyeInvestData> queryP2pEyeInvestData(Map<String, Object> params);

	List<BondPayVO> queryBondPayList(int projectId);

	Map<String, Object> getProjectPicture(Integer id);

	List<OrderChangeVO> queryOrderChangeList(int projectId);

	List<Project> queryMonthlyGainProjectList(Map<String, Object> params);

	List<Project> getProjectByPackageId(Map<String, Object> params);

	List<Project> queryzzList(String keyword, String startAmount, String endAmount, Integer bondDayDiff, Integer status, Date startTime, Date endTime,
			Integer start, Integer limit);

	Map<String, Object> queryzzTotalAmount(String keyword, String startAmount, String endAmount, Integer bondDayDiff, Integer status, Date startTime,
			Date endTime);

	Integer queryzzListCount(String keyword, String startAmount, String endAmount, Integer bondDayDiff, Integer status, Date startTime, Date endTime);

	List<Map<String, Object>> queryZtDebtProjectList(Map<String, Object> searchMap);

	int queryZtDebtProjectCount(Map<String, Object> searchMap);

	List<Project> queryMonthlyGainProjectListWithoutOriginalProject(Map<String, Object> params);

	Object selectByExpMoneyIdOrRateCouponId(Map<String, Object> params);

	Map<String, Object> selectByPrimaryInterest(Map<String, Object> params);

	Map<String, Object> selectByOtherIdTitle4(Integer pid);

	Map<String, Object> selectByOtherIdTitle2(Map<String, Object> params);

	Map<String, Object> selectByOtherIdTitle(Map<String, Object> params);

	Map<String, Object> selectByOtherIdTitle3(Map<String, Object> params);

	/**
	 * 
	 * 查询项目下的投资记录
	 * 
	 * @param id
	 * @return
	 * @author: zj
	 */
	List<Map<String, Object>> listInvestmentByProjectId(@Param("id") int id, @Param("start") Integer start, @Param("limit") Integer limit);

	/**
	 * 
	 * 查询项目下的投资记录总数
	 * 
	 * @param id
	 * @return
	 * @author: zj
	 */
	int countInvestmentByProjectId(int id);

	/**
	 * selectByPrimaryKey
	 * 
	 * @param id
	 * @return
	 */
	Project selectByPrimaryKeyForUpdate(Integer id);

	/**
	 * 根据项目id查询 参数及其内容
	 * 
	 * @param projectId
	 * @return
	 * @author: zj
	 */
	List<Map<String, Object>> listProjectProductPropertyInfoById(Integer projectId);

	/**
	 * 获取项目的图
	 * 
	 * @param type
	 * @param projectId
	 * @return
	 * @author: zj
	 */
	List<String> getProjectImagePath(@Param("type") String type, @Param("projectId") Integer projectId);

	/**
	 * 
	 * @Title: getProjectDetailInfo
	 * @Description: 查询购买前项目产品的详情
	 * @param projectId
	 * @return Map<String,Object>
	 * @author zj
	 * @date 2019-05-21 17:24
	 */
	Map<String, Object> getProjectDetailInfo(@Param("projectId") Integer projectId);

	/**
	 * 
	 * @Title: getProjectDetailInfo
	 * @Description: 查询购买前项目产品的详情
	 * @param projectId
	 * @return Map<String,Object>
	 * @author zj
	 * @date 2019-05-21 17:24
	 */
	List<Map<String, Object>> listProjectDetailInfoByPage(Map<String, Object> map);

	/**
	 * @Title: countGetProjectDetailInfoByPage
	 * @Description: 统计售卖项目总数
	 * @param map
	 * @return Integer
	 * @author zj
	 * @date 2019-05-22 13:31
	 */
	Integer countProjectDetailInfoByPage(Map<String, Object> map);

	/**
	 * 
	 * @Title: getProjectDetailInfoByEarNumber
	 * @Description: 查询购买前项目产品的详情
	 * @param gpsNumber 设备编号
	 * @return Map<String,Object>
	 * @author zj
	 * @date 2019-05-21 17:24
	 */
	Map<String, Object> getProjectDetailInfoByGpsNumber(@Param("gpsNumber") String gpsNumber);

	/**
	 * 根据GPS设备号查询project
	 * 
	 * @Title: getProjectByGpsNumber
	 * @param gpsNumber
	 * @return {@link Integer}
	 * @author zj
	 * @date 2019-07-04 14:25
	 */
	Integer getProjectByGpsNumber(@Param("gpsNumber") String gpsNumber);

	Integer countBull(@Param("prairieValue") String prairieValue);

	Integer countCow(@Param("prairieValue") String prairieValue);

	Integer countAllCattle(@Param("prairieValue") String prairieValue);

	Integer countCalf(@Param("prairieValue") String prairieValue);
    /**
     * @date 2019年7月16日
     * @author wangyun
     * @time 上午9:35:30
     * @Description 查询GPS牛只列表
     * 
     * @param map
     * @return
     */
    List<ProjectGpsListVo> listGpsProjectByPage(Map<String, Object> map);
    Integer countListGpsProjectByPage(Map<String, Object> map);
    /**
     * 统计牛月龄范围
    * @Title: countAge 
    * @param prairieValue
    * @return {@link ScreenInfo}
    * @author zj
    * @date 2019-07-18 16:50
     */
    List<ScreenInfo> countAge(@Param("prairieValue") String prairieValue);
    
	/**
	 * 根据耳标号查询回购记录
	 * 
	 * @Title: listBuyBackRecord
	 * @param earNumber
	 * @return List<Map<String,Object>>
	 * @author zj
	 * @date 2019-07-19 15:34
	 */
	List<Map<String, Object>> listBuyBackRecord(@Param("earNumber") String earNumber, @Param("start") Integer start, @Param("limit") Integer limit);

	/**
	 * 统计耳标号查询回购记录数量
	 * 
	 * @Title: countBuyBackRecord
	 * @param earNumber
	 * @return int
	 * @author zj
	 * @date 2019-07-19 15:43
	 */
	int countBuyBackRecord(@Param("earNumber") String earNumber);
	
	List<Integer> statisticsInfo();
	

	List<Map<String, Object>> listBuyBack(@Param("startDate") String startDate, @Param("endDate") String endDate, @Param("startAge") Integer startAge,
			@Param("endAge") Integer endAge, @Param("start") Integer start, @Param("limit") Integer limit, @Param("adminId")Integer adminId,@Param("departmentId")Integer departmentId);

	int countBuyBack(@Param("startDate") String startDate, @Param("endDate") String endDate, @Param("startAge") Integer startAge,
			@Param("endAge") Integer endAge, @Param("adminId")Integer adminId,@Param("departmentId")Integer departmentId);

	List<Map<String, Object>> listBuyBackTJ(@Param("startDate") String startDate, @Param("endDate") String endDate);
	
	List<Map<String, Object>> listCreditFunds(@Param("typeId") Integer typeId,@Param("startDate") String startDate, @Param("endDate") String endDate,@Param("start") Integer start, @Param("limit") Integer limit);
	
	int countCreditFunds(@Param("typeId") Integer typeId,@Param("startDate") String startDate, @Param("endDate") String endDate);
	
	List<InvestStatementVO> investStatement(@Param("startDate") String startDate, @Param("endDate") String endDate);

	/**
	 * 牛只相册列表
	 * @author sxy
	 * @param map
	 * @return
	 */
	List<Map<String, Object>> listProjectPicture(Map<String, Object> map);

	/**
	 * 牛只相册列表数量
	 * @author sxy
	 * @param map
	 * @return
	 */
	Integer countProjectPicture(Map<String, Object> map);

	/**
	 * 牛只相册详情
	 * @author sxy
	 * @param map
	 * @return
	 */
	List<Map<String, Object>> getProjectPictureDetail(Map<String, Object> map);

	/**
	 * 牛只相册详情数量
	 * @author sxy
	 * @param map
	 * @return
	 */
	Integer countProjectPictureDetail(Map<String, Object> map);

	Project selectLastOneByRealEarNumber(String earNumber);

	List<FilialeSellVO> listFilialeSell(@Param("limitStart")Integer limitStart, @Param("limitEnd")Integer limitEnd, 
			@Param("keyword")String keyword, @Param("startDate") Date startDate,  @Param("endDate")Date endDate);

	int countFilialeSell(@Param("keyword")String keyword, @Param("startDate") Date startDate,  @Param("endDate")Date endDate);

	List<FilialeSellDetailVO> detailFilialeSell(@Param("empId")Integer empId, @Param("keyword")String keyword,
			@Param("recommendKeyword")String recommendKeyword,
			@Param("limitStart")Integer start, @Param("limitEnd")Integer end,
			@Param("startDate") Date startTime, @Param("endDate")Date endTime);

	int countDetailFilialeSell(@Param("empId")Integer empId, @Param("keyword")String keyword,@Param("recommendKeyword")String recommendKeyword,
			 @Param("startDate") Date startTime, @Param("endDate")Date endTime);
	
	int sumTotalLimitDayByEarNumber(@Param("earNumber") String earNumber);
	
	public BigDecimal statisticsFilialeSell(@Param("empId")Integer empId, @Param("keyword")String keyword,@Param("recommendKeyword")String recommendKeyword,
			 @Param("startDate") Date startTime, @Param("endDate")Date endTime);


	List<Project> listGroupByLimitDays(ProjectExample example);

}
