package com.goochou.p2b.dao;

import com.goochou.p2b.model.CustomerServiceManagement;
import com.goochou.p2b.model.User;
import com.goochou.p2b.model.UserExample;
import com.goochou.p2b.model.vo.DataSourceSumVo;
import com.goochou.p2b.model.vo.InvestSpreadOfCountryVO;
import com.goochou.p2b.model.vo.LandlordVO;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int countByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int deleteByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int insertSelective(User record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    List<User> selectByExample(UserExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    User selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") User record, @Param("example") UserExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int updateByExample(@Param("record") User record, @Param("example") UserExample example);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(User record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds to the database table user
     * @mbg.generated
     */
    int updateByPrimaryKey(User record);

    public List<Map<String, Object>> getCountByMonthDay(@Param("adminId")Integer adminId,  @Param("departmentId")Integer departmentId);

    public List<Map<String, Double>> investAmountRank();

    int EditPersonal(User user);

    User selectUserByPhone(String phone);

    Integer checkUserName(String username);

    void updateUserStatus(@Param("userId") Integer userId, @Param("type") Integer type);

    void logout(String phone);

    User selectUserAndAssetsByUserId(Integer userId);

    void setBackPassword(@Param("id") Integer id, @Param("newPassword") String newPassword);

    User checkLogin(String token);

    List<Map<String, Object>> query(Map<String, Object> map);

    Integer queryCount(Map<String, Object> map);

    List<User> ListAllOldUser();

    List<Map<String, Object>> getThisMonthCountByInviteCode(String inviteCode);

    List<Map<String, Object>> getThisMonthUserByInviteCode(String inviteCode);

    List<Map<String, Object>> getOldMonthsUserByInviteCode(@Param("inviteCode") String inviteCode, @Param("startTime") Date startTime, @Param("endTime") Date endTime);

    Integer getFinancialPlanner(@Param("inviteCode") String inviteCode, @Param("date") Date date);

    Long countHuo();

    List<User> getbbdd();

    Long huoRecharge();

    public List<Double> accountChecking(Integer userId);

    public List<Map<String, Object>> userBirthday();// 每日拉取当天生日用户名单

    public List<User> getByTime(@Param("startTime") Date startTime, @Param("endTime") Date endTime);

    public List<Map<String, Object>> query1(Map<String, Object> map);

    public Integer queryCount1(Map<String, Object> map);

    /**
     * 此方法返回所有客服管理信�??
     *
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??17日下�??3:24:46
     */
    public List<Map<String, Object>> allCustomer();

    /**
     * 新增客服
     *
     * @param customerServiceManagement
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??17日下�??4:13:49
     */
    public void addCustomer(CustomerServiceManagement customerServiceManagement);

    /**
     * 修改客服
     *
     * @param customerServiceManagement
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??17日下�??4:13:49
     */
    public void updateCustomer(CustomerServiceManagement customerServiceManagement);

    /**
     * 删除客服
     *
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??17日下�??4:13:49
     */
    public void deleteCustomer(Integer cid);

    /**
     * 查询�??有客服名字，方便前台用户新增
     *
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??17日下�??5:25:12
     */
    public List<Map<String, Object>> selectCustomerUser();

    /**
     * 查询当前在投金额>0并且收益>0的用�??
     *
     * @return
     */
    public List<Map<String, Object>> listInvestedAndIncomed();

    /**
     * 根据id查单个客服信息，回填数据给更新页�??
     *
     * @param id
     * @return
     * @author 王信
     * @Create Date: 2015�??11�??18日上�??9:13:44
     */
    public List<Map<String, Object>> selectSingleUser(Integer id);

    /**
     * 手动同步客服配置数据到数据库
     *
     * @author 王信
     * @Create Date: 2015�??11�??18日下�??3:14:01
     */
    public void batchCustomer();

    /**
     * @Description(描述):模糊查询用户信息
     * @author 王信
     * @date 2016/5/18
     * @params
     **/
    public List<User> getByKeyword(@Param("keyword") String keyword);

    /**
     * 查询在投+余额+冻结金额大于0的用户并且不是黑名单中的用户
     *
     * @return
     */
    public List<User> getActiveUser();

    /**
     * 获取�??要发送短信的用户手机�??
     *
     * @return
     */
    public List<String> getMessageUserPhone();


    /**
     * 查询�??有的提现被锁用户
     *
     * @return
     * @author 王信
     * @Create Date: 2015�??12�??23日上�??9:32:47
     */
    public List<Map<String, Object>> selectLockwithdraw(Map<String, Object> map);

    /**
     * 查询记录条数
     *
     * @return
     * @author 王信
     * @Create Date: 2015�??12�??23日上�??10:32:21
     */
    public Integer selectLockwithdrawCount(Map<String, Object> map);

    /**
     * 解锁体现用户的账�??
     *
     * @param id
     * @author 王信
     * @Create Date: 2015�??12�??23日上�??11:01:44
     */
    public void deleteLockWithdraw(Integer id);

    /**
     * 根据userid    **�??**，字符串查询
     *
     * @param map
     * @return
     * @author 王信
     * @Create Date: 2015�??12�??25日下�??3:07:00
     */
    public List<String> selectUserIds(Map<String, Object> map);

    /**
     * app 3.0 查询用户资产信息
     *
     * @return
     * @author 刘源
     * @date 2016�??2�??17�??
     * @parameter
     */
    public Map<String, Object> queryUserAssets(Map<String, Object> map);

    /**
     * 用户资产差异统计
     *
     * @param map
     * @return
     * @author 刘源
     * @date 2016/3/31
     */
    List<Map<String, Object>> queryUserAssetsDifferenceStatistics(Map<String, Object> map);

    /**
     * @Description(描述):�??请好友投资定�?? 被邀请�?�首笔不转让的投资�?�收益的5%
     * @author 王信
     * @date 2016/4/8
     * @params
     **/
    public Map<String, Object> selectInvitationActivity(Map<String, Object> map);

    /**
     * @Description(描述):查询用户是否是活动期间注册的新用户的首笔投资 count=0  就是首笔投资�??
     * @author 王信
     * @date 2016/4/14
     * @params
     **/
    public Map<String, Object> selectUserActivityInvestment(Map<String, Object> map);

    public List<User> listIncomed();

    /**
     * @Description(描述):查询昨天已注册用户的id
     * @author 赵星�??
     * @date 2016/7/14
     * @params
     **/
    List<Map<String, Object>> getUNinvestedUser(Map<String, Object> map);

    /**
     * @Description(描述):查询昨天已注册用户的数量
     * @author 赵星�??
     * @date 2016/7/14
     * @params
     **/
    public int getCountUNinvestedUser(Map<String, Object> map);

    /**
     * @Description(描述):查询�??有已注册用户的数�??
     * @author 赵星�??
     * @date 2016/7/15
     * @params
     **/
    public int getAllCountUNinvestedUser();


    /**
     * @Description(描述):查询�??有已注册用户的id
     * @author 赵星�??
     * @date 2016/7/15
     * @params
     **/
    List<Map<String, Object>> getAllUNinvestedUser(Map<String, Object> map);

    /**
     * @Description(描述):查询�??有可以分派给客服的用�??
     * @author 赵星�??
     * @date 2016/7/20
     * @params
     **/
    public List<Map<String, Object>> queryCustomer(Map<String, Object> map);

    /**
     * @Description(描述):用户周报�??
     * @author 王信
     * @date 2016/8/29
     * @params
     **/
    Map<String, Object> selectUserWeeklyReport(Map<String, Object> map);

    public List<Map<String, Object>> query2(Map<String, Object> map);

    /**
     * @Description: 超级投资人信息列�??
     * @date 2016/10/11
     * @author 王信
     */
    List<Map<String, Object>> selectSuperUserList(Map<String, Object> map);

    Integer selectSuperUserCount(Map<String, Object> map);

    public User getLoginUser(String keyword);

    List<Map<String, Object>> detailDing(Map<String, Object> map);

    List<Map<String, Object>> countDing(Map<String, Object> map);

    List<Map<String, Object>> selectByDate(Map<String, Object> map);

    List<Map<String, Object>> selectAll(Map<String, Object> map);

    List<Map<String, Object>> selectYestoday(Map<String, Object> map);

    public Map<String, Object> selectUserByParam(Map<String, String> map);

    int countUser();

    int selectMaxUserId();

    List<InvestSpreadOfCountryVO> queryInvestSpreadOfCountry(Map<String, Object> map);

    List<LandlordVO> queryLandloardList(Map<String, Object> map);

    Integer queryLandloardListCount(Map<String, Object> map);

    int updateSingedStatus(Map<String, Object> map);

	Integer queryTodaySignedUser(@Param("date")Date date);

	Integer queryTodayExpGoldUser(@Param("date")Date date);

	Integer updatePwdByUserId(Map<String,Object> map);

	Map<String,Object> getUserPwdInfo(Integer userId);

    int getCouponTotalCount(Integer userId);

	Map<String, Object> doAccount(Integer userId);

	Map<String, Object> queryUsercustom(@Param("userId")Integer userId);

	List<Integer> queryDistriblack();

	int updateByUserId(Map<String,Object> map);

	/**
	 * @description 邀请的注册用户信息（已注册并且）
	 * @author shuys
	 * @date 2019/6/21
	 * @param userId
     * @param isCowboying 是否已养牛
	 * @return java.util.List<java.util.Map<java.lang.String,java.lang.Object>>
	*/
	List<Map<String, Object>> queryInviteUsersToResgister(Integer userId);
	
	/**
	 * 查询[用户X]邀请的用户首次投资赠送给[用户X]的红包
	 * 
	 * 红包.other_id=被邀用户的首投id,红包.user_id=[用户X].id,红包.trigger_type in (投资,首投)
	 * @param userId
	 * @return
	 */
	List<Map<String, Object>> queryInviteFirstInvestmentHongBao(Integer userId);
	
    List<Map<String, Object>> queryNotInviteUsersToResgister(Integer userId);

	int queryInviteUsersCount(Integer userId);
	
	User selectByPrimaryKeyForUpdate(Integer id);
	
	/**
	 * 迁移用户报表 <br/>
	 * <>
	 * @author shuys
	 * @date 2019/10/23
	 * @param map
	 * @return java.util.List<java.util.Map<java.lang.String,java.lang.Object>>
	*/
	List<Map<String, Object>> listMirgationUserReport(Map<String, Object> map);
	int countMirgationUserReport(Map<String, Object> map);
	
	List<User> getFirstInvestmentWaitInviter();
	
	List<User> getFirstInvestmentWaitInvitee();

	List<DataSourceSumVo> dataSourceSum(Map<String, Object> prarm);
	
}
