<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.InvestmentMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.Investment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="project_id" jdbcType="INTEGER" property="projectId" />
    <result column="amount" jdbcType="DOUBLE" property="amount" />
    <result column="interest_amount" jdbcType="DOUBLE" property="interestAmount" />
    <result column="balance_pay_money" jdbcType="DECIMAL" property="balancePayMoney" />
    <result column="rate_coupon_id" jdbcType="INTEGER" property="rateCouponId" />
    <result column="hongbao_id" jdbcType="INTEGER" property="hongbaoId" />
    <result column="hongbao_money" jdbcType="DECIMAL" property="hongbaoMoney" />
    <result column="remain_amount" jdbcType="DECIMAL" property="remainAmount" />
    <result column="client" jdbcType="VARCHAR" property="client" />
    <result column="pay_status" jdbcType="INTEGER" property="payStatus" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="add_interest" jdbcType="DOUBLE" property="addInterest" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    id, order_no, type, product_id, user_id, project_id, amount, interest_amount, balance_pay_money,
    rate_coupon_id, hongbao_id, hongbao_money, remain_amount, client, pay_status, order_status,
    add_interest, version, create_date, update_date
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.InvestmentExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from investment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    select
    <include refid="Base_Column_List" />
    from investment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    delete from investment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.InvestmentExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    delete from investment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.Investment" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    insert into investment (id, order_no, type,
      product_id, user_id, project_id,
      amount, interest_amount, balance_pay_money,
      rate_coupon_id, hongbao_id, hongbao_money,
      remain_amount, client, pay_status,
      order_status, add_interest, version,
      create_date, update_date)
    values (#{id,jdbcType=INTEGER}, #{orderNo,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER},
      #{productId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER},
      #{amount,jdbcType=DOUBLE}, #{interestAmount,jdbcType=DOUBLE}, #{balancePayMoney,jdbcType=DECIMAL},
      #{rateCouponId,jdbcType=INTEGER}, #{hongbaoId,jdbcType=INTEGER}, #{hongbaoMoney,jdbcType=DECIMAL},
      #{remainAmount,jdbcType=DECIMAL}, #{client,jdbcType=VARCHAR}, #{payStatus,jdbcType=INTEGER},
      #{orderStatus,jdbcType=INTEGER}, #{addInterest,jdbcType=DOUBLE}, #{version,jdbcType=INTEGER},
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.Investment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    insert into investment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="interestAmount != null">
        interest_amount,
      </if>
      <if test="balancePayMoney != null">
        balance_pay_money,
      </if>
      <if test="rateCouponId != null">
        rate_coupon_id,
      </if>
      <if test="hongbaoId != null">
        hongbao_id,
      </if>
      <if test="hongbaoMoney != null">
        hongbao_money,
      </if>
      <if test="remainAmount != null">
        remain_amount,
      </if>
      <if test="client != null">
        client,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
      <if test="addInterest != null">
        add_interest,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="interestAmount != null">
        #{interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="balancePayMoney != null">
        #{balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="rateCouponId != null">
        #{rateCouponId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoId != null">
        #{hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoMoney != null">
        #{hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="remainAmount != null">
        #{remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="client != null">
        #{client,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="addInterest != null">
        #{addInterest,jdbcType=DOUBLE},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
    <selectKey keyProperty="id" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.InvestmentExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    select count(*) from investment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    update investment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.projectId != null">
        project_id = #{record.projectId,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.interestAmount != null">
        interest_amount = #{record.interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.balancePayMoney != null">
        balance_pay_money = #{record.balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.rateCouponId != null">
        rate_coupon_id = #{record.rateCouponId,jdbcType=INTEGER},
      </if>
      <if test="record.hongbaoId != null">
        hongbao_id = #{record.hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="record.hongbaoMoney != null">
        hongbao_money = #{record.hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.remainAmount != null">
        remain_amount = #{record.remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.client != null">
        client = #{record.client,jdbcType=VARCHAR},
      </if>
      <if test="record.payStatus != null">
        pay_status = #{record.payStatus,jdbcType=INTEGER},
      </if>
      <if test="record.orderStatus != null">
        order_status = #{record.orderStatus,jdbcType=INTEGER},
      </if>
      <if test="record.addInterest != null">
        add_interest = #{record.addInterest,jdbcType=DOUBLE},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    update investment
    set id = #{record.id,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      project_id = #{record.projectId,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=DOUBLE},
      interest_amount = #{record.interestAmount,jdbcType=DOUBLE},
      balance_pay_money = #{record.balancePayMoney,jdbcType=DECIMAL},
      rate_coupon_id = #{record.rateCouponId,jdbcType=INTEGER},
      hongbao_id = #{record.hongbaoId,jdbcType=INTEGER},
      hongbao_money = #{record.hongbaoMoney,jdbcType=DECIMAL},
      remain_amount = #{record.remainAmount,jdbcType=DECIMAL},
      client = #{record.client,jdbcType=VARCHAR},
      pay_status = #{record.payStatus,jdbcType=INTEGER},
      order_status = #{record.orderStatus,jdbcType=INTEGER},
      add_interest = #{record.addInterest,jdbcType=DOUBLE},
      version = #{record.version,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.Investment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    update investment
    <set>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="interestAmount != null">
        interest_amount = #{interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="balancePayMoney != null">
        balance_pay_money = #{balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="rateCouponId != null">
        rate_coupon_id = #{rateCouponId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoId != null">
        hongbao_id = #{hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoMoney != null">
        hongbao_money = #{hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="remainAmount != null">
        remain_amount = #{remainAmount,jdbcType=DECIMAL},
      </if>
      <if test="client != null">
        client = #{client,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="addInterest != null">
        add_interest = #{addInterest,jdbcType=DOUBLE},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.Investment">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri May 17 11:49:37 CST 2019.
    -->
    update investment
    set order_no = #{orderNo,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      project_id = #{projectId,jdbcType=INTEGER},
      amount = #{amount,jdbcType=DOUBLE},
      interest_amount = #{interestAmount,jdbcType=DOUBLE},
      balance_pay_money = #{balancePayMoney,jdbcType=DECIMAL},
      rate_coupon_id = #{rateCouponId,jdbcType=INTEGER},
      hongbao_id = #{hongbaoId,jdbcType=INTEGER},
      hongbao_money = #{hongbaoMoney,jdbcType=DECIMAL},
      remain_amount = #{remainAmount,jdbcType=DECIMAL},
      client = #{client,jdbcType=VARCHAR},
      pay_status = #{payStatus,jdbcType=INTEGER},
      order_status = #{orderStatus,jdbcType=INTEGER},
      add_interest = #{addInterest,jdbcType=DOUBLE},
      version = #{version,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="query" parameterType="com.goochou.p2b.model.vo.InvestmentSearchCondition" resultType="map">
		SELECT
			i.project_id,
			i.id,
			i.time,
			i.amount,
			i.type,
			i.terminal,
			i.hongbao_id,
			i.user_id,
			u.username,
			u.true_name trueName,
			u.id userId,
			u.register_time register_time,
			p.title,
			p.parent_id parent_id1,
			p.limit_days,
			(TO_DAYS(NOW()) - TO_DAYS(i.time)+1) as holdDays,
			p.project_type project_type1,
			pp.title title2,
			hb.amount hb_amount,
			wx. CODE,
			CASE
			WHEN p.project_type = 0
			AND p.parent_id IS NULL THEN
				p.limit_days
			WHEN p.parent_id IS NOT NULL THEN
				pp.limit_days + DATEDIFF(pp.start_time, now())
			ELSE
				0
			END difday,
      mgpp.limit_days month_limit_day,
      mgpp.title month_title
		FROM
			investment i
		INNER JOIN `user` u ON i.user_id = u.id
		LEFT JOIN project p ON i.project_id = p.id
		LEFT JOIN project pp ON p.parent_id = pp.id
		LEFT JOIN hongbao hb ON i.hongbao_id = hb.id
		LEFT JOIN wx_activity wx ON wx.user_id = u.id
		LEFT JOIN monthly_gain_product mgp on p.product_id = mgp.id
		LEFT JOIN monthly_gain_project_package mgpp on mgpp.id=i.package_id
		WHERE
			u.`status` = 0
			<!-- 排除月月盈复投数据影响 -->
        	and i.type !=9
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%' or
            p.title like '%${keyword}%' or p.contract_id like '%${keyword}%')
        </if>
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="adminId !=null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>
        <if test="source != null">
            <if test=" source == 0 ">
                and i.terminal= 2
            </if>
            <if test="source == 2 ">
                and i.terminal= 1
            </if>
            <if test="source == 1 or source == 3 ">
                and i.terminal= 3
            </if>
            <if test="source == 4 ">
                and i.terminal= 0
            </if>
        </if>
        <if test="investType != null">
        	<!-- 检索时间需要添加月月盈的投资条件 -->
            <if test="investType &gt;= 14 ">
                and (p.limit_days=${investType} or mgpp.limit_days=${investType})
            </if>
            <if test="investType == 1 or investType == 2 ">
                and p.project_type=${investType}
            </if>
            <if test="investType ==3 ">
                and p.noob=1
            </if>
        </if>
        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>

        <if test="type != null ">
            <if test="type ==0 ">
                and p.project_type=0
            </if>
            <if test="type !=0 ">
                and i.type=#{type}
            </if>
        </if>
        ORDER BY i.id DESC
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="queryCounts" parameterType="com.goochou.p2b.model.vo.InvestmentSearchCondition" resultType="int">
        select count(*)
        from investment i
        left join user u on i.user_id=u.id
        left join project p on i.project_id=p.id
        left join monthly_gain_project_package mgpp on mgpp.id=i.package_id
        where
        u.status=0
        <!-- 排除月月盈复投数据影响 -->
        and i.type !=9
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="adminId !=null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%' or
            p.title like '%${keyword}%')
        </if>
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>

        <if test="source != null">
            <if test=" source == 0 ">
                and i.terminal= 2
            </if>
            <if test="source == 2 ">
                and i.terminal= 1
            </if>
            <if test="source == 1 or source == 3 ">
                and i.terminal= 3
            </if>
            <if test="source == 4 ">
                and i.terminal= 0
            </if>
        </if>
        <!-- 添加月月盈的检索时间 -->
        <if test="investType != null">
            <if test="investType &gt;= 14 ">
                and (p.limit_days=${investType} or mgpp.limit_days=${investType})
            </if>

            <if test="investType == 1 or investType == 2 ">
                and p.project_type=${investType}
            </if>
            <if test="investType ==3 ">
                and p.noob=1
            </if>
        </if>

        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>
        <if test="type != null ">
            <if test="type ==0 ">
                and p.project_type=0
            </if>
            <if test="type !=0 ">
                and i.type=#{type}
            </if>
        </if>
    </select>


    <select id="queryCount" parameterType="com.goochou.p2b.model.vo.InvestmentSearchCondition" resultType="map">
        select sum(i.amount) amount,(select sum(i.amount/365*p.limit_days)
        from investment i,user u,project p
        where
        i.user_id=u.id
        and i.project_id=p.id
        and u.status=0
        and i.type in (0,2)
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%' or
            p.title like '%${keyword}%' or p.contract_id like '%${keyword}%')
        </if>
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="adminId !=null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>
        <if test="source != null">
            <if test=" source == 0 ">
                and i.terminal= 2
            </if>
            <if test="source == 2 ">
                and i.terminal= 1
            </if>
            <if test="source == 1 or source == 3 ">
                and i.terminal= 3
            </if>
            <if test="source == 4 ">
                and i.terminal= 0
            </if>
        </if>
        <if test="investType != null">
            <if test="investType &gt;= 14 ">
                and p.limit_days=${investType}
            </if>
            <if test="investType == 1 or investType == 2 ">
                and p.project_type=${investType}
            </if>
            <if test="investType ==3 ">
                and p.noob=1
            </if>
        </if>
        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>

        <if test="type != null ">
            <if test="type ==0 ">
                and p.project_type=0
            </if>
            <if test="type !=0 ">
                and i.type=#{type}
            </if>
        </if>
        ) yearAmount from investment i
        left join user u on i.user_id=u.id
        left join project p on i.project_id=p.id
        left join monthly_gain_project_package mgpp on mgpp.id=i.package_id
        where
        u.status=0
        <!-- 排除月月盈复投数据影响 -->
        and i.type !=9
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%' or
            p.title like '%${keyword}%')
        </if>
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="adminId !=null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>
        <if test="source != null">
            <if test=" source == 0 ">
                and i.terminal= 2
            </if>
            <if test="source == 2 ">
                and i.terminal= 1
            </if>
            <if test="source == 1 or source == 3 ">
                and i.terminal= 3
            </if>
            <if test="source == 4 ">
                and i.terminal= 0
            </if>
        </if>
        <if test="investType != null">
            <if test="investType &gt;= 14 ">
                and (p.limit_days=${investType} or mgpp.limit_days=${investType})
            </if>
            <if test="investType == 1 or investType == 2 ">
                and p.project_type=${investType}
            </if>
            <if test="investType ==3 ">
                and p.noob=1
            </if>
        </if>
        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>

        <if test="type != null ">
            <if test="type ==0 ">
                and p.project_type=0
            </if>
            <if test="type !=0 ">
                and i.type=#{type}
            </if>
        </if>

    </select>


    <select id="querySum" parameterType="com.goochou.p2b.model.vo.InvestmentSearchCondition" resultType="int">
        select count(*) FROM
        (select u.id from
        investment i
        left join user u on i.user_id=u.id
        left join project p on i.project_id=p.id
        left join monthly_gain_project_package mgpp on mgpp.id=i.package_id
        where
         u.status=0
         <!-- 排除月月盈复投数据影响 -->
         and i.type !=9
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%' or
            p.title like '%${keyword}%')
        </if>
        <if test="codes != null">
            and (u.id in (select user_id from wx_activity where code =#{codes}))
        </if>
        <if test="adminId !=null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>
        <if test="source != null">
            <if test=" source == 0 ">
                and i.terminal= 2
            </if>
            <if test="source == 2 ">
                and i.terminal= 1
            </if>
            <if test="source == 1 or source == 3 ">
                and i.terminal= 3
            </if>
            <if test="source == 4 ">
                and i.terminal= 0
            </if>
        </if>

        <if test="investType != null">
            <if test="investType &gt;= 14 ">
                and (p.limit_days=${investType} or mgpp.limit_days=${investType})
            </if>
            <if test="investType == 1 or investType == 2 ">
                and p.project_type=${investType}
            </if>
            <if test="investType ==3 ">
                and p.noob=1
            </if>
        </if>

        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>
        <if test="type != null ">
            <if test="type ==0 ">
                and p.project_type=0
            </if>
            <if test="type !=0 ">
                and i.type=#{type}
            </if>
        </if>
        GROUP by id
        ) s
    </select>


    <select id="getAmountCount" parameterType="int" resultType="double">
        select ifnull(sum(amount),0) from investment where order_status=1
        <if test="userId != null">
            and user_id = #{userId}
        </if>
    </select>


    <select id="getTotalInterestOfProject" parameterType="map" resultType="map">
        SELECT
            ip.pid  projectId,
            p.title projectTitle,
            ip.tt   amount
        FROM
            (
                SELECT
                    i.project_id              pid,
                    sum(inte.interest_amount) tt
                FROM
                    investment i
                    LEFT JOIN interest inte ON i.id = inte.investment_id
                WHERE
                    inte.has_dividended = #{hasDividended}
                    AND i.user_id = #{userId}
                    AND i.terminal = 0
                GROUP BY
                    i.project_id
            ) ip,
            project p
        WHERE
            ip.pid = p.id
            AND ip.tt IS NOT NULL
            AND p.parent_id IS NULL
        LIMIT #{limit}
    </select>

    <select id="getTotalInterestOfBond" parameterType="map" resultType="map">
        SELECT
            ip.pid  projectId,
            f.title projectTitle,
            ip.tt   amount
        FROM
            (
                SELECT
                    i.project_id              pid,
                    sum(inte.interest_amount) tt
                FROM
                    investment i
                    LEFT JOIN interest inte ON i.id = inte.investment_id
                WHERE
                    inte.has_dividended = #{hasDividended}
                    AND i.user_id = #{userId}
                    AND i.terminal = 0
                GROUP BY
                    i.project_id
            ) ip,
            project p,
            project f
        WHERE
            ip.pid = p.id
            AND p.parent_id = f.id
            AND ip.tt IS NOT NULL
            AND p.parent_id IS NOT NULL
        LIMIT #{limit}
    </select>

    <select id="getTotalInvestOfBond" parameterType="map" resultType="map">
        SELECT
            t.project_id projectId,
            t.amount     amount,
            f.title      title
        FROM
            (
                SELECT
                    project_id,
                    sum(amount) amount
                FROM
                    investment
                WHERE
                    user_id = #{userId}
                    AND terminal = 0
                GROUP BY
                    project_id
                ORDER BY
                    amount DESC
                LIMIT #{limit}
            ) t,
            project p,
            project f
        WHERE
            p.parent_id = f.id
            AND t.project_id = p.id
            AND p.parent_id IS NOT NULL
    </select>

    <select id="getTotalInvestOfProject" parameterType="map" resultType="map">
        SELECT
            t.project_id projectId,
            t.amount     amount,
            p.title      title
        FROM
            (
                SELECT
                    project_id,
                    sum(amount) amount
                FROM
                    investment
                WHERE
                    user_id = #{userId}
                    AND terminal = 0
                GROUP BY
                    project_id
                ORDER BY
                    amount DESC
                LIMIT #{limit}
            ) t,
            project p
        WHERE
            t.project_id = p.id
            AND p.parent_id IS NULL
    </select>

    <select id="findByUserId" parameterType="map" resultType="map">
        select a.*,b.amount hbAmount from ( select i.id investmentId,i.hongbao_id hbId,i.award_amount awardAmount,p.id
        projectId,p.title,i.amount,p.annualized,i.time,p.deadline,p.limit_days limitDays,
        p.status,sum(IF(t.has_dividended=1,t.interest_amount,0)) interestedAmount
        from investment i,project p,interest t where i.project_id=p.id and i.id=t.investment_id and p.parent_id is null
        and i.user_id=#{userId}
        <if test="status != null">
            and p.status = #{status}
        </if>
        <if test="startDate != null and endDate != null">
            and i.time between #{startDate} and #{endDate}
        </if>
        group by t.investment_id
        <if test="order == 0 or order == null">
            order by i.time desc
        </if>
        <if test="order == 1">
            order by i.time asc
        </if>
        <if test="order == 2">
            order by i.amount desc
        </if>
        <if test="order == 3">
            order by i.amount asc
        </if>) a left join hongbao b on a.hbId=b.id
        limit #{start},#{limit};
    </select>

    <select id="findByUserIdCount" parameterType="map" resultType="int">
        select count(*) from (select i.id investmentId,i.hongbao_id hbId,i.award_amount awardAmount,p.id
        projectId,p.title,i.amount,p.annualized,i.time,p.deadline,p.limit_days limitDays,
        p.status,sum(IF(t.has_dividended=1,t.interest_amount,0)) interestedAmount
        from investment i,project p,interest t where i.project_id=p.id and i.id=t.investment_id and p.parent_id is null
        and i.user_id=#{userId}
        <if test="status != null">
            and p.status = #{status}
        </if>
        <if test="startDate != null and endDate != null">
            and i.time between #{startDate} and #{endDate}
        </if>
        group by t.investment_id) a left join hongbao b on a.hbId=b.id
    </select>

    <select id="getProjectByUserIdAndStatus" parameterType="map" resultType="map">
        SELECT
        count(id) count,sum(amount) amount
        FROM
        (
        SELECT
        sum(i.amount) amount,i.id
        FROM
        investment i,
        project p
        WHERE
        i.project_id = p.id
        and i.user_id=#{userId}
        and i.type=0
        <if test="status != null">
            AND p.status = #{status}
        </if>
        group by i.project_id
        ) a
    </select>

    <select id="getInterestGroupByMonth" parameterType="map" resultType="map">
        SELECT
        sum(interest_amount) amount,
        DATE_FORMAT(date, "%Y-%m") month
        FROM
        interest
        WHERE
        has_dividended = #{hasDividended}
        AND investment_id IN (
        SELECT id
        FROM
        investment
        WHERE
        user_id = #{userId}
        )
        <if test="hasDividended ==0">
            and type in(1)
        </if>
        <if test="hasDividended ==1">
            and type in(1,2)
        </if>
        GROUP BY
        DATE_FORMAT(date, "%Y-%m")
        ORDER BY date
    </select>

    <select id="investAmountOfMonth" parameterType="map" resultType="map">
        SELECT
            sum(amount)                amount,
            DATE_FORMAT(time, "%Y-%m") month
        FROM
            investment
        WHERE
            user_id = #{userId}
        GROUP BY
            DATE_FORMAT(time, "%Y-%m")
        ORDER BY
            time
    </select>

    <select id="investmentOfProjectDetal" parameterType="int" resultType="map">
        SELECT
            p.title            title,
            p.repayment_method repaymentMethod,
            p.annualized       annualized,
            v.time             investmentTime,
            v.remain_amount    remainAmount,
            max(i.date)        overtime,
            sum(

                    IF(
                            i.has_dividended = 0,
                            i.interest_amount,
                            0
                    )
            )                  undividendedAmount,
            sum(

                    IF(
                            i.has_dividended = 1,
                            i.interest_amount,
                            0
                    )
            )                  dividendedAmount
        FROM
            investment v,
            project p,
            interest i
        WHERE
            v.id = #{investmentId}
            AND v.project_id = p.id
            AND i.investment_id = v.id
        GROUP BY
            v.id
    </select>

    <select id="investmentOfBondDetail" parameterType="int" resultType="map">
        SELECT
            f.title            title,
            f.repayment_method repaymentMethod,
            f.annualized       annualized,
            v.time             investmentTime,
            v.remain_amount    remainAmount,
            max(i.date)        overtime,
            sum(

                    IF(
                            i.has_dividended = 0,
                            i.interest_amount,
                            0
                    )
            )                  undividendedAmount,
            sum(
                    IF(
                            i.has_dividended = 1,
                            i.interest_amount,
                            0
                    )
            )                  dividendedAmount
        FROM
            investment v,
            project p,
            interest i,
            project f
        WHERE
            v.id = #{investmentId}
            AND v.project_id = p.id
            AND i.investment_id = v.id
            AND p.parent_id = f.id
        GROUP BY
            v.id
    </select>

    <select id="getInvestAmountByMonthDay" parameterType="int" resultType="map">
        SELECT
        sum(amount) money,
        DATE_FORMAT(i.create_date, '%Y-%m-%d') time
        FROM investment i left join user u on  i.user_id = u.id 
        <if test="adminId != null ">
		     inner join admin_responsible 
		     on admin_responsible.admin_id=#{adminId} 
		     and admin_responsible.department_id=u.department_id
		</if>
		<if test="departmentId != null">
		     inner join department_relation
		     on department_relation.department_id=#{departmentId} 
		     and department_relation.sub_department_id=u.department_id
		</if>
        WHERE u.status =0
        AND i.create_date BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW()
        GROUP BY DATE_FORMAT(i.create_date, '%Y%m%d')
    </select>

    <select id="getInvestMostUser" parameterType="int" resultMap="BaseResultMap">
        SELECT *
        FROM investment
        WHERE project_id = #{projectId}
        GROUP BY user_id
        ORDER BY sum(amount) DESC
        LIMIT 1
    </select>
    <select id="getInvestMostUserInActivity" parameterType="map" resultMap="BaseResultMap">
        SELECT
            ii.user_id,
            sum(ii.totalAmount) totalAmount,
            ii.t
        FROM (
                 SELECT
                     i.user_id,
                     i.amount totalAmount,
                     i.time   t
                 FROM investment i
                     LEFT JOIN project p ON p.id = i.project_id
                 WHERE p.parent_id IS NULL AND p.project_type = 0 AND p.limit_days &gt;= 30
                       AND i.project_id = #{projectId}
                       AND
                       date_format(i.time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d') AND date_format(
                               #{endTime}, '%Y-%m-%d')
                 ORDER BY i.time DESC) ii
        GROUP BY ii.user_id
        ORDER BY sum(ii.totalAmount) DESC, ii.t
        LIMIT 1;


    </select>

    <select id="getMaxInvestAmount" parameterType="int" resultType="double">
        SELECT sum(amount) maxAmount
        FROM investment
        WHERE project_id = #{projectId}
        GROUP BY user_id
        ORDER BY sum(amount) DESC
        LIMIT 1
    </select>
    <select id="selectTrueAmount" resultType="double">
        SELECT sum(i.amount)
        FROM investment i, user u
        WHERE i.user_id = u.id AND i.project_id = #{projectId} AND u.`status` != 3
    </select>

    <select id="getPaybackList" parameterType="map" resultType="map">
        SELECT
            iv.id,
            iv.user_id,
            iv.project_id,
            (i.interest_amount + i.capital_amount) amount,
            (i.interest_amount)                    interestAmount,
            i.capital_amount                       capitalAmount,
            i.date,
            i.has_dividended                       hasDividended
        FROM
            investment iv
            LEFT JOIN interest i ON iv.id = i.investment_id
        WHERE
            (iv.type = 0 OR iv.type = 2 OR iv.type = 4)
            AND iv.user_id = #{userId}
            AND i.date BETWEEN date_format(#{date}, '%Y-%m-01') AND last_day(#{date})
        ORDER BY i.date
    </select>


    <select id="getPaybackTotal" parameterType="map" resultType="map">
        SELECT
            cast(sum(i.interest_amount + i.capital_amount) AS CHAR)                              totalPayback,
            cast(sum(if(i.has_dividended = 0, i.interest_amount + i.capital_amount, 0)) AS CHAR) noPayback,
            cast(sum(if(i.has_dividended = 1, i.interest_amount + i.capital_amount, 0)) AS CHAR) payback,
            cast(sum(if(i.has_dividended = 0, i.interest_amount, 0)) AS CHAR)                    noInterestPayback,
            cast(sum(if(i.has_dividended = 1, i.interest_amount, 0)) AS CHAR)                    interestPayback,
            cast(sum(if(i.has_dividended = 0, i.capital_amount, 0)) AS CHAR)                     noCapitalPayback,
            cast(sum(if(i.has_dividended = 1, i.capital_amount, 0)) AS CHAR)                     capitalPayback
        FROM investment iv LEFT JOIN interest i ON iv.id = i.investment_id
        WHERE
            (iv.type = 0 OR iv.type = 2 OR iv.type = 4)
            AND iv.user_id = #{userId}
            AND i.date BETWEEN date_format(#{date}, '%Y-%m-01') AND last_day(#{date})
    </select>

    <select id="queryLatestPaymentInfo" parameterType="int" resultType="map">
        SELECT
            iv.id,
            iv.user_id,
            iv.project_id,
            (i.interest_amount + i.capital_amount) amount,
            i.interest_amount,
            i.capital_amount,
            i.date,
            i.has_dividended                       hasDividended
        FROM
            investment iv LEFT JOIN interest i ON iv.id = i.investment_id
        WHERE
            (iv.type = 0 OR iv.type = 2)
            AND iv.user_id = #{userId}
            AND i.date &gt;= curdate()
            AND i.has_dividended = 0
        ORDER BY i.date
        LIMIT 0, 1
    </select>

    <select id="queryRegularInvestmentOnActivityDay" parameterType="map" resultType="map">
        SELECT
            sum(c.amount) sumAmount,
            count(*)      count,
            c.user_id     userId,
            c.firstInvestmentDate
        FROM
            (
                SELECT
                    a.*,
                    b.time firstInvestmentDate
                FROM
                    investment a, (SELECT
                                       min(time) time,
                                       user_id
                                   FROM investment
                                   WHERE type = 0 AND time BETWEEN #{startTime} AND #{endTime}
                                   GROUP BY user_id) b
                WHERE
                    b.user_id = a.user_id AND a.type = 0
                    AND
                    date_format(b.time, '%Y-%m-%d') = date_sub(date_format(#{now}, '%Y-%m-%d'), INTERVAL #{days} DAY)
                    AND a.time &gt;= b.time AND
                    a.time &lt; date_add(date_format(b.time, '%Y-%m-%d'), INTERVAL #{days} DAY)
            ) c
        GROUP BY c.user_id
    </select>

    <select id="querySumRegularInvestmentOnActivityDay" parameterType="map" resultType="map">
        SELECT
            if(sum(i.amount) IS NULL, 0, sum(i.amount)) sumAmount,
            count(*)                                    count
        FROM
            investment i LEFT JOIN project p ON i.project_id = p.id
        WHERE
            i.type = 0 AND p.parent_id IS NULL AND i.time BETWEEN #{startTime} AND #{endTime} AND i.user_id = #{userId}
    </select>

    <select id="queryInvestmentRankOnActivity" parameterType="map" resultType="map">
        SELECT
        IF (sum(i.amount) IS NULL, 0, sum(i.amount)) sumAmount, date_format(max(i.time),'%Y-%m-%d %h:%m:%s')
        lastInvestmentTime,
        count(*) count, u.username
        FROM
        investment i left join user u on i.user_id=u.id left join project p on i.project_id=p.id
        WHERE
        i.type = #{type} and p.parent_id is null
        and i.time between #{startTime} and #{endTime}
        <if test="limitDays != null">
            and p.limit_days &gt;= #{limitDays}
        </if>
        group by i.user_id order by sumAmount desc, max(i.time) asc
        <if test="start != null">
            limit #{start}, #{limit}
        </if>
        <if test="start == null">
            limit 10
        </if>
    </select>

    <select id="queryUserRankOnActivity" parameterType="map" resultType="map">
        select c.* from(
        select
        a.sumAmount, a.id,
        a.lastInvestmentTime,
        a.count,
        @num:=@num+1 sort
        from
        (
        select
        if (sum(i.amount) is null, 0, sum(i.amount)) sumAmount, date_format(max(i.time),'%Y-%m-%d %h:%m:%s')
        lastInvestmentTime, u.id,
        count(*) count,concat(substring(u.phone, 1, 3),'****',substring(u.phone, 8, 4)) phone
        from
        investment i left join user u on i.user_id=u.id left join project p on i.project_id=p.id
        where
        i.type = #{type} and p.parent_id is null
        and i.time between #{startTime} and #{endTime}
        <if test="limitDays != null">
            and p.limit_days &gt;= #{limitDays}
        </if>
        group by i.user_id order by sumAmount desc, max(i.time) asc
        ) a, (select @num:=0 ) b
        ) c where c.id=#{userId}
    </select>

    <select id="queryUserSumInvestment" parameterType="map" resultType="map">
        SELECT
            sum(if(i.amount IS NOT NULL, i.amount, 0))                           sumAmount,
            sum(if(i.amount IS NOT NULL AND p.limit_days = 30, i.amount, 0))     _30Amount,
            sum(if(i.amount IS NOT NULL AND p.limit_days &gt;= 90, i.amount, 0)) _90Amount
        FROM
            investment i LEFT JOIN user u ON i.user_id = u.id
            LEFT JOIN project p ON i.project_id = p.id
        WHERE
            i.type = #{type} AND p.parent_id IS NULL AND u.id = #{userId}
            AND i.time BETWEEN #{startTime} AND #{endTime}
    </select>


    <select id="isFlagUserInvestment" parameterType="Map" resultType="int">
        SELECT count(1)
        FROM investment i INNER JOIN `user` u ON i.user_id = u.id
        WHERE u.register_time BETWEEN #{startDate} AND #{endStartDate} AND i.amount &gt;= 2000 AND user_id = #{userId}
    </select>


    <select id="queryFirstInvestmentAndHongbao" parameterType="map" resultMap="BaseResultMap">
        SELECT *
        FROM investment ist
        WHERE ist.user_id = #{userId} AND (ist.type = 0 OR ist.type = 2)
        ORDER BY time
        LIMIT 1
    </select>

    <select id="selectAppleInvestmentUser" parameterType="map" resultType="map">
        select u.phone,i.amount name from investment i
        left join user u on i.user_id=u.id
        left join project p on p.id=i.project_id
        where p.parent_id is null
        <if test="limitDays != null">
            and p.limit_days =#{limitDays}
        </if>
        and i.type=0 and p.noob=0 and u.status=0 and
        u.phone!='' and u.phone is not null
        <if test="startTime != null and endTime != null">
            and date_format(i.time,'%Y-%m-%d') between date_format(#{startTime},'%Y-%m-%d') and
            date_format(#{endTime},'%Y-%m-%d')
        </if>
        order by i.id desc limit 0,#{limit}
    </select>

    <select id="selectHuoProjectInvestment" parameterType="int" resultType="map">
        SELECT
            i.amount,
            i.time,
            p.id,
            p.title,
            p.annualized,
            p.create_time,
            p.item_number
        FROM investment i
            LEFT JOIN project p ON i.project_id = p.id
        WHERE i.id = #{investID} AND i.user_id = #{userId}
    </select>

    <select id="selectActivityAndTime" parameterType="map" resultType="double">
        select (IFNULL(sum(i.amount),0)-(select IFNULL(sum(lg.amount),0) from lottery_record lr
        left join lottery_gift lg on lr.gift_id=lg.id
        where lr.activity_id=#{activityId} and lr.user_id = #{userId})) totalIntegral from investment i
        left join project p on i.project_id=p.id
        where i.type = 0
        AND p.project_type = 0
        AND p.noob = 0
        and i.user_id = #{userId}
        <if test="startTime != null and endTime != null">
            AND date_format(i.time, '%Y-%m-%d') BETWEEN date_format(
            #{startTime},
            '%Y-%m-%d'
            )
            AND date_format(
            #{endTime},
            '%Y-%m-%d'
            )
        </if>
    </select>
    <!-- 根据活动查询用户在活动期间的所有年化投资额 也就是积分-->
    <select id="selectActivityYearAmount" parameterType="map" resultType="double">
        SELECT
        (
        IFNULL(SUM((amount * limit_days) / 365), 0) -
        (SELECT
        IFNULL(SUM(lg.amount), 0)
        FROM
        lottery_record lr
        LEFT JOIN lottery_gift lg
        ON lr.gift_id = lg.id
        WHERE lr.activity_id = #{activityId}
        AND lr.user_id = #{userId})
        ) totalIntegral
        FROM(
        SELECT
        p.project_type,
        i.product_id,
        i.user_id,
        i.amount,
        i.time,
        CASE
        WHEN i.product_id IS NOT NULL
        THEN pt.out_days
        ELSE p.limit_days
        END AS limit_days
        FROM
        investment i
        LEFT JOIN project p
        ON p.id = i.project_id
        LEFT JOIN product pt
        ON pt.id = i.product_id
        WHERE i.user_id =#{userId}
        <if test="startTime != null and endTime != null">
            AND date_format(i.time, '%Y-%m-%d') BETWEEN date_format(
            #{startTime},
            '%Y-%m-%d'
            )
            AND date_format(
            #{endTime},
            '%Y-%m-%d'
            )
        </if>
        AND CASE WHEN i.product_id IS NULL THEN p.project_type =0
        ELSE i.product_id IS NOT NULL END
        ) a WHERE limit_days &gt;= 15
    </select>
    <select id="queryInvestmentActivity" parameterType="map" resultType="map">

        SELECT
            (@rowNO := @rowNo + 1) AS ranking,
            b.*
        FROM (
                 SELECT a.*
                 FROM (

                          SELECT
                              i.user_id,
                              sum(i.totalAmount) totalAmount,
                              i.t,
                              i.terminal
                          FROM (
                                   SELECT
                                       i.user_id,
                                       i.amount totalAmount,
                                       i.time   t,
                                       i.terminal
                                   FROM investment i
                                       LEFT JOIN project p ON p.id = i.project_id
                                   WHERE p.parent_id IS NULL AND p.project_type = 0 AND p.limit_days &gt;= 30
                                         AND date_format(i.time, '%Y-%m-%d') =
                                             date_format(date_add(CURRENT_DATE(), INTERVAL -1 DAY), '%Y-%m-%d')

                                   ORDER BY i.time DESC) i
                          GROUP BY i.user_id
                          ORDER BY i.t DESC
                      ) a

                     LEFT JOIN user u ON u.id = a.user_id
                 ORDER BY a.totalAmount DESC) b, (SELECT @rowNO := 0) c
        ORDER BY b.totalAmount DESC, b.t
        LIMIT 3
    </select>


    <select id="isFirstInActivity" parameterType="map" resultType="map">

        select i.id from investment i
        left join project p on p.id=i.project_id
        where p.parent_id is null and p.project_type=0
        <if test="limitDays != null">
            and p.limit_days &gt;= #{limitDays}
        </if>
        and date_format(i.time,'%Y-%m-%d') between date_format(#{startTime},'%Y-%m-%d') and
        date_format(#{endTime},'%Y-%m-%d')
        and i.user_id = #{userId}
    </select>

    <select id="findFirstInvestment" parameterType="map" resultType="map">
        SELECT
            i.*,
            p.limit_days
        FROM investment i LEFT JOIN project p
                ON p.id = i.project_id
        WHERE i.user_id = #{userId}
        ORDER BY i.time
        LIMIT 1
    </select>


    <select id="findSumInvestment" parameterType="map" resultType="double">
        SELECT sum(i.amount) totalAmount
        FROM investment i
            LEFT JOIN project p ON p.id = i.project_id
        WHERE p.parent_id IS NULL AND p.project_type = 0 AND p.limit_days &gt;= 7
              AND i.user_id = #{userId}
    </select>

    <select id="queryFirstInvestmentAndType" parameterType="map" resultType="map">
        SELECT
            inv.id,
            inv.time,
            inv.user_id,
            inv.amount,
            p.limit_days,
            p.project_type,
            p.noob,
            p.parent_id
        FROM investment inv LEFT JOIN project p ON inv.project_id = p.id
        WHERE p.project_type NOT IN (3, 4) AND inv.user_id = #{userId}
        ORDER BY inv.time
        LIMIT 1
    </select>

    <select id="selectCurrentAgreement" parameterType="int" resultType="map">
        SELECT
            i.amount,
            c.parent_amount,
            IFNULL(b.title, e.title)           title,
            IFNULL(b.annualized, e.annualized) annualized,
            IFNULL(b.limit_days, e.limit_days) limit_days,
            IFNULL(u.true_name, '季元军')         true_name,
            IFNULL(
                    u.identity_card,
                    '342422198212092872'
            )                                  identity_card,
            i.time
        FROM
            investment i
            LEFT JOIN current_investment c ON i.id = c.investment_id
            LEFT JOIN project_link_project l ON c.project_link_id = l.id
            LEFT JOIN project e ON i.project_id = e.id
            LEFT JOIN project p ON l.parent_id = p.id
            LEFT JOIN project b ON p.parent_id = b.id
            LEFT JOIN user u ON p.user_id = u.id
        WHERE
            i.type = 1 AND c.parent_amount &gt; 0
            AND i.id = #{investmentId}
    </select>

    <select id="selectInvestmentCountAndAmount" parameterType="int" resultType="map">
        SELECT
            count(DISTINCT (i.project_id)) counts,
            sum(i.amount)                  totalAmount
        FROM investment i
        WHERE i.user_id = #{userId}
    </select>


    <select id="getYestodayDetail" parameterType="map" resultType="map">
        SELECT
            sum(tr.amount)  total_amount,
            sum(CASE WHEN inv.type = 1
                THEN inv.amount
                ELSE 0 END) huoqi_no,
            sum(CASE WHEN limit_days = 15 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_15_no,
            sum(CASE WHEN limit_days = 30 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_30_no,
            sum(CASE WHEN limit_days = 60 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_60_no,
            sum(CASE WHEN limit_days = 90 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_90_no,
            sum(CASE WHEN limit_days = 120 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_120_no,
            sum(CASE WHEN limit_days = 150 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_150_no,
            sum(CASE WHEN limit_days = 180 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_180_no,
            sum(CASE WHEN limit_days = 210 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_210_no,
            sum(CASE WHEN limit_days = 240 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_240_no,
            sum(CASE WHEN limit_days = 270 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_270_no,
            sum(CASE WHEN limit_days = 300 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_300_no,
            sum(CASE WHEN limit_days = 330 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_330_no,
            sum(CASE WHEN limit_days = 360 and tr.type = 0 THEN tr.amount ELSE 0 END) amount_360_no,
			sum(CASE WHEN limit_days = 15 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_15_no,
            sum(CASE WHEN limit_days = 30 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_30_no,
            sum(CASE WHEN limit_days = 60 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_60_no,
            sum(CASE WHEN limit_days = 90 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_90_no,
            sum(CASE WHEN limit_days = 120 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_120_no,
            sum(CASE WHEN limit_days = 150 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_150_no,
            sum(CASE WHEN limit_days = 180 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_180_no,
            sum(CASE WHEN limit_days = 210 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_210_no,
            sum(CASE WHEN limit_days = 240 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_240_no,
            sum(CASE WHEN limit_days = 270 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_270_no,
            sum(CASE WHEN limit_days = 300 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_300_no,
            sum(CASE WHEN limit_days = 330 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_330_no,
            sum(CASE WHEN limit_days = 360 and tr.type = 10 THEN tr.amount ELSE 0 END) hzd_amount_360_no
        FROM (SELECT *
              FROM trade_record tr
              WHERE
                  date_format(tr.time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d') AND table_name = 'investment' AND
                  tr.type IN (0, 10) AND tr.source != 3) tr LEFT JOIN user u ON u.id = tr.user_id
            LEFT JOIN investment inv ON inv.id = tr.other_id
            LEFT JOIN project p ON p.id = inv.project_id
        WHERE u.status = 0
    </select>

    <select id="getYestodayDetail2" parameterType="map" resultType="map">
        SELECT
            (SELECT count(*)
             FROM user
             WHERE date_format(register_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d')) regist_num,
            (SELECT count(*)
             FROM user
             WHERE date_format(register_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d') AND
                   identity_card IS NOT NULL)                                                 real_num,
            (SELECT count(*)
             FROM user_operation_record uor LEFT JOIN user u ON uor.user_id = u.id
             WHERE date_format(register_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d') AND uor.`status` = 1 AND
                   uor.type = 0 AND u.status = 0 AND
                   date_format(create_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d'))   bindcard_num,
            (select count(DISTINCT (a.user_id)) from investment a join project b on a.project_id=b.id where a.user_id in (
					select m.id from `user` m left join user_invite c on c.invite_user_id=m.id where date_format(m.register_time, '%Y-%m-%d')=date_format(#{date}, '%Y-%m-%d') and m.status=0 and c.id is null
				) and date_format(a.time, '%Y-%m-%d')=date_format(#{date}, '%Y-%m-%d')
            )                                                                                 invest_num,
            (SELECT 0 + IFNULL(rc_amount, 0) - IFNULL(wi_amount, 0)
             FROM
                 (SELECT sum(amount) rc_amount
                  FROM recharge rc LEFT JOIN user u ON u.id = rc.user_id
                  WHERE rc.status = 0 AND u.status = 0 AND
                        date_format(rc.time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d'))
                 rc, (SELECT sum(amount) wi_amount
                      FROM withdraw rc LEFT JOIN user u ON u.id = rc.user_id
                      WHERE rc.status in (0,1,4) AND u.status = 0 AND u.user_type='normal' AND
                            date_format(rc.create_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d')) wt
            )                                                                                 day_remain,
            (SELECT sum(amount)
             FROM recharge rc LEFT JOIN user u ON u.id = rc.user_id
             WHERE
                 rc.status = 0 AND u.status = 0 AND date_format(rc.time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d')
            )                                                                                 day_recharge,
            (SELECT sum(amount)
             FROM withdraw rc LEFT JOIN user u ON u.id = rc.user_id
             WHERE rc.status in (0,1,4) AND u.status = 0 AND
                   date_format(rc.create_time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d') and u.user_type='normal'
            )                                                                                day_withdraw
    </select>


    <select id="getYestodayDetail3" parameterType="map" resultType="map">
    select ifnull(j.amount_0,0) amount_0,ifnull(j.amount_15,0) amount_15,ifnull(j.amount_30,0) amount_30,ifnull(j.amount_90,0) amount_90,ifnull(j.amount_180,0) amount_180,ifnull(j.amount_360,0) amount_360 from (
				select
				sum(CASE WHEN b.limit_days = 0 THEN a.amount ELSE 0 END) amount_0,
				sum(CASE WHEN b.limit_days = 15 THEN a.amount ELSE 0 END) amount_15,
				sum(CASE WHEN b.limit_days = 30 THEN a.amount ELSE 0 END) amount_30,
				sum(CASE WHEN b.limit_days = 90 THEN a.amount ELSE 0 END) amount_90,
				sum(CASE WHEN b.limit_days = 180 THEN a.amount ELSE 0 END) amount_180,
				sum(CASE WHEN b.limit_days = 360 THEN a.amount ELSE 0 END) amount_360
				from investment a join project b on a.project_id=b.id where a.user_id in (
				select m.id from `user` m left join user_invite c on c.invite_user_id=m.id where date_format(m.register_time, '%Y-%m-%d')=date_format(#{date}, '%Y-%m-%d') and m.status=0 and c.id is null
				) and date_format(a.time, '%Y-%m-%d')=date_format(#{date}, '%Y-%m-%d')
		) j
    </select>


    <select id="getYestodayDetail4" parameterType="map" resultType="map">
        SELECT (IFNULL(rc_amount, 0) - IFNULL(wi_amount, 0)) month_remain
        FROM
            (SELECT sum(amount) rc_amount
             FROM recharge rc LEFT JOIN user u ON u.id = rc.user_id
             WHERE rc.status = 0 AND u.status = 0 AND date_format(rc.time, '%Y-%m') = date_format(#{date}, '%Y-%m'))
            rc, (SELECT sum(amount) wi_amount
                 FROM withdraw rc LEFT JOIN user u ON u.id = rc.user_id
                 WHERE rc.status in (0,1,4) AND u.status = 0 AND u.user_type='normal' AND
                       date_format(rc.create_time, '%Y-%m') = date_format(#{date}, '%Y-%m')) wt
    </select>

    <select id="getYestodayDetail5" parameterType="map" resultType="map">
    	select
    	ifnull(sum(CASE WHEN m.limit_days = 7 THEN m.amount ELSE 0 END),0) yyy_amount_7_no,
		ifnull(sum(CASE WHEN m.limit_days = 30 THEN m.amount ELSE 0 END),0) yyy_amount_30_no,
		ifnull(sum(CASE WHEN m.limit_days = 90 THEN m.amount ELSE 0 END),0) yyy_amount_90_no,
		ifnull(sum(CASE WHEN m.limit_days = 180 THEN m.amount ELSE 0 END),0) yyy_amount_180_no
		from (
		select b.limit_days,a.amount amount from investment a join monthly_gain_project_package b on a.package_id=b.id where a.type in (7, 8) and date_format(a.time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d')
		) m
    </select>

    <select id="getYestodayDetail6" parameterType="map" resultType="map">
    	select
    	ifnull(sum(CASE WHEN m.limit_days = 7 THEN m.amount ELSE 0 END),0) yyy_amount_7,
		ifnull(sum(CASE WHEN m.limit_days = 30 THEN m.amount ELSE 0 END),0) yyy_amount_30,
		ifnull(sum(CASE WHEN m.limit_days = 90 THEN m.amount ELSE 0 END),0) yyy_amount_90,
		ifnull(sum(CASE WHEN m.limit_days = 180 THEN m.amount ELSE 0 END),0) yyy_amount_180
		from (
		select b.limit_days,a.amount amount from investment a join monthly_gain_project_package b on a.package_id=b.id
		where a.type in (7, 8) and date_format(a.time, '%Y-%m-%d') = date_format(#{date}, '%Y-%m-%d') and a.id in (
		select m.id from `user` m left join user_invite c on c.invite_user_id=m.id where date_format(m.register_time, '%Y-%m-%d')=date_format(#{date}, '%Y-%m-%d') and m.status=0 and c.id is null
		)
		) m
    </select>


    <select id="queryByProjectId" parameterType="map" resultType="map">
        SELECT
            inv.*,
            u.username,
            u.phone,
            u.true_name,
            u.id,
            u.register_time
        FROM project p RIGHT JOIN investment inv ON inv.project_id = p.id
            LEFT JOIN user u ON u.id = inv.user_id
        WHERE p.parent_id IS NOT NULL
              AND p.id = #{projectId}
    </select>

    <select id="getNeedInterestPackageInvest" resultMap="BaseResultMap">
        SELECT *
        FROM investment
        WHERE product_id IS NOT NULL AND type IN (5)
              AND interest_usable_amount &gt; 0 AND to_days(now()) &gt; to_days(time) + 1 AND parent_id IS NULL
    </select>

    <select id="getNeedInterestPackageInvestAmount" parameterType="map" resultType="double">
        SELECT sum(inv.interest_usable_amount) sumAmount
        FROM investment inv
        WHERE inv.parent_id = #{investmentId} AND to_days(now()) &gt; to_days(time) + 1
    </select>


    <select id="selectByuserIdAndProductStatusList" parameterType="map" resultType="map">
        select p.name,i.amount,p.annualized_min,i.time ,i.success_out_time outTime,ifnull(sum(t.amount),0)
        income,i.id,p.out_days outDays,
        (case when i.status=0 and CURRENT_DATE()&gt;DATE_FORMAT(DATE_ADD(i.time,INTERVAL p.out_days day),'%Y-%m-%d')
        then 3
        when i.status=0 and CURRENT_DATE()&lt;DATE_FORMAT(DATE_ADD(i.time,INTERVAL p.out_days day),'%Y-%m-%d') then 0
        else i.status end ) status
        from investment i
        left join product p on i.product_id=p.id
        left join interest_product t on t.investment_id=i.id
        where i.type=5
        <if test="status ==1 ">
            and i.status=2
        </if>
        <if test="status !=1 ">
            and i.status!=2
        </if>
        <if test="userId !=null ">
            and i.user_id=#{userId}
        </if>
        group by i.id order by
        (case when i.status=0 and CURRENT_DATE()&gt;DATE_FORMAT(DATE_ADD(i.time,INTERVAL p.out_days day),'%Y-%m-%d')
        then 3
        when i.status=0 and CURRENT_DATE()&lt;DATE_FORMAT(DATE_ADD(i.time,INTERVAL p.out_days day),'%Y-%m-%d') then 2
        when i.status=1 then 1
        else 10 end ),
        <if test="status ==1 ">
            i.success_out_time desc ,p.out_days desc,
        </if>
        i.apply_out_time desc ,i.time desc
        <if test="start != null and limit != null">
            limit #{start}, #{limit}
        </if>
    </select>


    <select id="selectByuserIdAndProductStatusCount" parameterType="map" resultType="int">
        select count(*) from (
        select i.id
        from investment i
        left join product p on i.product_id=p.id
        left join interest_product t on t.investment_id=i.id
        where i.type=5
        <if test="status ==1 ">
            and i.status=2
        </if>
        <if test="status !=1 ">
            and i.status!=2
        </if>
        <if test="userId !=null ">
            and i.user_id=#{userId}
        </if>
        group by i.id
        ) s
    </select>

    <select id="selectInvestmentIdByProductDetail" parameterType="map" resultType="map">
        SELECT
            p.id                                          productId,
            p.name,
            i.amount,
            p.annualized_min,
            i.time,
            ifnull(sum(t.amount), 0)                      income,
            i.id,
            p.out_days,
            DATE_ADD(i.time, INTERVAL 1 DAY)              calculateDays,
            DATE_ADD(i.time, INTERVAL p.out_days + 1 DAY) unlockDays,
            if(h.type = 1, h.amount, 0)                   xhongbao,
            if(h.type = 2, h.amount, 0)                   thongbao,
            (CASE WHEN i.status = 0 AND
                       CURRENT_DATE() &gt;= DATE_FORMAT(DATE_ADD(i.time, INTERVAL p.out_days + 1 DAY), '%Y-%m-%d')
                THEN 3
             WHEN i.status = 0 AND
                  CURRENT_DATE() &lt; DATE_FORMAT(DATE_ADD(i.time, INTERVAL p.out_days + 1 DAY), '%Y-%m-%d')
                 THEN 0
             ELSE i.status END)                           status,
            i.apply_out_time                              appleOutTime,
            i.success_out_time                            successOutTime,
            IFNULL(r.rate, 0)                             rateCoupon,
            IFNULL(r.income, 0)                           rateCouponInterest
        FROM
            investment i
            LEFT JOIN product p ON i.product_id = p.id
            LEFT JOIN interest_product t ON t.investment_id = i.id
            LEFT JOIN hongbao h ON i.hongbao_id = h.id
            LEFT JOIN rate_coupon r ON i.coupon_id = r.id
        WHERE i.type = 5 AND i.id = #{investmentId} AND i.user_id = #{userId}
    </select>


    <update id="updateByPrimaryKeySelectiveAndVersion" parameterType="com.goochou.p2b.model.Investment">

        update investment
        <set>
            version = version + 1,
            <if test="orderNo != null">
		       order_no = #{orderNo,jdbcType=VARCHAR},
		     </if>
		     <if test="type != null">
		       type = #{type,jdbcType=INTEGER},
		     </if>
		     <if test="productId != null">
		       product_id = #{productId,jdbcType=INTEGER},
		     </if>
		     <if test="userId != null">
		       user_id = #{userId,jdbcType=INTEGER},
		     </if>
		     <if test="projectId != null">
		       project_id = #{projectId,jdbcType=INTEGER},
		     </if>
		     <if test="amount != null">
		       amount = #{amount,jdbcType=DOUBLE},
		     </if>
		     <if test="interestAmount != null">
		       interest_amount = #{interestAmount,jdbcType=DOUBLE},
		     </if>
		     <if test="balancePayMoney != null">
		       balance_pay_money = #{balancePayMoney,jdbcType=DECIMAL},
		     </if>
		     <if test="rateCouponId != null">
		       rate_coupon_id = #{rateCouponId,jdbcType=INTEGER},
		     </if>
		     <if test="hongbaoId != null">
		       hongbao_id = #{hongbaoId,jdbcType=INTEGER},
		     </if>
		     <if test="hongbaoMoney != null">
		       hongbao_money = #{hongbaoMoney,jdbcType=DECIMAL},
		     </if>
		     <if test="remainAmount != null">
		       remain_amount = #{remainAmount,jdbcType=DECIMAL},
		     </if>
		     <if test="client != null">
		       client = #{client,jdbcType=VARCHAR},
		     </if>
		     <if test="payStatus != null">
		       pay_status = #{payStatus,jdbcType=INTEGER},
		     </if>
		     <if test="orderStatus != null">
		       order_status = #{orderStatus,jdbcType=INTEGER},
		     </if>
		     <if test="addInterest != null">
		       add_interest = #{addInterest,jdbcType=DOUBLE},
		     </if>
		     <if test="version != null">
		       version = #{version,jdbcType=INTEGER},
		     </if>
		     <if test="createDate != null">
		       create_date = #{createDate,jdbcType=TIMESTAMP},
		     </if>
		     <if test="updateDate != null">
		       update_date = #{updateDate,jdbcType=TIMESTAMP},
		     </if>
        </set>
        where id = #{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
    </update>

    <select id="queryNew" parameterType="map" resultType="map">
        select a.*,hb.amount hb_amount,wx.code from (
        select i.*,u.username,u.true_name trueName,u.id uId ,u.register_time ,pt.out_days from investment i,user
        u,product pt where
        i.user_id=u.id and pt.id = i.product_id and u.status=0
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount &gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>

        <if test="source != null">
            and i.terminal= #{source}
        </if>
        <if test="type != null">
            and i.type= #{type}
        </if>
        <if test="type == null">
            and (i.type = 5 or i.type = 6)
        </if>
        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>
        ) a
        LEFT JOIN hongbao hb on a.hongbao_id= hb.id
        LEFT JOIN wx_activity wx on wx.user_id = a.user_id
        <if test="codes != null">
            where code=#{codes}
        </if>
        order by a.time desc
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="queryCountNew" parameterType="map" resultType="int">
        select count(*) from (
        select i.*,u.username,u.true_name trueName from investment i,user u where
        i.user_id=u.id and u.status=0
        <if test="keyword != null">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="seq != null">
            <if test="seq == 0">
                and i.amount&gt;0 and i.amount &lt;=1000
            </if>
            <if test="seq == 1">
                and i.amount&gt;1000 and i.amount &lt;=2000
            </if>
            <if test="seq == 2">
                and i.amount&gt;2000 and i.amount &lt;=5000
            </if>
            <if test="seq == 3">
                and i.amount&gt;5000 and i.amount &lt;=10000
            </if>
            <if test="seq == 4">
                and i.amount &gt; 10000
            </if>
        </if>

        <if test="source != null">
            and i.terminal= #{source}
        </if>
        <if test="type != null">
            and i.type= #{type}
        </if>
        <if test="type == null">
            and (i.type = 5 or i.type = 6)
        </if>
        <if test="startTime != null">
            and i.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and i.time &lt; #{endTime}
        </if>
        ) a
        LEFT JOIN hongbao hb on a.hongbao_id= hb.id
        LEFT JOIN wx_activity wx on wx.user_id = a.user_id
        <if test="codes != null">
            where code=#{codes}
        </if>
    </select>

    <select id="queryNewDetail" parameterType="map" resultType="map">
        SELECT
            a.*,
            pp.title      title2,
            pp.annualized annualized1,
            pp.limit_days limit_days1
        FROM (
                 SELECT
                     idl.*,
                     u.username,
                     u.true_name trueName,
                     p.title,
                     p.parent_id parent_id1,
                     pp1.title   title3,
                     p.project_type,
                     p.annualized,
                     p.limit_days
                 FROM investment i RIGHT JOIN investment_detail idl ON idl.investment_id = i.id
                     LEFT JOIN project p ON p.id = idl.project_id
                     LEFT JOIN user u ON u.id = i.user_id
                     LEFT JOIN project_package pp1 ON pp1.id = idl.package_id
                 WHERE i.id = #{id}
             ) a LEFT JOIN project pp ON a.parent_id1 = pp.id
        ORDER BY a.time DESC
    </select>

    <select id="queryCountNewDetail" parameterType="map" resultType="int">
        SELECT count(*)
        FROM (
                 SELECT
                     i.*,
                     u.username,
                     u.true_name trueName,
                     p.title,
                     p.parent_id parent_id1
                 FROM investment i RIGHT JOIN investment_detail idl ON idl.investment_id = i.id
                     LEFT JOIN project p ON p.id = i.project_id
                     LEFT JOIN user u ON u.id = i.user_id
                 WHERE i.id = #{id}
             ) a LEFT JOIN project pp ON a.parent_id1 = pp.id
        ORDER BY a.time DESC
    </select>
    <select id="getNeedInterest" parameterType="map" resultType="map">
        SELECT
            inv.id,
            inv.user_id,
            inv.interest_usable_amount amount,
            inv.product_id             productId,
            pt.annualized_min          rate
        FROM investment inv LEFT JOIN product pt ON inv.product_id = pt.id
        WHERE interest_usable_amount &gt; 0 AND type IN (5, 6) AND pt.id IS NOT NULL

    </select>


    <resultMap extends="BaseResultMap" id="r" type="com.goochou.p2b.model.Investment">
        <association column="project_id" property="project" select="com.goochou.p2b.dao.ProjectMapper.selectByPrimaryKey" />
        <association column="product_id" property="product" select="com.goochou.p2b.dao.ProductMapper.selectByPrimaryKey" />
    </resultMap>

    <select id="assestList" parameterType="map" resultType="map">
        SELECT a.*,@rank:=@rank+1 as rownum FROM (
        select u.id user_id,sum(amount ) amount,sum(case when inv.type in(0,2,4,5) then amount else 0 end )dingqi
        ,sum(case when inv.type=1 then amount else 0 end ) huoqi,u.true_name,u.username,u.phone,u.register_time from
        investment inv left join user u on u.id = inv.user_id
        where u.status = 0
        <if test="startTime == null and endTime == null">
            and date_format(inv.time,'%Y-%m-%d') = date_format(DATE_ADD(now(),INTERVAL -1 DAY),'%Y-%m-%d')
        </if>
        <if test="startTime != null">
            and inv.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and inv.time &lt; #{endTime}
        </if>
        group by inv.user_id order by
        <if test="type == null">
            sum( amount) desc ,
        </if>
        <if test="type == 1">
            sum(case when inv.type=1 then amount else 0 end ) desc ,
        </if>
        <if test="type == 2">
            sum(case when inv.type in(0,2,4,5) then amount else 0 end ) desc ,
        </if>
        u.register_time

        <if test="start !=null and limit != null">
            limit #{start},#{limit}
        </if>
        ) a,(SELECT @rank:=0) b

    </select>

    <select id="assestListCount" parameterType="map" resultType="int">
        select count(*) from (
        select u.id from investment inv left join user u on u.id = inv.user_id
        where u.status = 0
        <if test="startTime == null and endTime == null">
            and date_format(inv.time,'%Y-%m-%d') = date_format(DATE_ADD(now(),INTERVAL -1 DAY),'%Y-%m-%d')
        </if>
        <if test="startTime != null">
            and inv.time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            and inv.time &lt; #{endTime}
        </if>
        group by inv.user_id
        ) s

    </select>
    <select id="getTotaalAmount" parameterType="map" resultType="double">
        SELECT sum(amount)
        FROM investment
        WHERE user_id = #{userId} AND type IN (0, 1, 2, 4, 5)
    </select>


    <select id="getTotalInvestOfBondList" parameterType="map" resultType="map">
        SELECT
            b.title,
            b.id projectId,
            i.amount
        FROM investment i
            LEFT JOIN project p ON i.project_id = p.id
            LEFT JOIN project b ON p.parent_id = b.id
        WHERE i.user_id = #{userId}
              AND i.product_id IS NULL AND p.parent_id IS NOT NULL AND p.project_type = 1
        ORDER BY i.id DESC
        LIMIT #{limit}
    </select>
    <select id="getTotalInvestOfProjectList" parameterType="map" resultType="map">
        SELECT
            p.title,
            p.id projectId,
            i.amount
        FROM investment i
            LEFT JOIN project p ON i.project_id = p.id
        WHERE i.user_id = #{userId}
              AND p.parent_id IS NULL AND i.product_id IS NULL AND p.project_type = 0
        ORDER BY i.id DESC
        LIMIT #{limit}
    </select>
    <!--七夕活动加息-->
    <select id="getActivityAddInterest" parameterType="map" resultType="map">
        SELECT
            a.*,
            days * amount * annualized / 365 AS activityInterest
        FROM (
                 SELECT
                     i.id,
                     i.user_id userId,
                     p.annualized,
                     CASE p.limit_days
                     WHEN 30
                         THEN 3
                     WHEN 90
                         THEN 7
                     WHEN 180
                         THEN 15
                     WHEN 270
                         THEN 21
                     WHEN 360
                         THEN 30
                     ELSE 0
                     END AS    days,
                     i.amount
                 FROM investment i LEFT JOIN project p ON i.project_id = p.id
                 WHERE DATE_FORMAT(i.time, '%Y-%m-%d')
                       BETWEEN DATE_FORMAT(#{startTime}, '%Y-%m-%d') AND DATE_FORMAT(#{endTime}, '%Y-%m-%d')
                       AND i.type = 0 AND p.project_type = 0 AND noob != 1 AND p.limit_days &gt;= 30
                 ORDER BY i.id DESC
             ) AS a
        WHERE days != 0
    </select>
    <!--国庆活动-->
    <select id="getActivityAddInterestOctober" parameterType="map" resultType="map">
        SELECT
            p.id,
            i.amount,
            i.amount * p.annualized * p.limit_days * 0.1 / 365 AS activityInterest,
            i.`user_id`                                        AS userId,
            i.time
        FROM investment i LEFT JOIN project p ON i.`project_id` = p.`id`
        WHERE p.`id` IS NOT NULL AND i.type = 0 AND p.project_type = 0 AND p.noob != 1 AND p.limit_days &gt;= 30
              AND DATE_FORMAT(p.create_time, '%Y-%m-%d')
              BETWEEN DATE_FORMAT(#{startTime}, '%Y-%m-%d') AND DATE_FORMAT(#{endTime}, '%Y-%m-%d')
        GROUP BY p.id
    </select>

    <select id="checkIfFirstInvest" parameterType="map" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM
        investment i
        WHERE 1=1
        <if test="userId != null">
            and user_id = #{userId,jdbcType=INTEGER}
        </if>
        <if test="type != null">
            and type = #{type,jdbcType=INTEGER}
        </if>
        <if test="noob != null">
            and (select count(1) from project p where i.project_id = p.id and noob = #{noob,jdbcType=INTEGER} ) &gt; 0
        </if>

    </select>

    <select id="queryAnXinZhuanOfflineData" parameterType="map" resultType="com.goochou.p2b.model.vo.AnXinZhuanOfflineDataVO">
    	SELECT
			a.id investmentId,
			b.id userId,
			b.username userName,
			b.true_name trueName,
			a.amount amount,
			a.time time,
			datediff('2017-11-08 00:00:00', DATE_FORMAT(a.time,'%Y%m%d')) day,
			(datediff('2017-11-08 00:00:00', DATE_FORMAT(a.time,'%Y%m%d'))/365)*c.annualized_min*a.amount money,
			c.`annualized_min`
		FROM
			(
				SELECT
					id,
					user_id,
					amount,
					time,
					product_id
				FROM
					investment
				WHERE
					1 = 1
				AND type = #{type}
				AND `status` IN (0, 1)
			) a
		JOIN `user` b ON a.user_id = b.id
		join product c on a.product_id=c.id;
    </select>

    <update id="updateBatchInvestmentInfoForAnXinZhuan" parameterType="map">
		update
			investment
		set
			`status`=2, success_out_time=now(),remain_amount=0, interest_usable_amount=0, out_interest_amount = #{interestAmount}
		where
			id=#{investmentId};
    </update>

    <select id="getHorseList" resultType="map">
        SELECT CONCAT(CASE
		LEFT(b.identity_card, 2) WHEN 11 THEN '北京' WHEN 12 THEN '天津' WHEN 13 THEN '河北' WHEN 14 THEN '山西' WHEN 15 THEN '内蒙古' WHEN 21 THEN '辽宁' WHEN 22 THEN '吉林' WHEN 23 THEN '黑龙江' WHEN 31 THEN '上海' WHEN 32 THEN '江苏' WHEN 33 THEN '浙江' WHEN 34 THEN '安徽' WHEN 35 THEN '福建' WHEN 36 THEN '江西' WHEN 37 THEN
		'山东' WHEN 41 THEN '河南' WHEN 42 THEN '湖北' WHEN 43 THEN '湖南' WHEN 44 THEN '广东' WHEN 45 THEN '广西' WHEN 46 THEN '海南' WHEN 50 THEN '重庆' WHEN 51 THEN '四川' WHEN 52 THEN '贵州' WHEN 53 THEN '云南' WHEN 54 THEN '西藏' WHEN 61 THEN '陕西' WHEN 62 THEN '甘肃' WHEN 63 THEN '青海' WHEN 64 THEN '宁夏' WHEN 65 THEN '新疆'
		WHEN 71 THEN '台湾' WHEN 81 THEN '香港' WHEN 82 THEN '澳门' END,
		SUBSTRING(b.true_name, 1, 1),'**',',花费',"&lt;font color='#ff3214'>",FORMAT(a.amount,0),'&lt;/font>元','领养',c.`name`) horseString
		from investment a left join `user` b on a.user_id=b.id 
		LEFT JOIN product c on a.product_id=c.id 
		ORDER BY a.id desc limit 20
    </select>

    <select id="getInvestmentHorseList" parameterType="map" resultType="map">
        SELECT CONCAT(CASE
        LEFT(identity_card, 2) WHEN 11 THEN '北京' WHEN 12 THEN '天津' WHEN 13 THEN '河北' WHEN 14 THEN '山西' WHEN 15 THEN '内蒙古' WHEN 21 THEN '辽宁' WHEN 22 THEN '吉林' WHEN 23 THEN '黑龙江' WHEN 31 THEN '上海' WHEN 32 THEN '江苏' WHEN 33 THEN '浙江' WHEN 34 THEN '安徽' WHEN 35 THEN '福建' WHEN 36 THEN '江西' WHEN 37 THEN
        '山东' WHEN 41 THEN '河南' WHEN 42 THEN '湖北' WHEN 43 THEN '湖南' WHEN 44 THEN '广东' WHEN 45 THEN '广西' WHEN 46 THEN '海南' WHEN 50 THEN '重庆' WHEN 51 THEN '四川' WHEN 52 THEN '贵州' WHEN 53 THEN '云南' WHEN 54 THEN '西藏' WHEN 61 THEN '陕西' WHEN 62 THEN '甘肃' WHEN 63 THEN '青海' WHEN 64 THEN '宁夏' WHEN 65 THEN '新疆'
        WHEN 71 THEN '台湾' WHEN 81 THEN '香港' WHEN 82 THEN '澳门' END,
        SUBSTRING(true_name, 1, 1),'**',',出借',"&lt;font color='#ff3214'&gt;",FORMAT(amount,0),'&lt;/font&gt;元',
        CASE WHEN p.parent_id IS NULL THEN CONCAT(p.limit_days,'天散标') ELSE '债转' END) horseString
        FROM investment i
        LEFT JOIN `user` u ON i.user_id= u.id
        LEFT JOIN project p ON i.project_id=p.id
        WHERE (p.limit_days IN (180,360) OR p.parent_id IS NOT NULL)
        ORDER BY i.time DESC
        <if test="limit != null">
            limit #{limit}
        </if>
    </select>

    <select id="findByCheckCastCount" parameterType="map" resultType="int">
		select count(1) from (
		SELECT 1
				FROM investment i
				LEFT JOIN project p ON i.project_id = p.id
				WHERE 1=1
				and p.parent_id is null
					<if test="userId != null">
						and i.user_id =#{userId,jdbcType=INTEGER}
					</if>
					<if test="type != null">
						and i.type in
						<foreach close=")" collection="typeList" index="index" item="item" open="(" separator=",">
				            #{item}
				        </foreach>
					</if>
					<if test="term != null">
						and p.limit_days &gt;=#{term,jdbcType=INTEGER}
					</if>
		union all

		select 1 from investment i
			inner join monthly_gain_project_package mgpp
			on i.package_id = mgpp.id
			where  i.type = 8
			<if test="userId != null">
			and i.user_id =#{userId,jdbcType=INTEGER}
			</if>
			and mgpp.is_new_user_only = 0 and mgpp.limit_days &gt;=30


		) t




    </select>



    <!-- 月月盈退出，查询债转总金额，已经转让金额 -->
    <select id="getMonthlyGainQuitAmountMap" parameterType="int" resultType="map">
    	SELECT
    	IFNULL(SUM(p.total_amount),0) AS totalAmount,
    	IFNULL(SUM(p.invested_amount),0) AS totalInvestedAmount
		FROM project p
		LEFT JOIN investment i ON p.investment_id=i.id
		WHERE (i.id=#{investmentId,jdbcType=INTEGER} OR i.parent_id=#{investmentId,jdbcType=INTEGER}) AND p.parent_id IS NOT NULL
    </select>

	<select id="checkIfFirstInvestMonthlyGain" parameterType="map" resultType="java.lang.Integer">
        select count(1) from investment i
		left join monthly_gain_project_package mg
		on i.package_id = mg.id
		where user_id = #{userId,jdbcType=INTEGER}
		and mg.is_new_user_only = 1
    </select>

    <select id="queryEyeOrders" parameterType="map" resultType="map">
        select
        b.phone mobile,
        b.username,
        b.register_time reg_time,
        a.id order_id,
        a.`status`,
        a.amount,
        c.id bid_id,
        c.title bid_name,
        c.annualized rate,
        2 pay_way,
        mod(c.limit_days,30) period,
        1 trade_time,
        unix_timestamp(a.time) trade_time,
        unix_timestamp(c.deadline) start_time,
        0 reward,
        1 reward_type,
        0 cost,
        1 is_bill from investment a
		join `user` b on a.user_id=b.id
		join project c on a.project_id=c.id
		join wx_activity d on b.id=d.user_id
		where b.`status`=0 and c.parent_id is null
		and d.`code`='p2peye'
		<if test="orderId != null and orderId!=''">
		and a.id=#{orderId}
		</if>
		<if test="startTime != null and startTime!=''">
		and a.time &gt;=#{startTime}
		</if>
		<if test="endTime != null and endTime!=''">
		and a.time &lt;=#{endTime}
		</if>
		<if test="mobile != null and mobile!=''">
		and b.phone=#{mobile}
		</if>
    </select>
    <select id="queryUserInvestmentList" parameterType="map" resultType="map">
		    select a.id,a.username,a.phone,a.true_name,a.identity_card,CASE a.sex WHEN 0 THEN  '女' WHEN 1 THEN '男'  WHEN 2 THEN '保密' END sexs ,(DATE_FORMAT(NOW(), '%Y')-substring(identity_card, 7, 4)) AS age,CONCAT(substring(identity_card, 7, 4),'-',substring(identity_card, 11, 2),'-',substring(identity_card, 13,2)) AS birth,
			(select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1) AS noobCount,
			(select count(1) from investment where user_id=a.id and type=1) huoInvestment ,
		b.limit_days_30,
		b.limit_days_60,
		b.limit_days_90,
		b.limit_days_120,
		b.limit_days_180,
		b.limit_days_270,
		b.limit_days_360,
		c.uncollect_capital,
		c.available_balance,
		a.risk_evaluate_score,
		d.amount,
		d.nh,
		e.`code`,
		a.register_time,
		f.time AS bindCardTime,
		g.time AS investmentTime,
		i.true_name AS customerName,
		j.amount   AS creditAmount
		from `user` a
		left JOIN (
		select ss.user_id,sum(limit_days_30) limit_days_30,sum(limit_days_60) limit_days_60,sum(limit_days_90) limit_days_90,sum(limit_days_120) limit_days_120,sum(limit_days_180) limit_days_180,sum(limit_days_270) limit_days_270,sum(limit_days_360) limit_days_360 from (
		select
		s.user_id,
		case s.limit_days when 30 then s.amount else 0 end limit_days_30,
		case s.limit_days when 60 then s.amount else 0 end limit_days_60,
		case s.limit_days when 90 then s.amount else 0 end limit_days_90,
		case s.limit_days when 120 then s.amount else 0 end limit_days_120,
		case s.limit_days when 180 then s.amount else 0 end limit_days_180,
		case s.limit_days when 240 then s.amount else 0 end limit_days_240,
		case s.limit_days when 270 then s.amount else 0 end limit_days_270,
		case s.limit_days when 360 then s.amount else 0 end limit_days_360
		from (
		select i.user_id,p.limit_days,sum(i.amount) amount from investment i LEFT JOIN project p on i.project_id=p.id where i.type=0 and p.parent_id is null GROUP BY p.limit_days,i.user_id
		) s
		) ss
		GROUP BY ss.user_id
		) b on a.id=b.user_id
		join assets c on a.id=c.user_id
		left join (
			select j.user_id,sum(j.amount) amount,TRUNCATE(sum(j.amount*j.limit_days/365),2) nh from (
				select a.user_id,sum(a.amount) amount,case when c.limit_days=0 then c.limit_days else b.limit_days end limit_days from investment a
				join project b on a.project_id=b.id
				left join project c on b.parent_id=c.id
				where a.type in (0,2)
				GROUP BY a.user_id, limit_days
			) j GROUP BY j.user_id
		) d on a.id=d.user_id
		left join wx_activity e on a.id=e.user_id
		left join (
			select a.id user_id,min(b.time) time from `user` a left join user_authentication b on a.id=b.user_id where a.identity_card=b.identification_no GROUP BY a.id
		) f on a.id=f.user_id
		left join (
			select user_id, min(time) time from investment GROUP BY user_id
		) g on a.id=g.user_id
		left join customer_list h on a.id=h.user_id
		left join user_admin i on h.admin_id=i.id
		left join (
			select a.user_id, sum(a.amount) amount from investment a join project b on a.project_id=b.id where b.parent_id is not null GROUP BY a.user_id
		) j on a.id=j.user_id
		where not EXISTS (
		select 1 from (
		SELECT DISTINCT invite_user_id user_id	FROM	user_invite	WHERE	user_id IN
			(SELECT id FROM	`user`	WHERE phone IN
			(SELECT phone	FROM user_admin	WHERE id IN
			(SELECT admin_id	FROM admin_role	WHERE	 role_id = 18)	AND company='hxwg'))
							UNION
				select user_id from wx_activity where `code` in (select `code` from wx_activity_black)
		) y where a.id=y.user_id
		) and a.`status`=0
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==0">
		 AND (select count(1) from investment where user_id=a.id and type=1)=0
		</if>
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==1">
		 AND (select count(1) from investment where user_id=a.id and type=1)&gt;0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==0">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)=0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==1">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)&gt;0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==0">
		  ANd j.amount=0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==1">
		  ANd j.amount&gt;0
		</if>
		<if test="userName != null and userName!=''">
		    AND (a.username LIKE '%${userName}%' OR a.phone LIKE '%${userName}%'  OR a.true_name  LIKE '%${userName}%')
		</if>
		<if test="code!=null and  code!='all' and code!=''">
		 AND  e.code=#{code}
		 </if>
		 <if test="code!=null and code==''">
		 AND  e.code IS NULL
		 </if>
		<if test="sex != null">
		      AND a.sex=#{sex}
		</if>
		<if test="identityCard != null and identityCard!=''">
		      AND a.identity_card=#{identityCard}
		</if>
		<if test="minAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4))&gt;#{minAge}
		</if>
		<if test="maxAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4)) &lt;=#{maxAge}
		</if>
		<if test="bindCardStartTime != null and bindCardStartTime!=''">
		      AND f.time &gt; #{bindCardStartTime}
		</if>
		<if test="bindCardEndTime != null and bindCardEndTime!=''">
		      AND f.time  &lt;=#{bindCardEndTime}
		</if>
		<if test="investmentStartTime != null and investmentEndTime!=''">
		      AND g.time &gt; #{investmentStartTime}
		</if>
		<if test="investmentEndTime != null and investmentEndTime!=''">
		      AND g.time &lt;= #{investmentEndTime}
		</if>
		<if test="startTime != null and startTime!=''">
		     AND a.register_time &gt; #{startTime}
		</if>
		<if test="endTime != null and endTime!=''">
		     AND a.register_time &lt;=#{endTime}
		</if>
		<if test="customerId!= null and customerId.size&gt;0 ">
		 AND i.id IN
		    <foreach close=")" collection="customerId" index="index" item="item" open="(" separator=",">
                #{item}
             </foreach>
		</if>
        order by a.id desc
		<if test="start != null and limit != null">
              limit #{start},#{limit}
        </if>
    </select>
    <select id="queryUserInvestmentListCount" parameterType="map" resultType="int">
    select COUNT(*)
		from `user` a
		left JOIN (
		select ss.user_id,sum(limit_days_30) limit_days_30,sum(limit_days_60) limit_days_60,sum(limit_days_90) limit_days_90,sum(limit_days_120) limit_days_120,sum(limit_days_180) limit_days_180,sum(limit_days_270) limit_days_270,sum(limit_days_360) limit_days_360 from (
		select
		s.user_id,
		case s.limit_days when 30 then s.amount else 0 end limit_days_30,
		case s.limit_days when 60 then s.amount else 0 end limit_days_60,
		case s.limit_days when 90 then s.amount else 0 end limit_days_90,
		case s.limit_days when 120 then s.amount else 0 end limit_days_120,
		case s.limit_days when 180 then s.amount else 0 end limit_days_180,
		case s.limit_days when 240 then s.amount else 0 end limit_days_240,
		case s.limit_days when 270 then s.amount else 0 end limit_days_270,
		case s.limit_days when 360 then s.amount else 0 end limit_days_360
		from (
		select i.user_id,p.limit_days,sum(i.amount) amount from investment i LEFT JOIN project p on i.project_id=p.id where i.type=0 and p.parent_id is null GROUP BY p.limit_days,i.user_id
		) s
		) ss
		GROUP BY ss.user_id
		) b on a.id=b.user_id
		join assets c on a.id=c.user_id
		left join (
			select j.user_id,sum(j.amount) amount,TRUNCATE(sum(j.amount*j.limit_days/365),2) nh from (
				select a.user_id,sum(a.amount) amount,case when c.limit_days=0 then c.limit_days else b.limit_days end limit_days from investment a
				join project b on a.project_id=b.id
				left join project c on b.parent_id=c.id
				where a.type in (0,2)
				GROUP BY a.user_id, limit_days
			) j GROUP BY j.user_id
		) d on a.id=d.user_id
		left join wx_activity e on a.id=e.user_id
		left join (
			select a.id user_id,min(b.time) time from `user` a left join user_authentication b on a.id=b.user_id where a.identity_card=b.identification_no GROUP BY a.id
		) f on a.id=f.user_id
		left join (
			select user_id, min(time) time from investment GROUP BY user_id
		) g on a.id=g.user_id
		left join customer_list h on a.id=h.user_id
		left join user_admin i on h.admin_id=i.id
		left join (
			select a.user_id, sum(a.amount) amount from investment a join project b on a.project_id=b.id where b.parent_id is not null GROUP BY a.user_id
		) j on a.id=j.user_id
		where not EXISTS (
		select 1 from (
		SELECT DISTINCT invite_user_id user_id	FROM	user_invite	WHERE	user_id IN
			(SELECT id FROM	`user`	WHERE phone IN
			(SELECT phone	FROM user_admin	WHERE id IN
			(SELECT admin_id	FROM admin_role	WHERE	 role_id = 18)	AND company='hxwg'))
							UNION
				select user_id from wx_activity where `code` in (select `code` from wx_activity_black)
		) y where a.id=y.user_id
		) and a.`status`=0
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==0">
		 AND (select count(1) from investment where user_id=a.id and type=1)=0
		</if>
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==1">
		 AND (select count(1) from investment where user_id=a.id and type=1)&gt;0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==0">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)=0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==1">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)&gt;0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==0">
		  ANd j.amount=0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==1">
		  ANd j.amount&gt;0
		</if>
		<if test="code!=null and  code!='all' and code!=''">
		 AND  e.code=#{code}
		 </if>
		 <if test="code!=null and code==''">
		 AND  e.code IS NULL
		 </if>
		<if test="userName != null and userName!=''">
		      AND (a.username LIKE '%${userName}%' OR a.phone LIKE '%${userName}%'  OR a.true_name  LIKE '%${userName}%')
		</if>
		<if test="sex != null">
		      AND a.sex=#{sex}
		</if>
		<if test="identityCard != null and identityCard!=''">
		      AND a.identity_card=#{identityCard}
		</if>
		<if test="minAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4))&gt;#{minAge}
		</if>
		<if test="maxAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4)) &lt;=#{maxAge}
		</if>
		<if test="bindCardStartTime != null and bindCardStartTime!=''">
		      AND f.time &gt; #{bindCardStartTime}
		</if>
		<if test="bindCardEndTime != null and bindCardEndTime!=''">
		      AND f.time  &lt;=#{bindCardEndTime}
		</if>
		<if test="investmentStartTime != null and investmentEndTime!=''">
		      AND g.time &gt; #{investmentStartTime}
		</if>
		<if test="investmentEndTime != null and investmentEndTime!=''">
		      AND g.time &lt;= #{investmentEndTime}
		</if>
		<if test="startTime != null and startTime!=''">
		     AND a.register_time &gt; #{startTime}
		</if>
		<if test="endTime != null and endTime!=''">
		     AND a.register_time &lt;=#{endTime}
		</if>
		<if test="customerId!= null and customerId.size&gt;0">
		 AND i.id IN
		    <foreach close=")" collection="customerId" index="index" item="item" open="(" separator=",">
                #{item}
             </foreach>
		</if>
    </select>
    <select id="queryUserInvestmentListCountMap" parameterType="map" resultType="map">
    select count(*) userCount,SUM(d.amount) hisCountAmount,SUM(d.nh) hisCountAmountNh,SUM(c.uncollect_capital) invCount,SUM(j.amount) creditCountAmount
		from `user` a
		left JOIN (
		select ss.user_id,sum(limit_days_30) limit_days_30,sum(limit_days_60) limit_days_60,sum(limit_days_90) limit_days_90,sum(limit_days_120) limit_days_120,sum(limit_days_180) limit_days_180,sum(limit_days_270) limit_days_270,sum(limit_days_360) limit_days_360 from (
		select
		s.user_id,
		case s.limit_days when 30 then s.amount else 0 end limit_days_30,
		case s.limit_days when 60 then s.amount else 0 end limit_days_60,
		case s.limit_days when 90 then s.amount else 0 end limit_days_90,
		case s.limit_days when 120 then s.amount else 0 end limit_days_120,
		case s.limit_days when 180 then s.amount else 0 end limit_days_180,
		case s.limit_days when 240 then s.amount else 0 end limit_days_240,
		case s.limit_days when 270 then s.amount else 0 end limit_days_270,
		case s.limit_days when 360 then s.amount else 0 end limit_days_360
		from (
		select i.user_id,p.limit_days,sum(i.amount) amount from investment i LEFT JOIN project p on i.project_id=p.id where i.type=0 and p.parent_id is null GROUP BY p.limit_days,i.user_id
		) s
		) ss
		GROUP BY ss.user_id
		) b on a.id=b.user_id
		join assets c on a.id=c.user_id
		left join (
			select j.user_id,sum(j.amount) amount,TRUNCATE(sum(j.amount*j.limit_days/365),2) nh from (
				select a.user_id,sum(a.amount) amount,case when c.limit_days=0 then c.limit_days else b.limit_days end limit_days from investment a
				join project b on a.project_id=b.id
				left join project c on b.parent_id=c.id
				where a.type in (0,2)
				GROUP BY a.user_id, limit_days
			) j GROUP BY j.user_id
		) d on a.id=d.user_id
		left join wx_activity e on a.id=e.user_id
		left join (
			select a.id user_id,min(b.time) time from `user` a left join user_authentication b on a.id=b.user_id where a.identity_card=b.identification_no GROUP BY a.id
		) f on a.id=f.user_id
		left join (
			select user_id, min(time) time from investment GROUP BY user_id
		) g on a.id=g.user_id
		left join customer_list h on a.id=h.user_id
		left join user_admin i on h.admin_id=i.id
		left join (
			select a.user_id, sum(a.amount) amount from investment a join project b on a.project_id=b.id where b.parent_id is not null GROUP BY a.user_id
		) j on a.id=j.user_id
		where not EXISTS (
		select 1 from (
		SELECT DISTINCT invite_user_id user_id	FROM	user_invite	WHERE	user_id IN
			(SELECT id FROM	`user`	WHERE phone IN
			(SELECT phone	FROM user_admin	WHERE id IN
			(SELECT admin_id	FROM admin_role	WHERE	 role_id = 18)	AND company='hxwg'))
							UNION
				select user_id from wx_activity where `code` in (select `code` from wx_activity_black)
		) y where a.id=y.user_id
		) and a.`status`=0
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==0">
		 AND (select count(1) from investment where user_id=a.id and type=1)=0
		</if>
		<if test="ishuoInv!=null and ishuoInv!='' and ishuoInv==1">
		 AND (select count(1) from investment where user_id=a.id and type=1)&gt;0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==0">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)=0
		</if>
		<if test="isNoob!=null and isNoob!='' and isNoob==1">
		 AND (select count(1) from project where id in (select project_id from investment where user_id=a.id) and noob=1)&gt;0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==0">
		  ANd j.amount=0
		</if>
		<if test="isCredit!=null and isCredit!='' and isCredit==1">
		  ANd j.amount&gt;0
		</if>
		<if test="code!=null and  code!='all' and code!=''">
		 AND  e.code=#{code}
		 </if>
		 <if test="code!=null and code==''">
		 AND  e.code IS NULL
		 </if>
		<if test="userName != null and userName!=''">
		        AND (a.username LIKE '%${userName}%' OR a.phone LIKE '%${userName}%'  OR a.true_name  LIKE '%${userName}%')
		</if>
		<if test="sex != null">
		      AND a.sex=#{sex}
		</if>
		<if test="identityCard != null and identityCard!=''">
		      AND a.identity_card=#{identityCard}
		</if>
		<if test="minAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4))&gt;#{minAge}
		</if>
		<if test="maxAge != null">
		    AND (DATE_FORMAT(NOW(), '%Y')-substring(a.identity_card, 7, 4)) &lt;=#{maxAge}
		</if>
		<if test="bindCardStartTime != null and bindCardStartTime!=''">
		      AND f.time &gt; #{bindCardStartTime}
		</if>
		<if test="bindCardEndTime != null and bindCardEndTime!=''">
		      AND f.time  &lt;=#{bindCardEndTime}
		</if>
		<if test="investmentStartTime != null and investmentEndTime!=''">
		      AND g.time &gt; #{investmentStartTime}
		</if>
		<if test="investmentEndTime != null and investmentEndTime!=''">
		      AND g.time &lt;= #{investmentEndTime}
		</if>
		<if test="startTime != null and startTime!=''">
		     AND a.register_time &gt; #{startTime}
		</if>
		<if test="endTime != null and endTime!=''">
		     AND a.register_time &lt;=#{endTime}
		</if>
		<if test="customerId!= null and customerId.size&gt;0">
		 AND i.id IN
		    <foreach close=")" collection="customerId" index="index" item="item" open="(" separator=",">
                #{item}
             </foreach>
		</if>
    </select>

    <select id="queryCustomerList" resultType="map">
     SELECT id,true_name,phone FROM user_admin	WHERE id IN  (SELECT admin_id	FROM admin_role	WHERE	 role_id = 18)  AND `status`=0
    </select>
    <!-- 资产长时间未成功资产匹配(15分钟未被匹配) -->
    <select id="unsuccessfulMatch" resultType="int">
    	SELECT COUNT(1) FROM investment WHERE type IN (8, 9) AND is_matching = 0 AND time &lt;= DATE_ADD(time,INTERVAL 15 MINUTE)
    </select>

    <!-- 当日智投总投资额及笔数(包括到期复投) -->
    <select id="investmentTotalAndCount" resultType="map">
    	SELECT SUM(amount) amount, COUNT(1) count FROM investment WHERE type IN (7, 8) AND time &gt;= CONCAT(DATE_FORMAT(CURRENT_DATE(),'%Y-%m-%d'),' 00:00:00')
		AND time &lt;= CONCAT(DATE_FORMAT(CURRENT_DATE(),'%Y-%m-%d'),' 23:59:59')
    </select>

    <select id="getInvestmentByOrderNo" parameterType="string" resultMap="BaseResultMap">
		SELECT
			*
		FROM
			investment inv
		WHERE
			1 = 1
		AND inv.order_no = #{orderNo}
    </select>

    <select id="selectByPrimaryKeyForUpdate" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from investment
		where id = #{id,jdbcType=INTEGER} for update
	</select>


  <select id = "selectBullsOrderList" parameterType="map" resultType="com.goochou.p2b.model.vo.InvestmentOrderVO">
    SELECT
	    a.*,
	    u.true_name,
	    p.limit_days,
	    p.ear_number,
		p.raise_fee,
		p.manage_fee,
        p.deadline,
        p.noob,
		vi.yue_ling,
		p.total_amount,
		back.buy_back_date,
		back.buy_back_amount,
		od.create_date as pay_date
	    FROM
    investment a
	INNER JOIN `user` u ON u.id = a.user_id
	INNER JOIN `project` p ON p.id = a.project_id
	INNER JOIN project_property_view vi ON vi.id = p.id
	left JOIN order_done od ON od.order_no = a.order_no and od.order_type = 'investment' AND od.order_status = 'pay'
	left join (select p1.id,
							od.create_date AS buy_back_date,
							i.amount as buy_back_amount
						from project p1
						inner join  investment i on p1.id = i.project_id
						INNER JOIN order_done od ON od.order_no = i.order_no
						WHERE od.order_type = 'investment'
							AND od.order_status = 'success'
							and p1.status = 4) back on p.parent_id = back.id
    WHERE 1=1
    <if test = "payStatus != null">
      and a.pay_status = #{payStatus}
    </if>
    <if test = "orderStatus != null">
      and a.order_status = #{orderStatus}
    </if>
    <if test="startDate != null">
      and od.create_date &gt;= #{startDate}
    </if>
    <if test="endDate != null">
      and od.create_date &lt;date_add(#{endDate}, interval 1 day)
    </if>
    <if test = "orderNo != null">
      and a.order_no like '%${orderNo}%'
    </if>
    <if test = "yueLing != null">
      and vi.yue_ling = #{yueLing}
    </if>
    <if test="keyword != null">
      and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
    </if>
    <if test="userId != null">
      and u.id = #{userId}
    </if>
    order by create_date desc
    
   	<if test="start != null and limit != null">
  		limit #{start},#{limit}
  	</if>
    
  </select>

  <select id = "selectBullsOrderCount" parameterType="map" resultType="int">
    SELECT count(1) FROM 
    investment a
	INNER JOIN `user` u ON u.id = a.user_id
	INNER JOIN `project` p ON p.id = a.project_id
	INNER JOIN project_property_view vi ON vi.id = p.id 
	left JOIN order_done od ON od.order_no = a.order_no and od.order_type = 'investment' AND od.order_status = 'pay'
	left join (select p1.id,	
							od.create_date AS buy_back_date,
							i.amount as buy_back_amount 
						from project p1 
						inner join  investment i on p1.id = i.project_id 
						INNER JOIN order_done od ON od.order_no = i.order_no 	
						WHERE od.order_type = 'investment' 
							AND od.order_status = 'success' 
							and p1.status = 4) back on p.parent_id = back.id 
    WHERE 1=1
    <if test = "payStatus != null">
      and a.pay_status = #{payStatus}
    </if>
    <if test = "orderStatus != null">
      and a.order_status = #{orderStatus}
    </if>
    <if test="startDate != null">
      and od.create_date &gt;= #{startDate}
    </if>
    <if test="endDate != null">
      and od.create_date &lt;date_add(#{endDate}, interval 1 day)
    </if>
    <if test = "orderNo != null">
      and a.order_no like '%${orderNo}%'
    </if>
    <if test = "yueLing != null">
      and vi.yue_ling = #{yueLing}
    </if>
    <if test="keyword != null">
      and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
    </if>
    <if test="userId != null">
      and u.id = #{userId}
    </if>
  </select>


  <select id = "queryOrderDetail" parameterType="int" resultType="com.goochou.p2b.model.vo.InvestmentOrderVO">
    SELECT
            a.*,
            u.true_name,
            p.limit_days
     FROM investment a
      INNER JOIN `user` u
        ON u.id = a.user_id
      INNER JOIN `project` p
        ON p.id = a.project_id
    WHERE a.id = #{id}
    order by id asc
  </select>
  
	<select id="getDueInvestmentCouldBuyBack"
		parameterType="java.util.Date" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from (
		select investment.*
		from investment
		inner join investment_blance blance
			on blance.investment_id=investment.id
		INNER JOIN project on investment.project_id = project.id
		where true
		and investment.order_status=1 and blance.state = 0
		and date_add(project.deadline, interval project.limit_days day) &lt;= #{dueTime,jdbcType=TIMESTAMP}
		)blance
		order by id asc
	</select>
	<select id="getDueInvestmentCouldBuyBackPin"
		parameterType="java.util.Date" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from (
		select investment.*
		from investment
		inner join investment_blance blance
			on blance.investment_id=investment.id
		INNER JOIN project on investment.project_id = project.id
		where true
		and investment.order_status=1 and blance.state = 0
		and investment.type=1
		and date_add(project.deadline, interval project.limit_days day) &lt;= #{dueTime,jdbcType=TIMESTAMP}
		)blance
		order by id asc
	</select>
	<select id="getInvestmentDueInToday" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from (
		select investment.*
		from investment
		inner join investment_blance blance
			on blance.investment_id=investment.id
		INNER JOIN project on investment.project_id = project.id
		where true
		and investment.order_status in(1,2)
		and date_add(project.deadline, interval project.limit_days day) &gt;= CURDATE()
		and date_add(project.deadline, interval project.limit_days day) &lt; date_add(CURDATE(), interval 1 day)
		)blance
		order by id asc
	</select>
<select id = "queryInvestPayList" parameterType="map" resultType="com.goochou.p2b.model.vo.InvestmentOrderListVO">
    SELECT
    a.id,
    p.id as projectId,
    a.order_no,
		a.order_status,
		a.pay_status,
		DATE_FORMAT(a.create_date, '%Y-%m-%d %H:%i:%s') create_date,
		a.amount,
		a.remain_amount,
    p.limit_days,
		p.ear_number,
		up.path,
		p.title,
		p.sex,
		p.repay_unit,
		p.annualized,
		p.deadline,
		a.update_date updateDate,
		p.project_type as projectType,
		a.interest_amount as interestAmount
    FROM
    investment a
    INNER JOIN `user` u
    ON u.id = a.user_id
    INNER JOIN `project` p
    ON p.id = a.project_id
   	LEFT JOIN (
			SELECT
				max(pp.id),
				pp.project_id AS project_id,
				pp.upload_id AS upload_id
			FROM
				project_picture pp
			WHERE
				pp. STATUS = 0
			AND pp.type = 1 GROUP BY pp.project_id
		) pic ON pic.project_id = p.id
		LEFT JOIN upload up ON up.id = pic.upload_id AND up.STATUS = 0
    WHERE 1=1 and p.status not in (5,6)
    <if test = "payStatus != null">
      and a.pay_status = #{payStatus}
    </if>
    <if test = "projectType != null">
      and a.type = #{projectType}
    </if>
    <if test = "orderStatus != null">
      and a.order_status = #{orderStatus}
    </if>
    <if test = "orderStatus == null or  orderStatus==''">
      and a.order_status !=3
    </if>
    <if test = "userId != null">
      and u.id = #{userId}
    </if>
    <if test = "orderNo != null">
      and a.order_no like '%${orderNo}%'
    </if>
    order by create_date desc
    limit #{start} , #{limit}
  </select>

  <select id = "queryInvestPayCount" parameterType="map" resultType="int">
    SELECT count(1) FROM investment a
    INNER JOIN `user` u
    ON u.id = a.user_id
    INNER JOIN `project` p
    ON p.id = a.project_id
    WHERE 1=1 and p.status not in (5,6)
    <if test = "payStatus != null">
      and a.pay_status = #{payStatus}
    </if>
    <if test = "projectType != null">
      and a.type = #{projectType}
    </if>
    <if test = "orderStatus != null">
      and a.order_status = #{orderStatus}
    </if>
        <if test = "orderStatus == null or  orderStatus==''">
      and a.order_status !=3
    </if>
    <if test = "userId != null">
      and u.id = #{userId}
    </if>
    <if test = "orderNo != null">
      and a.order_no like '%${orderNo}%'
    </if>
     
  </select>
  
  
  <select id = "queryInvestDetailById" parameterType="int" resultType="com.goochou.p2b.model.vo.InvestmentDetailsVO">
		SELECT
		        a.id,
		        a.amount,
		        a.interest_amount interestAmount,
		        a.add_interest addInterest,
		        a.balance_pay_money,
		        a.hongbao_money hongbaoMoney,
		        a.remain_amount,
		        a.order_no orderNo,
		        a.create_date createDate,
		        a.user_id userId,
		        u.true_name trueName,
		        p.id as projectId,
		        p.limit_days limitDays,
		        p.title,
				p.sex,
				p.ear_number earNumber,
				p.deadline,
				p.annualized,
				p.increase_annualized increaseAnnualized,
				p.raise_fee raiseFee,
				p.manage_fee manageFee,
				p.total_amount totalAmount,
				a.order_status orderStatus,
				a.update_date updateDate,
				p.noob as isNoob
		 FROM investment a
		  INNER JOIN `user` u
		    ON u.id = a.user_id
		  INNER JOIN `project` p
		    ON p.id = a.project_id
		WHERE a.id = #{id}
  </select>
  
  <select id = "listPrepaidBill" parameterType="map" resultType="map">
		select 
			u.id as userId,
			a.credit_amount,
			ivm.order_no,
			pro.deadline,
			ivm.interest_amount,
			max(itr.date) as release_date
		from user u
		left join assets a on a.user_id = u.id
		left join investment ivm on ivm.user_id = u.id
		left join project pro on pro.id = ivm.project_id
		left join interest itr on itr.investment_id = ivm.id
		group by u.id,a.credit_amount,ivm.order_no,pro.deadline,ivm.interest_amount
		having 1 = 1 
		<if test="userId != null">
	  		and u.id = #{userId}
	  	</if>
	  	 	order by ivm.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
	</select>
	
	<select id = "countPrepaidBill" parameterType="map" resultType="int">
		select 
			count(*)
		from (
			select 
				u.id,
				a.credit_amount,
				ivm.order_no,
				pro.deadline,
				ivm.interest_amount,
				max(itr.date) as release_date
			from user u
			left join assets a on a.user_id = u.id
			left join investment ivm on ivm.user_id = u.id
			left join project pro on pro.id = ivm.project_id
			left join interest itr on itr.investment_id = ivm.id
			group by u.id,a.credit_amount,ivm.order_no,pro.deadline,ivm.interest_amount
			having 1 = 1
		<if test="userId != null">
	  		and u.id = #{userId}
	  	</if>
	  	 	order by ivm.create_date desc
	  	 	) s1
	</select>
	
	<select id="getProjectOrderInfo" resultType="map">
		select i.id,p.id p_id,IFNULL(DATEDIFF(now(),p.deadline)+1,'0') as past_days, i.order_no, p.ear_number, IFNULL(p.total_amount+p.interest_amount,'0.00') as all_amount ,IFNULL(p.interest_amount,'0.00') as interest_amount ,IFNULL(p.total_amount,'0.00') as settle ,e.background,f.use_amount,p.title from investment i
		inner join project p   on  p.id=i.project_id  and i.order_status=1
		inner join product     on  p.product_id=product.id
		inner join enterprise  e   on   p.enterprise_id=e.id
		left join investment_blance f on i.id=f.investment_id
		where  i.id=#{id}
	</select>

	<select id="getAmountAll" resultType="double">
        select ifnull(sum(investment.amount),0) 
        from investment
        inner join user on user.id=investment.user_id
        <if test="adminId != null ">
			inner join admin_responsible 
				on admin_responsible.admin_id=${adminId} 
				and admin_responsible.department_id=user.department_id
	    </if>
	    <if test="departmentId != null">
	    	inner join department_relation
				on department_relation.department_id=${departmentId} 
				and department_relation.sub_department_id=user.department_id
	    </if>
        where investment.pay_status=2
    </select>
	<select id="getInvestmentAmountCount" parameterType="int" resultType="double">
        select ifnull(sum(amount),0) from investment where order_status in (1,2)
        <if test="userId != null">
            and user_id = #{userId}
        </if>
    </select>
</mapper>
