<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="avatar_id" jdbcType="INTEGER" property="avatarId" />
    <result column="true_name" jdbcType="VARCHAR" property="trueName" />
    <result column="identity_card" jdbcType="VARCHAR" property="identityCard" />
    <result column="card_front" jdbcType="INTEGER" property="cardFront" />
    <result column="card_back" jdbcType="INTEGER" property="cardBack" />
    <result column="pay_password" jdbcType="VARCHAR" property="payPassword" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
    <result column="education" jdbcType="INTEGER" property="education" />
    <result column="school" jdbcType="VARCHAR" property="school" />
    <result column="marriage" jdbcType="INTEGER" property="marriage" />
    <result column="register_ip" jdbcType="VARCHAR" property="registerIp" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="last_login_ip" jdbcType="VARCHAR" property="lastLoginIp" />
    <result column="error_count" jdbcType="INTEGER" property="errorCount" />
    <result column="invite_code" jdbcType="VARCHAR" property="inviteCode" />
    <result column="invite_by_code" jdbcType="VARCHAR" property="inviteByCode" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="app_version" jdbcType="VARCHAR" property="appVersion" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="sign_time" jdbcType="TIMESTAMP" property="signTime" />
    <result column="activity_sign_combo_count" jdbcType="INTEGER" property="activitySignComboCount" />
    <result column="normal_sign_combo_count" jdbcType="INTEGER" property="normalSignComboCount" />
    <result column="is_gesture_password" jdbcType="INTEGER" property="isGesturePassword" />
    <result column="gesture_password" jdbcType="VARCHAR" property="gesturePassword" />
    <result column="is_fingerprint_password" jdbcType="INTEGER" property="isFingerprintPassword" />
    <result column="client" jdbcType="VARCHAR" property="client" />
    <result column="data_source" jdbcType="VARCHAR" property="dataSource" />
    <result column="channel_id" jdbcType="VARCHAR" property="channelId" />
    <result column="is_forbid_comment" jdbcType="INTEGER" property="isForbidComment" />
    <result column="give_out_date" jdbcType="INTEGER" property="giveOutDate" />
    <result column="give_scale" jdbcType="DECIMAL" property="giveScale" />
    <result column="is_migration" jdbcType="BIT" property="isMigration" />
    <result column="migration_time" jdbcType="TIMESTAMP" property="migrationTime" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, username, password, email, phone, avatar_id, true_name, identity_card, card_front, 
    card_back, pay_password, sex, birthday, education, school, marriage, register_ip, 
    create_date, update_date, last_login_time, last_login_ip, error_count, invite_code, 
    invite_by_code, token, app_version, level, status, sign_time, activity_sign_combo_count, 
    normal_sign_combo_count, is_gesture_password, gesture_password, is_fingerprint_password, 
    client, data_source, channel_id, is_forbid_comment, give_out_date, give_scale, is_migration, 
    migration_time, department_id
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.UserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="r">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.UserExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.User" useGeneratedKeys="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (username, password, email, 
      phone, avatar_id, true_name, 
      identity_card, card_front, card_back, 
      pay_password, sex, birthday, 
      education, school, marriage, 
      register_ip, create_date, update_date, 
      last_login_time, last_login_ip, error_count, 
      invite_code, invite_by_code, token, 
      app_version, level, status, 
      sign_time, activity_sign_combo_count, normal_sign_combo_count, 
      is_gesture_password, gesture_password, is_fingerprint_password, 
      client, data_source, channel_id, 
      is_forbid_comment, give_out_date, give_scale, 
      is_migration, migration_time, department_id
      )
    values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{avatarId,jdbcType=INTEGER}, #{trueName,jdbcType=VARCHAR}, 
      #{identityCard,jdbcType=VARCHAR}, #{cardFront,jdbcType=INTEGER}, #{cardBack,jdbcType=INTEGER}, 
      #{payPassword,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, #{birthday,jdbcType=TIMESTAMP}, 
      #{education,jdbcType=INTEGER}, #{school,jdbcType=VARCHAR}, #{marriage,jdbcType=INTEGER}, 
      #{registerIp,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{lastLoginTime,jdbcType=TIMESTAMP}, #{lastLoginIp,jdbcType=VARCHAR}, #{errorCount,jdbcType=INTEGER}, 
      #{inviteCode,jdbcType=VARCHAR}, #{inviteByCode,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, 
      #{appVersion,jdbcType=VARCHAR}, #{level,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{signTime,jdbcType=TIMESTAMP}, #{activitySignComboCount,jdbcType=INTEGER}, #{normalSignComboCount,jdbcType=INTEGER}, 
      #{isGesturePassword,jdbcType=INTEGER}, #{gesturePassword,jdbcType=VARCHAR}, #{isFingerprintPassword,jdbcType=INTEGER}, 
      #{client,jdbcType=VARCHAR}, #{dataSource,jdbcType=VARCHAR}, #{channelId,jdbcType=VARCHAR}, 
      #{isForbidComment,jdbcType=INTEGER}, #{giveOutDate,jdbcType=INTEGER}, #{giveScale,jdbcType=DECIMAL}, 
      #{isMigration,jdbcType=BIT}, #{migrationTime,jdbcType=TIMESTAMP}, #{departmentId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="avatarId != null">
        avatar_id,
      </if>
      <if test="trueName != null">
        true_name,
      </if>
      <if test="identityCard != null">
        identity_card,
      </if>
      <if test="cardFront != null">
        card_front,
      </if>
      <if test="cardBack != null">
        card_back,
      </if>
      <if test="payPassword != null">
        pay_password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="education != null">
        education,
      </if>
      <if test="school != null">
        school,
      </if>
      <if test="marriage != null">
        marriage,
      </if>
      <if test="registerIp != null">
        register_ip,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="lastLoginIp != null">
        last_login_ip,
      </if>
      <if test="errorCount != null">
        error_count,
      </if>
      <if test="inviteCode != null">
        invite_code,
      </if>
      <if test="inviteByCode != null">
        invite_by_code,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="appVersion != null">
        app_version,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="signTime != null">
        sign_time,
      </if>
      <if test="activitySignComboCount != null">
        activity_sign_combo_count,
      </if>
      <if test="normalSignComboCount != null">
        normal_sign_combo_count,
      </if>
      <if test="isGesturePassword != null">
        is_gesture_password,
      </if>
      <if test="gesturePassword != null">
        gesture_password,
      </if>
      <if test="isFingerprintPassword != null">
        is_fingerprint_password,
      </if>
      <if test="client != null">
        client,
      </if>
      <if test="dataSource != null">
        data_source,
      </if>
      <if test="channelId != null">
        channel_id,
      </if>
      <if test="isForbidComment != null">
        is_forbid_comment,
      </if>
      <if test="giveOutDate != null">
        give_out_date,
      </if>
      <if test="giveScale != null">
        give_scale,
      </if>
      <if test="isMigration != null">
        is_migration,
      </if>
      <if test="migrationTime != null">
        migration_time,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="avatarId != null">
        #{avatarId,jdbcType=INTEGER},
      </if>
      <if test="trueName != null">
        #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="identityCard != null">
        #{identityCard,jdbcType=VARCHAR},
      </if>
      <if test="cardFront != null">
        #{cardFront,jdbcType=INTEGER},
      </if>
      <if test="cardBack != null">
        #{cardBack,jdbcType=INTEGER},
      </if>
      <if test="payPassword != null">
        #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="education != null">
        #{education,jdbcType=INTEGER},
      </if>
      <if test="school != null">
        #{school,jdbcType=VARCHAR},
      </if>
      <if test="marriage != null">
        #{marriage,jdbcType=INTEGER},
      </if>
      <if test="registerIp != null">
        #{registerIp,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null">
        #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="errorCount != null">
        #{errorCount,jdbcType=INTEGER},
      </if>
      <if test="inviteCode != null">
        #{inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="inviteByCode != null">
        #{inviteByCode,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null">
        #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="signTime != null">
        #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="activitySignComboCount != null">
        #{activitySignComboCount,jdbcType=INTEGER},
      </if>
      <if test="normalSignComboCount != null">
        #{normalSignComboCount,jdbcType=INTEGER},
      </if>
      <if test="isGesturePassword != null">
        #{isGesturePassword,jdbcType=INTEGER},
      </if>
      <if test="gesturePassword != null">
        #{gesturePassword,jdbcType=VARCHAR},
      </if>
      <if test="isFingerprintPassword != null">
        #{isFingerprintPassword,jdbcType=INTEGER},
      </if>
      <if test="client != null">
        #{client,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="channelId != null">
        #{channelId,jdbcType=VARCHAR},
      </if>
      <if test="isForbidComment != null">
        #{isForbidComment,jdbcType=INTEGER},
      </if>
      <if test="giveOutDate != null">
        #{giveOutDate,jdbcType=INTEGER},
      </if>
      <if test="giveScale != null">
        #{giveScale,jdbcType=DECIMAL},
      </if>
      <if test="isMigration != null">
        #{isMigration,jdbcType=BIT},
      </if>
      <if test="migrationTime != null">
        #{migrationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.UserExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.avatarId != null">
        avatar_id = #{record.avatarId,jdbcType=INTEGER},
      </if>
      <if test="record.trueName != null">
        true_name = #{record.trueName,jdbcType=VARCHAR},
      </if>
      <if test="record.identityCard != null">
        identity_card = #{record.identityCard,jdbcType=VARCHAR},
      </if>
      <if test="record.cardFront != null">
        card_front = #{record.cardFront,jdbcType=INTEGER},
      </if>
      <if test="record.cardBack != null">
        card_back = #{record.cardBack,jdbcType=INTEGER},
      </if>
      <if test="record.payPassword != null">
        pay_password = #{record.payPassword,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="record.education != null">
        education = #{record.education,jdbcType=INTEGER},
      </if>
      <if test="record.school != null">
        school = #{record.school,jdbcType=VARCHAR},
      </if>
      <if test="record.marriage != null">
        marriage = #{record.marriage,jdbcType=INTEGER},
      </if>
      <if test="record.registerIp != null">
        register_ip = #{record.registerIp,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginTime != null">
        last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginIp != null">
        last_login_ip = #{record.lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="record.errorCount != null">
        error_count = #{record.errorCount,jdbcType=INTEGER},
      </if>
      <if test="record.inviteCode != null">
        invite_code = #{record.inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="record.inviteByCode != null">
        invite_by_code = #{record.inviteByCode,jdbcType=VARCHAR},
      </if>
      <if test="record.token != null">
        token = #{record.token,jdbcType=VARCHAR},
      </if>
      <if test="record.appVersion != null">
        app_version = #{record.appVersion,jdbcType=VARCHAR},
      </if>
      <if test="record.level != null">
        level = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.signTime != null">
        sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.activitySignComboCount != null">
        activity_sign_combo_count = #{record.activitySignComboCount,jdbcType=INTEGER},
      </if>
      <if test="record.normalSignComboCount != null">
        normal_sign_combo_count = #{record.normalSignComboCount,jdbcType=INTEGER},
      </if>
      <if test="record.isGesturePassword != null">
        is_gesture_password = #{record.isGesturePassword,jdbcType=INTEGER},
      </if>
      <if test="record.gesturePassword != null">
        gesture_password = #{record.gesturePassword,jdbcType=VARCHAR},
      </if>
      <if test="record.isFingerprintPassword != null">
        is_fingerprint_password = #{record.isFingerprintPassword,jdbcType=INTEGER},
      </if>
      <if test="record.client != null">
        client = #{record.client,jdbcType=VARCHAR},
      </if>
      <if test="record.dataSource != null">
        data_source = #{record.dataSource,jdbcType=VARCHAR},
      </if>
      <if test="record.channelId != null">
        channel_id = #{record.channelId,jdbcType=VARCHAR},
      </if>
      <if test="record.isForbidComment != null">
        is_forbid_comment = #{record.isForbidComment,jdbcType=INTEGER},
      </if>
      <if test="record.giveOutDate != null">
        give_out_date = #{record.giveOutDate,jdbcType=INTEGER},
      </if>
      <if test="record.giveScale != null">
        give_scale = #{record.giveScale,jdbcType=DECIMAL},
      </if>
      <if test="record.isMigration != null">
        is_migration = #{record.isMigration,jdbcType=BIT},
      </if>
      <if test="record.migrationTime != null">
        migration_time = #{record.migrationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    set id = #{record.id,jdbcType=INTEGER},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      avatar_id = #{record.avatarId,jdbcType=INTEGER},
      true_name = #{record.trueName,jdbcType=VARCHAR},
      identity_card = #{record.identityCard,jdbcType=VARCHAR},
      card_front = #{record.cardFront,jdbcType=INTEGER},
      card_back = #{record.cardBack,jdbcType=INTEGER},
      pay_password = #{record.payPassword,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      birthday = #{record.birthday,jdbcType=TIMESTAMP},
      education = #{record.education,jdbcType=INTEGER},
      school = #{record.school,jdbcType=VARCHAR},
      marriage = #{record.marriage,jdbcType=INTEGER},
      register_ip = #{record.registerIp,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      last_login_time = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      last_login_ip = #{record.lastLoginIp,jdbcType=VARCHAR},
      error_count = #{record.errorCount,jdbcType=INTEGER},
      invite_code = #{record.inviteCode,jdbcType=VARCHAR},
      invite_by_code = #{record.inviteByCode,jdbcType=VARCHAR},
      token = #{record.token,jdbcType=VARCHAR},
      app_version = #{record.appVersion,jdbcType=VARCHAR},
      level = #{record.level,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      activity_sign_combo_count = #{record.activitySignComboCount,jdbcType=INTEGER},
      normal_sign_combo_count = #{record.normalSignComboCount,jdbcType=INTEGER},
      is_gesture_password = #{record.isGesturePassword,jdbcType=INTEGER},
      gesture_password = #{record.gesturePassword,jdbcType=VARCHAR},
      is_fingerprint_password = #{record.isFingerprintPassword,jdbcType=INTEGER},
      client = #{record.client,jdbcType=VARCHAR},
      data_source = #{record.dataSource,jdbcType=VARCHAR},
      channel_id = #{record.channelId,jdbcType=VARCHAR},
      is_forbid_comment = #{record.isForbidComment,jdbcType=INTEGER},
      give_out_date = #{record.giveOutDate,jdbcType=INTEGER},
      give_scale = #{record.giveScale,jdbcType=DECIMAL},
      is_migration = #{record.isMigration,jdbcType=BIT},
      migration_time = #{record.migrationTime,jdbcType=TIMESTAMP},
      department_id = #{record.departmentId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="avatarId != null">
        avatar_id = #{avatarId,jdbcType=INTEGER},
      </if>
      <if test="trueName != null">
        true_name = #{trueName,jdbcType=VARCHAR},
      </if>
      <if test="identityCard != null">
        identity_card = #{identityCard,jdbcType=VARCHAR},
      </if>
      <if test="cardFront != null">
        card_front = #{cardFront,jdbcType=INTEGER},
      </if>
      <if test="cardBack != null">
        card_back = #{cardBack,jdbcType=INTEGER},
      </if>
      <if test="payPassword != null">
        pay_password = #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=TIMESTAMP},
      </if>
      <if test="education != null">
        education = #{education,jdbcType=INTEGER},
      </if>
      <if test="school != null">
        school = #{school,jdbcType=VARCHAR},
      </if>
      <if test="marriage != null">
        marriage = #{marriage,jdbcType=INTEGER},
      </if>
      <if test="registerIp != null">
        register_ip = #{registerIp,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null">
        last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="errorCount != null">
        error_count = #{errorCount,jdbcType=INTEGER},
      </if>
      <if test="inviteCode != null">
        invite_code = #{inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="inviteByCode != null">
        invite_by_code = #{inviteByCode,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="appVersion != null">
        app_version = #{appVersion,jdbcType=VARCHAR},
      </if>
      <if test="level != null">
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="signTime != null">
        sign_time = #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="activitySignComboCount != null">
        activity_sign_combo_count = #{activitySignComboCount,jdbcType=INTEGER},
      </if>
      <if test="normalSignComboCount != null">
        normal_sign_combo_count = #{normalSignComboCount,jdbcType=INTEGER},
      </if>
      <if test="isGesturePassword != null">
        is_gesture_password = #{isGesturePassword,jdbcType=INTEGER},
      </if>
      <if test="gesturePassword != null">
        gesture_password = #{gesturePassword,jdbcType=VARCHAR},
      </if>
      <if test="isFingerprintPassword != null">
        is_fingerprint_password = #{isFingerprintPassword,jdbcType=INTEGER},
      </if>
      <if test="client != null">
        client = #{client,jdbcType=VARCHAR},
      </if>
      <if test="dataSource != null">
        data_source = #{dataSource,jdbcType=VARCHAR},
      </if>
      <if test="channelId != null">
        channel_id = #{channelId,jdbcType=VARCHAR},
      </if>
      <if test="isForbidComment != null">
        is_forbid_comment = #{isForbidComment,jdbcType=INTEGER},
      </if>
      <if test="giveOutDate != null">
        give_out_date = #{giveOutDate,jdbcType=INTEGER},
      </if>
      <if test="giveScale != null">
        give_scale = #{giveScale,jdbcType=DECIMAL},
      </if>
      <if test="isMigration != null">
        is_migration = #{isMigration,jdbcType=BIT},
      </if>
      <if test="migrationTime != null">
        migration_time = #{migrationTime,jdbcType=TIMESTAMP},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.User">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      avatar_id = #{avatarId,jdbcType=INTEGER},
      true_name = #{trueName,jdbcType=VARCHAR},
      identity_card = #{identityCard,jdbcType=VARCHAR},
      card_front = #{cardFront,jdbcType=INTEGER},
      card_back = #{cardBack,jdbcType=INTEGER},
      pay_password = #{payPassword,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=TIMESTAMP},
      education = #{education,jdbcType=INTEGER},
      school = #{school,jdbcType=VARCHAR},
      marriage = #{marriage,jdbcType=INTEGER},
      register_ip = #{registerIp,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      error_count = #{errorCount,jdbcType=INTEGER},
      invite_code = #{inviteCode,jdbcType=VARCHAR},
      invite_by_code = #{inviteByCode,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR},
      app_version = #{appVersion,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      sign_time = #{signTime,jdbcType=TIMESTAMP},
      activity_sign_combo_count = #{activitySignComboCount,jdbcType=INTEGER},
      normal_sign_combo_count = #{normalSignComboCount,jdbcType=INTEGER},
      is_gesture_password = #{isGesturePassword,jdbcType=INTEGER},
      gesture_password = #{gesturePassword,jdbcType=VARCHAR},
      is_fingerprint_password = #{isFingerprintPassword,jdbcType=INTEGER},
      client = #{client,jdbcType=VARCHAR},
      data_source = #{dataSource,jdbcType=VARCHAR},
      channel_id = #{channelId,jdbcType=VARCHAR},
      is_forbid_comment = #{isForbidComment,jdbcType=INTEGER},
      give_out_date = #{giveOutDate,jdbcType=INTEGER},
      give_scale = #{giveScale,jdbcType=DECIMAL},
      is_migration = #{isMigration,jdbcType=BIT},
      migration_time = #{migrationTime,jdbcType=TIMESTAMP},
      department_id = #{departmentId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>



    <resultMap id="r" type="com.goochou.p2b.model.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
        <result column="avatar_id" jdbcType="INTEGER" property="avatarId" />
        <result column="true_name" jdbcType="VARCHAR" property="trueName" />
        <result column="identity_card" jdbcType="VARCHAR" property="identityCard" />
        <result column="card_front" jdbcType="INTEGER" property="cardFront" />
        <result column="card_back" jdbcType="INTEGER" property="cardBack" />
        <result column="pay_password" jdbcType="VARCHAR" property="payPassword" />
        <result column="sex" jdbcType="INTEGER" property="sex" />
        <result column="birthday" jdbcType="TIMESTAMP" property="birthday" />
        <result column="education" jdbcType="INTEGER" property="education" />
        <result column="school" jdbcType="VARCHAR" property="school" />
        <result column="marriage" jdbcType="INTEGER" property="marriage" /><!--
        &amp;amp;amp;amp;amp;lt;result column="address" jdbcType="VARCHAR" property="address"/&amp;amp;amp;amp;amp;gt; -->
       <!--  &amp;amp;amp;amp;amp;lt;result column="position" jdbcType="VARCHAR" property="position"/&amp;amp;amp;amp;amp;gt; -->
        <result column="register_ip" jdbcType="VARCHAR" property="registerIp" />
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
        <result column="last_login_ip" jdbcType="VARCHAR" property="lastLoginIp" />
        <result column="error_count" jdbcType="INTEGER" property="errorCount" />
<!--         &amp;amp;amp;amp;amp;lt;result column="sina_id" jdbcType="VARCHAR" property="sinaId"/&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;result column="qq_id" jdbcType="VARCHAR" property="qqId"/&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;result column="lottery_num" jdbcType="INTEGER" property="lotteryNum"/&amp;amp;amp;amp;amp;gt; -->
        <result column="invite_code" jdbcType="VARCHAR" property="inviteCode" />
        <result column="invite_by_code" jdbcType="VARCHAR" property="inviteByCode" />
        <result column="token" jdbcType="VARCHAR" property="token" />
<!--         &amp;amp;amp;amp;amp;lt;result column="skin_id" jdbcType="INTEGER" property="skinId"/&amp;amp;amp;amp;amp;gt; -->
        <result column="app_version" jdbcType="VARCHAR" property="appVersion" />
<!--         &amp;amp;amp;amp;amp;lt;result column="qrcode" jdbcType="VARCHAR" property="qrcode"/&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;result column="has_sina_pay_password" jdbcType="INTEGER" property="hasSinaPayPassword"/&amp;amp;amp;amp;amp;gt; -->
        <result column="level" jdbcType="INTEGER" property="level" />
        <result column="status" jdbcType="INTEGER" property="status" />
<!--         &amp;amp;amp;amp;amp;lt;result column="fadada_customer_id" jdbcType="VARCHAR" property="fadadaCustomerId"/&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;result column="compliance_landord" jdbcType="INTEGER" property="complianceLandord"/&amp;amp;amp;amp;amp;gt; -->
        <result column="risk_reevaluate_time" jdbcType="TIMESTAMP" property="riskReevaluateTime" />
        <result column="risk_evaluate_score" jdbcType="INTEGER" property="riskEvaluateScore" />
        <result column="give_out_date" jdbcType="INTEGER" property="giveOutDate" />
    	<result column="give_scale" jdbcType="DECIMAL" property="giveScale" />
        <association column="id" property="assets" select="com.goochou.p2b.dao.AssetsMapper.selectByPrimaryKey" />

    </resultMap>

   <!--  &amp;amp;amp;amp;amp;lt;select id="getCountByMonthDay" resultType="map"&amp;amp;amp;amp;amp;gt;
        SELECT
            count(id)                              count,
            DATE_FORMAT(register_time, '%Y-%m-%d') regTime
        FROM
            user
        WHERE
            status = 0
            AND register_time BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY)
            AND NOW()
        GROUP BY
            DATE_FORMAT(register_time, '%Y%m%d')
        ORDER BY
            register_time ASC
    &amp;amp;amp;amp;amp;lt;/select&amp;amp;amp;amp;amp;gt; -->

    <select id="investAmountRank" resultType="map">
        SELECT
            username,
            total_investment_amount
        FROM user
            LEFT JOIN assets ON user.id = assets.user_id
    </select>

    <select id="selectUserByPhone" resultType="com.goochou.p2b.model.User">
        SELECT *
        FROM user
        WHERE phone = #{phone}
    </select>
    <select id="checkUserName" resultType="integer">
        SELECT count(1)
        FROM user
        WHERE username = #{username}
    </select>

    <update id="updateUserStatus">
        update user
        <if test="type == 0">
            set status = 1
        </if>
        <if test="type == 1">
            set status = 3
        </if>

        where id = #{userId}
    </update>
    <select id="checkLogin" resultMap="r">
        SELECT *
        FROM user
        WHERE token = #{token} AND last_login_time &lt; DATE_ADD(NOW(), INTERVAL 7 DAY)
    </select>
    <update id="logout">
        UPDATE user
        SET token = NULL
        WHERE phone = #{phone}
    </update>
    <resultMap autoMapping="true" id="selectuserandassetsbyuserid" type="com.goochou.p2b.model.User">
        <id column="id" property="id" />
        <association autoMapping="true" javaType="com.goochou.p2b.model.Assets" property="assets" />
    </resultMap>

    <select id="selectUserAndAssetsByUserId" resultMap="selectuserandassetsbyuserid">
        SELECT
            u.*,
            a.*
        FROM user u, assets a
        WHERE a.user_id = u.id AND u.id = #{userId}
    </select>
    <update id="setBackPassword">
        UPDATE user
        SET password = #{newPassword}
        WHERE id = #{id}
    </update>

    <select id="query" parameterType="map" resultType="map">
        select u.id,u.username,u.true_name trueName,u.phone,u.sex,u.birthday,u.email,
        u.create_date,u.identity_card certNo,
        u.register_ip registerIp,u.status
        from user u,assets a where u.id=a.user_id
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
        <if test="status != null">
            and status=#{status}
        </if>
        <if test="type != null">
            <if test="type == 0">
                and (true_name is null and identity_card is null)
            </if>
            <if test="type != 0">
                and true_name is not null and identity_card is not null
            </if>
          <!--   &amp;amp;amp;amp;amp;lt;if test="type == 1"&amp;amp;amp;amp;amp;gt;
                and (a.available_balance ) = 0
            &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt; -->
           <!--  &amp;amp;amp;amp;amp;lt;if test="type == 2"&amp;amp;amp;amp;amp;gt;
                and a.available_balance &amp;amp;amp;amp;amp;amp;gt; 0
            &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt;
            &amp;amp;amp;amp;amp;lt;if test="type == 3"&amp;amp;amp;amp;amp;gt;
                and a.available_balance &amp;amp;amp;amp;amp;amp;gt; 50
            &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt; -->
        </if>
        <!-- &amp;amp;amp;amp;amp;lt;if test="startAmount != null"&amp;amp;amp;amp;amp;gt;
            AND (a.available_balance )&amp;amp;amp;amp;amp;amp;gt; #{startAmount}
        &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;if test="endAmount != null"&amp;amp;amp;amp;amp;gt;
            And (a.available_balance ) &amp;amp;amp;amp;amp;amp;lt;= #{endAmount}
        &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt; -->
        limit #{start},#{limit}
    </select>

    <select id="query1" parameterType="map" resultType="map">
     SELECT
			u.id,
			department.name department_name,
			advertisement_channel.channel_name,
			u.username,
			u.true_name trueName,
			u.phone,
			u.sex,
			u.birthday,
			u.email,
			u.identity_card certNo,
			u.LEVEL,
			u.register_ip registerIp,
			u.create_date,
			u.status,
            u.give_out_date,
            u.give_scale,
            u.is_migration,
		 	ifnull(bc.ct,0)  ct,
		 	u.last_login_time,
		 	u.data_source,
		    userInvite.phone  uiPhone,
		    userInvite.true_name  uiRealName,
		    a.*
		FROM `user` u
	<if test="adminId != null ">
		inner join admin_responsible 
			on admin_responsible.admin_id=${adminId} 
			and admin_responsible.department_id=u.department_id
    </if>
    <if test="departmentId != null">
    	inner join department_relation
			on department_relation.department_id=${departmentId} 
			and department_relation.sub_department_id=u.department_id
    </if>
	LEFT JOIN assets a on u.id=a.user_id
	LEFT JOIN (select count(1) ct,user_id from bank_card where `status`= 0  group by user_id) bc on u.id=bc.user_id
	LEFT JOIN department on u.department_id=department.id
	LEFT JOIN advertisement_channel on u.channel_id=advertisement_channel.id
	left join `user` userInvite on u.invite_by_code = userInvite.invite_code
	where 1=1
	<if test="keyword != null and !keyword.isEmpty()">
        and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
    </if>
    <if test="status != null">
        and u.status=#{status}
        <if test="status ==0">
            and not exists (select 1 from withdraw_black where user_id=u.id)
        </if>
    </if>
    <if test="level != null">
        and u.level=#{level}
    </if>
     <if test="isBankCard != null and isBankCard == 0">
       and bc.ct is null
    </if>
    <if test="isBankCard != null and isBankCard == 1">
        and bc.ct &gt; 0
    </if>
    
     <if test="isMigration != null and isMigration == 0">
       and u.is_migration = 0
    </if>
    <if test="isMigration != null and isMigration == 1">
        and u.is_migration = 1
    </if>

    <if test="inviteKeyword != null and inviteKeyword != '' ">
       and userInvite.phone like '%${inviteKeyword}%' or userInvite.true_name like '%${inviteKeyword}%'
    </if>
   	<if test="startTime != null ">
        and u.create_date &gt;= #{startTime}
    </if>
    <if test="endTime != null">
        and u.create_date &lt; date_add(#{endTime}, interval 1 day)
    </if>

	ORDER BY u.id desc
	<if test="start !=null and limit != null">
       	limit #{start},#{limit}
    </if>
    </select>

    <select id="queryCount" parameterType="map" resultType="int">
        select count(u.id) from user u,assets a where u.id=a.user_id
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
        <if test="status != null">
            and status=#{status}
        </if>
        <if test="type != null">
            <if test="type == 0">
                and (true_name is null and identity_card is null)
            </if>
            <if test="type == 1">
                and (true_name is not null and identity_card is not null)
            </if>
        </if>
        <!-- &amp;amp;amp;amp;amp;lt;if test="startAmount != null"&amp;amp;amp;amp;amp;gt;
            AND a.huo_investment_amount &amp;amp;amp;amp;amp;amp;gt; #{startAmount}
        &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;amp;lt;if test="endAmount != null"&amp;amp;amp;amp;amp;gt;
            And a.huo_investment_amount &amp;amp;amp;amp;amp;amp;lt;= #{endAmount}
        &amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;gt; -->
    </select>

    <select id="ListAllOldUser" resultType="com.goochou.p2b.model.User">
        SELECT *
        FROM user
        WHERE id IN (SELECT user_id
                     FROM message
                     WHERE title = '600325')
    </select>
    <select id="getThisMonthCountByInviteCode" resultType="map">
        SELECT
            'inviteCount' AS type,
            count(1)      AS allCount
        FROM user u
        WHERE u.invite_by_code = #{inviteCode} AND DATE_FORMAT(u.register_time, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
        UNION
        SELECT
            'investmentCount' AS type,
            count(1)          AS allCount
        FROM user_invite ui, user u
        WHERE u.id = ui.invite_user_id AND ui.`status` = 1 AND u.invite_by_code = #{inviteCode} AND
              DATE_FORMAT(u.register_time, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
    </select>

    <select id="getThisMonthUserByInviteCode" resultType="map">
        SELECT
            u.id                    id,
            u.true_name             trueName,
            u.username,
            up.path                 avatar,

            ui.status               haveMoney
        FROM user u
            LEFT JOIN upload up ON u.id = up.create_user
            INNER JOIN assets a ON u.id = a.user_id
            LEFT JOIN user_invite ui ON ui.invite_user_id = u.id
        WHERE u.invite_by_code = #{inviteCode} AND DATE_FORMAT(u.register_time, '%Y-%m') = DATE_FORMAT(NOW(), '%Y-%m')
    </select>

    <select id="getOldMonthsUserByInviteCode" resultType="map">
        SELECT
            u.id                    id,
            u.true_name             trueName,
            u.username,
            up.path                 avatar,
            ui.status               haveMoney
        FROM user u
            LEFT JOIN upload up ON u.id = up.create_user
            INNER JOIN assets a ON u.id = a.user_id
            LEFT JOIN user_invite ui ON ui.invite_user_id = u.id
        WHERE
            u.invite_by_code = #{inviteCode} AND u.register_time &gt;= #{startTime} AND u.register_time &lt; #{endTime}
    </select>
    <select id="getFinancialPlanner" resultType="integer">
        SELECT count(1)
        FROM user u
        WHERE u.invite_by_code = #{inviteCode} AND DATE_FORMAT(u.register_time, '%Y-%m') = DATE_FORMAT(#{date}, '%Y-%m')
    </select>
    <select id="countHuo" resultType="long">
        SELECT count(1)
        FROM user u, assets a
        WHERE u.id = a.user_id AND u.status != 3
    </select>
    <select id="getbbdd" resultType="com.goochou.p2b.model.User">
        SELECT *
        FROM user
        WHERE id IN (SELECT a.id
                     FROM (SELECT
                               u.id,
                               ex.id exid
                           FROM user u LEFT JOIN exp_money ex ON u.id = ex.user_id
                           WHERE u.register_time &gt; '2015-08-27') a
                     WHERE a.exid IS NULL)
    </select>
    <select id="huoRecharge" resultType="long">
        SELECT COUNT(DISTINCT a.id)
        FROM (SELECT u.id
              FROM user u, trade_record tr
              WHERE tr.user_id = u.id AND tr.type = 1 AND u.`status` != 3
              GROUP BY u.id) a
    </select>

    <select id="accountChecking" parameterType="int" resultType="double">
        SELECT sum(amount) amount
        FROM trade_record
        WHERE type = 1 AND user_id = #{userId}
        UNION ALL
        SELECT sum(amount) amount
        FROM trade_record
        WHERE type = 3 AND user_id = #{userId}
        UNION ALL
        SELECT sum(amount) amount
        FROM hongbao
        WHERE type = 1 AND user_id = #{userId}
        UNION ALL
        SELECT sum(amount) amount
        FROM trade_record
        WHERE type = 2 AND user_id = #{userId}
        UNION ALL
        SELECT frozen_amount
        FROM assets
        WHERE user_id = #{userId}
    </select>

    <select id="userBirthday" parameterType="int" resultType="map">
        SELECT
            u.id,
            u.username,
            u.email,
            u.phone,
            u.true_name                         trueName,
            CASE u.sex
            WHEN '0'
                THEN '女'
            WHEN '1'
                THEN '男'
            ELSE '保密' END AS                    sex,
            DATE_FORMAT(u.birthday, '%Y-%m-%d') birthday,
            u.last_login_time                   lastLoginTime
        FROM user u
            LEFT JOIN assets a ON a.user_id = u.id
        WHERE DATE_FORMAT(u.birthday, '%m-%d') = DATE_FORMAT(SYSDATE(), '%m-%d')
    </select>

    <select id="getByTime" parameterType="date" resultMap="BaseResultMap">
        SELECT *
        FROM user u, assets a
        WHERE u.id = a.user_id AND register_date BETWEEN #{startTime} AND #{endTime}
    </select>

    <select id="queryCount1" parameterType="map" resultType="int">
         SELECT
			count(1)
		FROM `user` u
	<if test="adminId != null ">
		inner join admin_responsible 
			on admin_responsible.admin_id=${adminId} 
			and admin_responsible.department_id=u.department_id
    </if>
    <if test="departmentId != null">
    	inner join department_relation
			on department_relation.department_id=${departmentId} 
			and department_relation.sub_department_id=u.department_id
    </if>
	LEFT JOIN assets a on u.id=a.user_id
	LEFT JOIN (select count(1) ct,user_id from bank_card where `status`= 0  group by user_id) bc on u.id=bc.user_id
	LEFT JOIN department on u.department_id=department.id
	LEFT JOIN advertisement_channel on u.channel_id=advertisement_channel.id
	left join `user` userInvite on u.invite_by_code = userInvite.invite_code
	where 1=1
	<if test="keyword != null and !keyword.isEmpty()">
        and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
    </if>
    <if test="status != null">
        and u.status=#{status}
        <if test="status == 0">
            and not exists (select 1 from withdraw_black where user_id=u.id)
        </if>
    </if>
    <if test="level != null">
        and u.level=#{level}
    </if>
      <if test="isBankCard != null and isBankCard == 0">
         and bc.ct is null
    </if>
    <if test="isBankCard != null and isBankCard == 1">
        and bc.ct &gt; 0
    </if>
    <if test="isMigration != null and isMigration == 0">
       and u.is_migration = 0
    </if>
    <if test="isMigration != null and isMigration == 1">
        and u.is_migration = 1
    </if>
    <if test="inviteKeyword != null and inviteKeyword != '' ">
       and userInvite.phone like '%${inviteKeyword}%' or userInvite.true_name like '%${inviteKeyword}%'
    </if>
   	<if test="startTime != null ">
        and u.create_date &gt;= #{startTime}
    </if>
    <if test="endTime != null">
        and u.create_date &lt; date_add(#{endTime}, interval 1 day)
    </if>
	ORDER BY u.id desc
    </select>

    <!-- 客服管理信息服务 -->
    <select id="allCustomer" parameterType="int" resultType="map">
        SELECT
            c.id,
            u.true_name       trueName,
            c.new_customer_no newCustomerNo,
            r.role,
            r.description     roleName
        FROM
            customer_service_management c
            LEFT JOIN user_admin u ON c.cs_uid = u.id
            LEFT JOIN role r ON r.id = c.role_id

    </select>
    <!--新增新的客服 -->
    <insert id="addCustomer" keyProperty="id" parameterType="com.goochou.p2b.model.CustomerServiceManagement" useGeneratedKeys="true">
        INSERT INTO customer_service_management
        (id, cs_uid, new_customer_no, old_customer_no, cumulative_new_cus_no, cumulative_old_cus_no, complete_new_cus_no, complete_old_cus_no, update_time)
        VALUES (#{id,jdbcType=INTEGER}, #{csUid,jdbcType=INTEGER}, #{newCustomerNo,jdbcType=INTEGER},
                #{oldCustomerNo,jdbcType=INTEGER}, #{cumulativeNewCusNo,jdbcType=INTEGER},
                #{cumulativeOldCusNo,jdbcType=INTEGER}, #{completeNewCusNo,jdbcType=INTEGER},
                #{completeOldCusNo,jdbcType=INTEGER}, NOW());
    </insert>

    <!--更新的客服 -->
    <update id="updateCustomer" parameterType="com.goochou.p2b.model.CustomerServiceManagement">
        update customer_service_management
        <set>
            <if test="newCustomerNo != null">
                new_customer_no = #{newCustomerNo,jdbcType=INTEGER},
            </if>
            <if test="oldCustomerNo != null">
                old_customer_no = #{oldCustomerNo,jdbcType=INTEGER}
            </if>
        </set>
        <where>
            id= #{id,jdbcType=INTEGER}
        </where>
    </update>

    <!--手动同步数据在数据中 -->
    <update id="batchCustomer">
        UPDATE customer_service_task_management c, (SELECT
                                                        SUM(new_customer_no) NEW,
                                                        SUM(old_customer_no) OLD
                                                    FROM customer_service_management) s
        SET c.old_user_daily_no = s.old, c.new_user_daily_no = s.new
    </update>


    <!--删除的客服 -->
    <delete id="deleteCustomer" parameterType="java.lang.Integer">
        DELETE FROM customer_service_management
        WHERE id = #{cid,jdbcType=INTEGER}
    </delete>


    <!--查询所有的后台管理员的名字方便前台新增客服选择 -->
    <select id="selectCustomerUser" parameterType="int" resultType="map">
        SELECT
            ua.id,
            r.role,
            r.description,
            r.id         roleId
        FROM
            role r
            LEFT JOIN admin_role ar ON r.id = ar.role_id
            LEFT JOIN user_admin ua ON ua.id = ar.admin_id
        WHERE (r.role = 'normalCustomer' OR r.role = 'customService')
    </select>

    <select id="listInvestedAndIncomed" resultType="map">
        SELECT *
        FROM user u, assets a
        WHERE u.id = a.user_id AND a.huo_income &gt; 0  AND u.status = 0;
    </select>

    <select id="listIncomed" resultMap="BaseResultMap">
        SELECT u.*
        FROM user u, assets a
        WHERE u.id = a.user_id AND a.total_income &gt; 0 AND u.status = 0;
    </select>

    <!--根据id查询单个客服的详细信息并回填到更新页面中 -->
    <select id="selectSingleUser" parameterType="java.lang.Integer" resultType="map">
        SELECT
            c.id,
            u.true_name             trueName,
            c.new_customer_no       newCustomerNo,
            c.old_customer_no       oldCustomerNo,
            c.cumulative_new_cus_no cumulativeNew,
            c.cumulative_old_cus_no cumulativeOld,
            c.update_time           updateTime
        FROM customer_service_management c
            LEFT JOIN user_admin u ON c.cs_uid = u.id
        WHERE c.id = #{id,jdbcType=INTEGER}
    </select>

    <select id="getActiveUser" resultMap="BaseResultMap">
        SELECT *
        FROM user u, assets a
        WHERE u.id = a.user_id AND u.id NOT IN (SELECT user_id
                                                FROM withdraw_black) AND
             a.frozen_amount &gt; 0
              AND u.`status` = 0
    </select>

    <select id="getMessageUserPhone" resultType="string">
        SELECT phone
        FROM user u, assets a
        WHERE u.id = a.user_id AND u.`status` = 0 AND a.huo_income &gt; 0 AND u.id NOT IN (SELECT user_id
                                                                                           FROM withdraw_black)
    </select>

    <select id="selectLockwithdraw" parameterType="map" resultType="map">
        SELECT
        u.id,
        u.true_name trueName,
        u.phone,
        wb.lock_time lockTime,
        wb.reason,
        u.create_date,
        a.balance_amount
        FROM
        withdraw_black wb
        LEFT JOIN user u ON u.id = wb.user_id
        LEFT JOIN assets a ON wb.user_id = a.user_id
        <if test="likeSearch != null">
            where (u.true_name like '%${likeSearch}%' or u.phone like '%${likeSearch}%')
        </if>
        ORDER BY
        wb.lock_time DESC limit ${page},${limit}
    </select>

    <select id="selectLockwithdrawCount" parameterType="map" resultType="java.lang.Integer">
        SELECT
        count(*)
        FROM
        withdraw_black wb
        LEFT JOIN user u ON u.id = wb.user_id
        LEFT JOIN assets a ON wb.user_id = a.user_id
        <if test="likeSearch != null">
            where (u.true_name like '%${likeSearch}%' or u.phone like '%${likeSearch}%')
        </if>
        ORDER BY
        wb.lock_time DESC
    </select>


    <delete id="deleteLockWithdraw" parameterType="java.lang.Integer">
        DELETE FROM withdraw_black
        WHERE user_id = #{id,jdbcType=INTEGER}
    </delete>


    <select id="selectUserIds" parameterType="map" resultType="string">
        SELECT phone
        FROM user
        WHERE id IN (${userIds})
    </select>

    <select id="queryUserAssets" parameterType="map" resultType="map">

    </select>

    <select id="queryUserAssetsDifferenceStatistics" parameterType="map" resultType="map">
        SELECT m.*
        FROM (
                 SELECT
                     u.id,
                     u.username,
                     u.phone,
                     u.true_name                             trueName,
                     tr.rechargeAmount,
                     tr.profitAmount,
                     hb.amount                               hbAmount,
                     tr.signAmount,
                     '------'                                line1,
                     tr.withdrawAmount,
                     tr2.huoInvestmentAmount,
                     tr2.frozenAmount,
                     tr2.availableBalance,
                     tr2.uncollectCapital,
                     '------'                                line2,
                     sum(tr.amount + hb.amount - tr2.amount) amountDiff
                 FROM
                     user u
                     LEFT JOIN (
                                   SELECT
                                       t.user_id,
                                       sum(if(t.type = 1, t.amount, 0) + if(t.type = 3, t.amount, 0) +
                                           if(t.type = 11, t.amount, 0) - if(t.type = 2, t.amount, 0)) amount,
                                       sum(if(t.type = 1, t.amount, 0))                                rechargeAmount,
                                       sum(if(t.type = 3, t.amount, 0))                                profitAmount,
                                       sum(if(t.type = 11, t.amount, 0))                               signAmount,
                                       sum(if(t.type = 2, t.amount, 0))                                withdrawAmount
                                   FROM trade_record t
                                   GROUP BY user_id) tr ON tr.user_id = u.id
                     LEFT JOIN (
                                   SELECT
                                       sum(h1.amount) amount,
                                       h1.user_id
                                   FROM hongbao h1
                                   WHERE h1.type IN (1, 2) AND h1.use_time IS NOT NULL
                                   GROUP BY h1.user_id) hb ON hb.user_id = u.id
                     LEFT JOIN (
                                   SELECT
                                       t2.user_id,
                                       sum(if(t2.frozen_amount &lt; 0, 0, t2.frozen_amount)) frozenAmount,
                                       sum(if(t2.frozen_amount &lt; 0, 0, t2.frozen_amount) )      amount
                                   FROM assets t2
                                   GROUP BY t2.user_id) tr2 ON u.id = tr2.user_id
                 WHERE u.status = 0
                 GROUP BY u.id
             ) m
        WHERE m.amountDiff &lt; 0
    </select>
    <select id="selectInvitationActivity" parameterType="map" resultType="map">
        SELECT
            ur.id,
            v.sumAmount,
            v.id invID
        FROM (
                 SELECT nv.*
                 FROM (
                          SELECT
                              inv.id,
                              inv.invite_by_code,
                              sum(inter.interest_amount) sumAmount,
                              inv.amount,
                              inv.remain_amount
                          FROM
                              (
                                  SELECT
                                      i.id,
                                      i.amount,
                                      i.remain_amount,
                                      u.invite_by_code,
                                      i.time
                                  FROM
                                      investment i
                                      LEFT JOIN project p ON p.id = i.project_id
                                      LEFT JOIN user u ON u.id = i.user_id
                                  WHERE
                                      i.user_id = #{userId,jdbcType=INTEGER}
                                      AND date_format(i.time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d')
                                      AND date_format(#{endTime}, '%Y-%m-%d')
                                      AND date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startTime},
                                                                                                       '%Y-%m-%d')
                                      AND date_format(#{endTime}, '%Y-%m-%d')
                                      AND p.parent_id IS NULL
                                      AND i.type = 0
                                      AND u.invite_by_code IS NOT NULL
                                  ORDER BY
                                      i.time
                                  LIMIT 0, 1
                              ) inv
                              LEFT JOIN interest inter ON inter.investment_id = inv.id
                          WHERE
                              inv.amount = inv.remain_amount
                      ) nv LEFT JOIN interest ie ON ie.investment_id = nv.id
                 WHERE ie.capital_amount != 0 AND ie.date = DATE_FORMAT(NOW(), '%Y-%m-%d')
             ) v
            LEFT JOIN USER ur ON ur.invite_code = v.invite_by_code
        WHERE v.amount = v.remain_amount
    </select>

    <select id="selectUserActivityInvestment" parameterType="map" resultType="map">
        SELECT
            c.count,
            e.id
        FROM (
                 SELECT
                     count(i.id) COUNT,
                     u.invite_by_code
                 FROM
                     investment i
                     LEFT JOIN project p ON p.id = i.project_id
                     LEFT JOIN USER u ON u.id = i.user_id
                 WHERE
                     i.user_id = #{userId,jdbcType=INTEGER}
                     AND date_format(i.time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d')
                     AND date_format(#{endTime}, '%Y-%m-%d')
                     AND date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d')
                     AND date_format(#{endTime}, '%Y-%m-%d')
                     AND i.type = 0
                     AND u.invite_by_code IS NOT NULL
             ) c, USER e
        WHERE e.invite_code = c.invite_by_code
    </select>

    <select id="getByKeyword" parameterType="string" resultType="com.goochou.p2b.model.User">
        SELECT *
        FROM user
        WHERE (username LIKE '%${keyword}%' OR true_name LIKE '%${keyword}%' OR phone LIKE '%${keyword}%')
    </select>

    <select id="getUNinvestedUser" parameterType="map" resultType="map">
        select u.id from user u where u.status=0
        and u.id not in (select e.user_id from withdraw_black
        e)
        and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
        <if test="keyword == 2">
            and true_name is not NULL

        </if>
        <if test="keyword == 3">
            and id in (select user_id from user_operation_record uor right join user u on uor.user_id = u.id where
            type=0
            and uor.status=1
            and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
            )
        </if>
        <if test="keyword == 4">
            and id in (select user_id from trade_record tr RIGHT join user u on tr.user_id = u.id where type = 0
            and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
            )
        </if>


        limit #{start},#{limit}

    </select>

    <select id="getCountUNinvestedUser" parameterType="map" resultType="int">
        select count(u.id) from user u where u.status=0

        and  and u.id not in (select e.user_id from withdraw_black
        e)

        and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
        <if test="keyword == 2">
            and true_name is not NULL

        </if>
        <if test="keyword == 3">
            and id in (select user_id from user_operation_record uor right join user u on uor.user_id = u.id where
            type=0
            and uor.status=1
            and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
            )
        </if>
        <if test="keyword == 4">
            and id in (select user_id from trade_record tr RIGHT join user u on tr.user_id = u.id where type = 0
            and unix_timestamp(register_time)&lt;unix_timestamp(CURDATE()) and unix_timestamp(current_date()-1)&lt;unix_timestamp(register_time)
            )
        </if>

    </select>

    <select id="getAllUNinvestedUser" parameterType="map" resultType="map">
        SELECT u.id
        FROM user u
        WHERE u.status = 0 AND u.id NOT IN (SELECT e.user_id
                                                                                   FROM withdraw_black e)
        LIMIT #{start}, #{limit}
    </select>

    <select id="getAllCountUNinvestedUser" resultType="int">
        SELECT count(u.id)
        FROM user u
        WHERE u.status = 0 AND u.id NOT IN (SELECT e.user_id
                                                                                   FROM withdraw_black e)
    </select>


    <!--    &amp;amp;amp;amp;lt;select id="queryCustomer" parameterType="map" resultType="map"&amp;amp;amp;amp;gt;
            select u.id,u.username,u.true_name trueName,u.phone,u.sex,u.birthday,u.email,u.register_time
            registerTime,u.identity_card certNo,
            u.register_ip registerIp
            from user u where u.status=0
            &amp;amp;amp;amp;lt;if test="keyword != null"&amp;amp;amp;amp;gt;
                and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
            &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt;
            and
            u.id not in (select c.user_id from customer_list c ) and u.id not in (select e.user_id from withdraw_black e)
            limit #{start},#{limit}
        &amp;amp;amp;amp;lt;/select&amp;amp;amp;amp;gt;-->
    <select id="queryCustomer" parameterType="map" resultType="map">
        select u.id,u.username,u.true_name trueName,u.phone,u.sex,u.birthday,u.email,
        u.create_date,u.identity_card certNo,
        u.register_ip registerIp
        from user u where u.status=0
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
       and u.id not in (select e.user_id from withdraw_black e)
        limit #{start},#{limit}
    </select>

    <select id="selectUserWeeklyReport" parameterType="map" resultType="map">
        SELECT
            (
                SELECT count(*)
                FROM
                    user u
                    LEFT JOIN bank_card b ON u.id = b.user_id
                WHERE
                    u.status = 0 AND
                    date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
                    AND date_format(#{endDate}, '%Y-%m-%d')
                    AND b.id IS NOT NULL
            ) bankCount,
            (
                SELECT count(*)
                FROM
                    user u
                WHERE
                    u.status = 0 AND
                    date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
                    AND date_format(#{endDate}, '%Y-%m-%d')
                    AND u.identity_card IS NOT NULL
            ) cardCount,
            (
                SELECT count(*)
                FROM
                    user u
                WHERE
                    u.status = 0 AND
                    date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
                    AND date_format(#{endDate}, '%Y-%m-%d')
            ) registerCount,
            (
                SELECT count(*)
                FROM
                    user u
                WHERE
                    u.status = 0 AND
                    date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
                    AND date_format(#{endDate}, '%Y-%m-%d')
                    AND u.id IN (
                        SELECT DISTINCT (user_id)
                        FROM
                            investment
                    )
            ) investmentCount
    </select>


    <select id="query2" parameterType="map" resultType="map">
        select * from (

        select u.phone
        from user u where 1=1
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
        <if test="status != null">
            and status=#{status}
            <if test="status ==0">
                and u.id not in (select user_id from withdraw_black)
            </if>
        </if>
        <if test="type != null">
            <if test="type == 0">
                and (true_name is null and identity_card is null)
            </if>
            <if test="type != 0">
                and true_name is not null and identity_card is not null
            </if>

            <if test="type == 1">
                and u.true_name is not NULL
                and u.id not in (select DISTINCT (user_id) from bank_card )
            </if>
            <if test="type == 2">
                and u.id in (select DISTINCT (user_id) from bank_card )
                and u.id not in (select DISTINCT(user_id) from trade_record where type = 0)
            </if>

          <!--   &amp;amp;amp;amp;lt;if test="type == 3"&amp;amp;amp;amp;gt;
                and a.available_balance &amp;amp;amp;amp;amp;gt; 0
            &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt;
            &amp;amp;amp;amp;lt;if test="type == 4"&amp;amp;amp;amp;gt;
                and a.available_balance &amp;amp;amp;amp;amp;gt; 50
            &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt; -->
        </if>
      <!--   &amp;amp;amp;amp;lt;if test="startAmount != null"&amp;amp;amp;amp;gt;
            AND ( a.uncollect_capital )&amp;amp;amp;amp;amp;gt; #{startAmount}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;lt;if test="endAmount != null"&amp;amp;amp;amp;gt;
            And ( a.uncollect_capital ) &amp;amp;amp;amp;amp;lt;= #{endAmount}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt; -->

       <!--  &amp;amp;amp;amp;lt;if test="startTime != null and endTime == null"&amp;amp;amp;amp;gt;
            and u.register_time &amp;amp;amp;amp;amp;gt; #{startTime}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;lt;if test="startTime == null and  endTime != null"&amp;amp;amp;amp;gt;
            and u.register_time &amp;amp;amp;amp;amp;lt; #{endTime}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt;
        &amp;amp;amp;amp;lt;if test="startTime != null and  endTime != null"&amp;amp;amp;amp;gt;
            and u.register_time &amp;amp;amp;amp;amp;gt; #{startTime} and u.register_time &amp;amp;amp;amp;amp;lt; #{endTime}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt; -->

        <if test="investStartTime != null and investndTime == null">
            and u.id in (select DISTINCT(inv.user_id) from recharge inv where time &gt; #{investStartTime})
        </if>
        <if test="investStartTime == null and  investndTime != null">
            and u.id in (select DISTINCT(inv.user_id) from recharge inv where time &lt; #{investndTime})
        </if>
        <if test="investStartTime != null and  investndTime != null">
            and u.id in (select DISTINCT(inv.user_id) from recharge inv where time &gt; #{investStartTime} and time &lt;
            #{investndTime})
        </if>

        ) u
        LEFT JOIN (select SUM(amount) zq,user_id from trade_record tr where tr.type=5 GROUP BY user_id) n
        on u.id = n.user_id


        limit #{start},#{limit}
    </select>


    <select id="selectSuperUserList" parameterType="map" resultType="map">
        select c.*,sum(g.creditorSurplusAmount) creditorSurplusAmount from (
        SELECT
        b.*,sum(
        IF (
        p.project_type = 4
        AND p.status = 0,
        p.total_amount,
        0
        )
        ) creditorAmount
        FROM
        (
        SELECT
        u.id,
        u.username,
        u.phone,
        u.true_name trueName
        FROM
        user u
        LEFT JOIN assets a ON u.id = a.user_id
        WHERE
        u.status = 4
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
        <!-- &amp;amp;amp;amp;lt;if test="balanceStart != null and balanceEnd != null"&amp;amp;amp;amp;gt;
            and a.available_balance BETWEEN #{balanceStart} and #{balanceEnd}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt; -->
        ) b,
        project p
        WHERE
        b.id = p.user_id or p.user_id is null
        GROUP BY
        b.id
        )c,( select (IFNULL((f.total_amount-f.invested_amount),0)-if(e.status=2,sum( e.total_amount -
        e.invested_amount),0)) creditorSurplusAmount,f.user_id from project f
        left join project_link_project l on f.id=l.parent_id
        left join project e on l.subcalss_id = e.id
        where f.project_type=4 group by f.id) g where c.id=g.user_id
        order by creditorSurplusAmount desc
        <if test="creditorStart != null and creditorEnd != null">
            where creditorSurplusAmount BETWEEN #{creditorStart} and #{creditorEnd}
        </if>
        <if test="start != null and limit !=null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="selectSuperUserCount" parameterType="map" resultType="int">
        select count(c.id) from (
        SELECT
        b.*,sum(
        IF (
        p.project_type = 4
        AND p.status = 0,
        p.total_amount,
        0
        )
        ) creditorAmount
        FROM
        (
        SELECT
        u.id,
        u.username,
        u.phone,
        u.true_name trueName
        FROM
        user u
        LEFT JOIN assets a ON u.id = a.user_id
        WHERE
        u.status = 4
        <if test="keyword != null">
            and (username like '%${keyword}%' or true_name like '%${keyword}%' or phone like '%${keyword}%')
        </if>
        <!-- &amp;amp;amp;amp;lt;if test="balanceStart != null and balanceEnd != null"&amp;amp;amp;amp;gt;
            and a.available_balance BETWEEN #{balanceStart} and #{balanceEnd}
        &amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;gt; -->
        ) b,
        project p
        WHERE
        b.id = p.user_id or p.user_id is null
        GROUP BY
        b.id
        )c,( select (IFNULL((f.total_amount-f.invested_amount),0)-if(e.status=2,sum( e.total_amount -
        e.invested_amount),0)) creditorSurplusAmount,f.user_id from project f
        left join project_link_project l on f.id=l.parent_id
        left join project e on l.subcalss_id = e.id
        where f.project_type=4 group by f.id) g where c.id=g.user_id
        order by creditorSurplusAmount desc
        <if test="creditorStart != null and creditorEnd != null">
            where creditorSurplusAmount BETWEEN #{creditorStart} and #{creditorEnd}
        </if>
    </select>

    <select id="getLoginUser" parameterType="string" resultMap="r">
        SELECT *
        FROM user
        WHERE (username = #{keyword} OR phone = #{keyword} OR true_name = #{keyword}) AND status IN (0, 4);
    </select>


    <select id="detailDing" parameterType="map" resultType="map">
        SELECT
            count(CASE WHEN inv.type IN (0, 2, 4, 5)
                THEN 1
                  ELSE NULL END) totalDing,
            sum(CASE WHEN inv.type IN (0, 2, 4, 5)
                THEN inv.amount
                ELSE 0 END)      totalAmountDing,
            sum(CASE WHEN p.project_type = 2
                THEN inv.amount
                ELSE 0 END)      totalAmountHuo,
            sum(CASE WHEN inv.type = 8
            	THEN inv.amount
                ELSE 0 END)     totalAmountYYY
        FROM user u LEFT JOIN investment inv ON inv.user_id = u.id
            LEFT JOIN project p ON p.id = inv.project_id
        WHERE u.id = #{userId};
    </select>

    <select id="countDing" parameterType="map" resultType="map">
        SELECT count(*) countDing
        FROM (SELECT inv.id
              FROM investment inv LEFT JOIN interest it ON it.investment_id = inv.id
              WHERE it.has_dividended = 0
                    AND inv.user_id = #{userId}
                    AND inv.type IN (0, 2, 4, 5)
              GROUP BY investment_id) s
    </select>

    <select id="selectByDate" parameterType="map" resultType="map">
        SELECT
            u.id                                                customerNum,
            u.`username`,
            u.`true_name`                                       name,
            u.`phone`                                           mobile,
            inv.*,
            bc.status                                           isBank
        FROM (SELECT *
              FROM user u
              WHERE u.status = 0 and u.user_type='normal' AND id &gt; #{userId} AND
                    DATE_FORMAT(u.`register_time`, '%m-%d-%Y') =
                    DATE_FORMAT(date_add(now(), INTERVAL -1 DAY), '%m-%d-%Y'))
             u LEFT JOIN (SELECT
                              CASE WHEN status = 0
                                  THEN 0
                              ELSE NULL END status,
                              s.user_id
                          FROM
                              (SELECT *
                               FROM bank_card
                               WHERE user_id &gt; #{userId}
                               ORDER BY id DESC) s
                          GROUP BY user_id
                         ) bc ON bc.user_id = u.id
            LEFT JOIN (SELECT user_id,investTime,sum(amount) amount
                       FROM (SELECT
                                 user_id,
                                 date_format(time, '%Y-%m-%d %H:%i:%s')
                                     investTime,
                                 amount
                             FROM `investment`
                             WHERE user_id &gt; #{userId} AND
                    DATE_FORMAT(time, '%m-%d-%Y') =
                    DATE_FORMAT(date_add(now(), INTERVAL -1 DAY), '%m-%d-%Y')
                             ORDER BY id DESC) s
                       GROUP BY user_id
                      ) inv ON inv.user_id = u.id
            LEFT JOIN user_invite ui ON ui.invite_user_id = u.id
            where   u.id not in
(
	select invite_user_id from user_invite where user_id in (
	select id from `user` where phone in (
	select phone from user_admin where id in (
	select admin_id from admin_role where role_id=18
	) and email is not null
	)
	)
)
    </select>

    <select id="selectAll" parameterType="map" resultType="map">
        SELECT
            u.id                                                customerNum,
            u.`username`,
            u.`true_name`                                       name,
            u.`phone`                                           mobile,
            inv.*,
            bc.status                                           isBank
        FROM user
             u LEFT JOIN (SELECT
                              CASE WHEN status = 0
                                  THEN 0
                              ELSE NULL END status,
                              s.user_id
                          FROM
                              (SELECT *
                               FROM bank_card
                               ORDER BY id DESC) s
                          GROUP BY user_id
                         ) bc ON bc.user_id = u.id
            LEFT JOIN (SELECT *
                       FROM (SELECT
                                 user_id,
                                 date_format(time, '%Y-%m-%d %H:%i:%s')
                                     investTime,
                                 amount
                             FROM `investment`
                             ORDER BY id DESC) s
                       GROUP BY user_id
                      ) inv ON inv.user_id = u.id
            LEFT JOIN user_invite ui ON ui.invite_user_id = u.id
        WHERE u.status = 0 and u.user_type='normal' and u.id not in
(
	select invite_user_id from user_invite where user_id in (
	select id from `user` where phone in (
	select phone from user_admin where id in (
	select admin_id from admin_role where role_id=18
	) and email is not null
	)
	)
)
    </select>

    <select id="selectYestoday" parameterType="map" resultType="map">
        select id customerNum from user where status=0
        <if test="registerTime != null">
            and date_format(create_date ,'%Y-%m-%d') = date_format( #{registerTime} ,'%Y-%m-%d')
        </if>
    </select>

    <select id="selectUserByParam" parameterType="map" resultType="map">
        SELECT u.id
        FROM wx_activity wx, `user` u, android_tunnel a
        WHERE wx.user_id = u.id
              AND a.imei = wx.imei
              AND wx.imei = #{imei}
    </select>
    <select id="countUser" resultType="int">
        SELECT COUNT(1)
        FROM `user` u
        WHERE u.`status` != 3
    </select>
    <select id="selectMaxUserId" resultType="int">
        SELECT id
        FROM `user`
        ORDER BY id DESC
        LIMIT 0, 1
    </select>


    <select id="queryInvestSpreadOfCountry" parameterType="map" resultType="com.goochou.p2b.model.vo.InvestSpreadOfCountryVO">
    	SELECT
			CASE LEFT (identity_card, 2)
			WHEN 11 THEN
				'北京'
			WHEN 12 THEN
				'天津'
			WHEN 13 THEN
				'河北'
			WHEN 14 THEN
				'山西'
			WHEN 15 THEN
				'内蒙古'
			WHEN 21 THEN
				'辽宁'
			WHEN 22 THEN
				'吉林'
			WHEN 23 THEN
				'黑龙江'
			WHEN 31 THEN
				'上海'
			WHEN 32 THEN
				'江苏'
			WHEN 33 THEN
				'浙江'
			WHEN 34 THEN
				'安徽'
			WHEN 35 THEN
				'福建'
			WHEN 36 THEN
				'江西'
			WHEN 37 THEN
				'山东'
			WHEN 41 THEN
				'河南'
			WHEN 42 THEN
				'湖北'
			WHEN 43 THEN
				'湖南'
			WHEN 44 THEN
				'广东'
			WHEN 45 THEN
				'广西'
			WHEN 46 THEN
				'海南'
			WHEN 50 THEN
				'重庆'
			WHEN 51 THEN
				'四川'
			WHEN 52 THEN
				'贵州'
			WHEN 53 THEN
				'云南'
			WHEN 54 THEN
				'西藏'
			WHEN 61 THEN
				'陕西'
			WHEN 62 THEN
				'甘肃'
			WHEN 63 THEN
				'青海'
			WHEN 64 THEN
				'宁夏'
			WHEN 65 THEN
				'新疆'
			WHEN 71 THEN
				'台湾'
			WHEN 81 THEN
				'香港'
			WHEN 82 THEN
				'澳门'
			END area,
				count(1) count
			FROM
				`user` a
			WHERE
				a.true_name IS NOT NULL
				and a.id in (select user_id from investment GROUP BY user_id)
			GROUP BY
				LEFT (identity_card, 2);
    </select>

	<update id="updateSingedStatus" parameterType="map">
        update user_signed
        <set>
            <if test="editStatus != null">
                `status` = #{editStatus,jdbcType=VARCHAR},
            </if>
        </set>
        where user_id=#{userId} and `status`=#{needStatus} and time&gt;=#{startDate} and time&lt;=#{endDate}
    </update>

	<select id="queryLandloardList" parameterType="map" resultType="com.goochou.p2b.model.vo.LandlordVO">
		select u.id userId, username, true_name trueName, u.phone phone,
		identity_card identityCard, bc.card_number cardNumber, bc.phone bankPhone, e.id enterpriseId
		from user u
		left join bank_card bc
		on u.id = bc.user_id
		left join enterprise e
		on u.id = e.user_id
		where true
		<if test="keyword != null">
			and
			(
				u.username like CONCAT('%',#{keyword},'%')
			or
				u.phone like CONCAT('%',#{keyword},'%')
			or
				u.true_name like CONCAT('%',#{keyword},'%')
			)
		</if>
		limit #{limit}, #{offset}
	</select>

	<select id="queryLandloardListCount" parameterType="map" resultType="int">
		select count(1)
		from user u
		where true
		<if test="keyword != null">
			and
			(
				u.username like CONCAT('%',#{keyword},'%')
			or
				u.phone like CONCAT('%',#{keyword},'%')
			or
				u.true_name like CONCAT('%',#{keyword},'%')
			)
		</if>
	</select>

	<select id="queryTodaySignedUser" resultType="int">
		select count(1) from user_signed where DATE_FORMAT(time, '%Y-%m-%d') = DATE_FORMAT(#{date}, '%Y-%m-%d')
	</select>

	<select id="queryTodayExpGoldUser" resultType="int">
		select count(1) from user_experience_gold where DATE_FORMAT(time, '%Y-%m-%d') = DATE_FORMAT(#{date}, '%Y-%m-%d')
	</select>

	<update id="updatePwdByUserId" parameterType="map">
		UPDATE `user`
		<set>
			<if test="isGesturePassword != null and gesturePassword != null">
				is_gesture_password = #{isGesturePassword},
				gesture_password = #{gesturePassword},
			</if>

			<if test="isFingerprintPassword != null">
				is_fingerprint_password = #{isFingerprintPassword},
			</if>
		</set>
		WHERE id = #{userId}
	</update>

	<select id="getUserPwdInfo" parameterType="int" resultType="map">
		SELECT
			is_gesture_password isGesturePassword,
			gesture_password gesturePassword,
			is_fingerprint_password isFingerprintPassword
			FROM `user` WHERE id = #{userId}
	</select>
    <select id="getCouponTotalCount" parameterType="int" resultType="int">
        SELECT(
        SELECT COUNT(*) FROM hongbao
        WHERE use_time IS NULL
        AND expire_time&gt; NOW()
        AND use_time IS NULL
        AND user_id= #{userId})+(
        SELECT COUNT(*) FROM rate_coupon
        WHERE user_id= #{userId}
        AND STATUS= 1
        AND expire_time&gt; NOW()
        AND use_time IS NULL)+(
        SELECT COUNT(*) FROM exp_money
        WHERE user_id= #{userId}
        AND STATUS= 1
        AND expire_time&gt; NOW())
    </select>

    <select id="doAccount" parameterType="int" resultType="map" statementType="CALLABLE">
        	call p_account_get(#{userId})
    </select>

    <select id="queryUsercustom" parameterType="int" resultType="map">
    SELECT
			u.LEVEL
		FROM `user` u
	INNER JOIN assets a on u.id=a.user_id
    LEFT JOIN user_invite ui on u.id=ui.invite_user_id
	WHERE 1 = 1
      <if test="userId!=null and userId!=''">
      and u.id=${userId}
      </if>
      limit 1
    </select>
    <select id="queryDistriblack" resultType="int">
      	select DISTINCT a.user_id  from
                    (SELECT invite_user_id user_id	FROM	user_invite	WHERE	user_id IN
				    (SELECT id FROM	`user`	WHERE phone IN
				    (SELECT phone	FROM user_admin	WHERE id IN
				    (SELECT admin_id	FROM admin_role	WHERE	 role_id = 18) and  company='hxwg'))
									union
							select id user_id from `user` ) a
    </select>

    <update id="updateByUserId" parameterType="map">
    	update user set fadada_customer_id = #{fadadaCustomerId} where id = #{id}
    </update>

    <select id="getCountByMonthDay" resultType="map">
        SELECT
            count(user.id)                              count,
            DATE_FORMAT(create_date, '%Y-%m-%d') regTime
        FROM
            user
  		<if test="adminId != null">
		     inner join admin_responsible 
		     on admin_responsible.admin_id=#{adminId} 
		     and admin_responsible.department_id=user.department_id
		</if>
		<if test="departmentId != null">
		     inner join department_relation
		     on department_relation.department_id=#{departmentId} 
		     and department_relation.sub_department_id=user.department_id
		</if>
        WHERE
            status = 0
            AND create_date BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY)
            AND NOW() 
        GROUP BY
            DATE_FORMAT(create_date, '%Y%m%d')
        ORDER BY
            create_date ASC
    </select>


    <select id="queryInviteUsersToResgister" parameterType="map" resultType="map">
      SELECT
        t1.true_name,
        t1.phone,
        date_format(t1.create_date, '%Y-%m-%d %H:%i:%S') time
      FROM
        `user` t1
      WHERE t1.invite_by_code=(SELECT invite_code FROM `user` WHERE id=#{userId})
        AND EXISTS (SELECT id FROM investment WHERE user_id=t1.id AND order_status IN (1, 2))
      order by t1.create_date desc
    </select>


	<select id="queryInviteFirstInvestmentHongBao" parameterType="map" resultType="map">
		select invitee.true_name,invitee.phone,
			date_format(invitee.create_date, '%Y-%m-%d %H:%i:%S') create_time,
			date_format(invitee_invest.pay_time, '%Y-%m-%d %H:%i:%S') pay_time,
			hongbao.amount,hongbao.type
		from user inviter
		inner join user invitee on inviter.invite_code=invitee.invite_by_code
		inner join (select min(id) id,min(pay_time) pay_time,user_id from
			investment_view where order_status in (1,2) group by user_id
		) invitee_invest on invitee.id=invitee_invest.user_id
		left join hongbao on hongbao.trigger_type in (2,5) 
			and hongbao.other_id=invitee_invest.id and hongbao.user_id=inviter.id
		where inviter.id=#{userId}
		and hongbao.type=1
	</select>

  <select id="queryNotInviteUsersToResgister" parameterType="map" resultType="map">
      SELECT
        t1.true_name,
        t1.phone,
        date_format(t1.create_date, '%Y-%m-%d %H:%i:%S') time
      FROM
        `user` t1
      WHERE t1.invite_by_code=(SELECT invite_code FROM `user` WHERE id=#{userId})
        AND not EXISTS (SELECT id FROM investment WHERE user_id=t1.id AND order_status IN (1, 2))
      order by t1.create_date desc
    </select>

    <select id="queryInviteUsersCount" parameterType="int" resultType="int">
      SELECT
        count(1)
      FROM
      `user` t1
      WHERE t1.invite_by_code=(SELECT invite_code FROM `user` WHERE id=#{userId})
    </select>
    
    <select id="selectByPrimaryKeyForUpdate" parameterType="java.lang.Integer" resultMap="r">
	  <!--
	    WARNING - @mbg.generated
	    This element is automatically generated by MyBatis Generator, do not modify.
	    This element was generated on Mon Jun 03 15:44:24 CST 2019.
	  -->
	  select
	  <include refid="Base_Column_List" />
	  from user
	  where id = #{id,jdbcType=INTEGER} for update
	</select>



  <select id="listMirgationUserReport" parameterType="map" resultType="map">
    SELECT 
      u.id,
      u.phone,
      u.true_name,
      u.identity_card,
      u.sex,
      u.is_migration,
      u.migration_time,
      IFNULL(tr.balance_amount, 0) migration_balance_amount,
      IFNULL(investment.count_investment, 0) count_investment,
      IFNULL(investment.sum_investment_amount, 0) sum_investment_amount,
      IFNULL(receive.sum_receive_corpus, 0) sum_receive_corpus,
      IFNULL(receive.sum_receive_interest, 0) sum_receive_interest
    FROM
      (SELECT 
        * 
      FROM
        `user` 
      WHERE `user`.is_migration
        <if test="keyword != null and keyword != ''">
          and (`user`.true_name like '%${keyWord}%' or `user`.phone like '%${keyWord}%' or `user`.identity_card like '%${keyWord}%')
        </if>
        <if test="mirgationStartTime != null">
          and migration_time &gt;= #{mirgationStartTime}
        </if>
        <if test="mirgationEndTime != null">
          and migration_time &lt; #{mirgationEndTime}
        </if>
        <if test="start != null and limit != null">
          limit ${start} , ${limit}
        </if>
      ) u
      LEFT JOIN trade_record tr 
        ON tr.user_id = u.id 
        AND aoe_type = 'migration_balance_add' 
      LEFT JOIN 
        (SELECT 
          user_id,
          COUNT(1) count_investment,
          SUM(amount) sum_investment_amount 
        FROM
          migration_investment 
        GROUP BY user_id) investment 
        ON investment.user_id = u.id 
      LEFT JOIN 
        (SELECT 
          user_id,
          SUM(receive_corpus) sum_receive_corpus,
          SUM(
            receive_interest + receive_increase_interest
          ) sum_receive_interest 
        FROM
          migration_investment_bill 
        WHERE ! is_receive_before 
        GROUP BY user_id) receive 
        ON receive.user_id = u.id 
  </select>

  <select id="countMirgationUserReport" parameterType="map" resultType="int">
    SELECT
     count(1)
    FROM
    (SELECT
    *
    FROM
    `user`
    WHERE `user`.is_migration
    <if test="keyword != null and keyword != ''">
      and (`user`.true_name like '%${keyWord}%' or `user`.phone like '%${keyWord}%' or `user`.identity_card like '%${keyWord}%')
    </if>
    <if test="mirgationStartTime != null">
      and migration_time &gt;= #{mirgationStartTime}
    </if>
    <if test="mirgationEndTime != null">
      and migration_time &lt; #{mirgationEndTime}
    </if>
    ) u
    LEFT JOIN trade_record tr
    ON tr.user_id = u.id
    AND aoe_type = 'migration_balance_add'
    LEFT JOIN
    (SELECT
    user_id,
    COUNT(1) count_investment,
    SUM(amount) sum_investment_amount
    FROM
    migration_investment
    GROUP BY user_id) investment
    ON investment.user_id = u.id
    LEFT JOIN
    (SELECT
    user_id,
    SUM(receive_corpus) sum_receive_corpus,
    SUM(
    receive_interest + receive_increase_interest
    ) sum_receive_interest
    FROM
    migration_investment_bill
    WHERE ! is_receive_before
    GROUP BY user_id) receive
    ON receive.user_id = u.id
  </select>
  <select id="getFirstInvestmentWaitInviter" resultMap="BaseResultMap">
	select inviter.*
	from user inviter
	inner join user invitee on inviter.invite_code=invitee.invite_by_code
	left join (select user_id,count(1) cnt from investment_view where order_status in (1,2) group by user_id) 
		inviter_invest_count on inviter.id=inviter_invest_count.user_id
	left join (select user_id,min(pay_time) pay_time from investment_view where order_status in (1,2) group by user_id) 
		invitee_first_pay_time on invitee.id=invitee_first_pay_time.user_id
	where ifnull(inviter_invest_count.cnt,0)=0 and invitee_first_pay_time.pay_time is not null and invitee_first_pay_time.pay_time>=date_add(CAST(SYSDATE()AS DATE),interval -1 day)
	and invitee_first_pay_time.pay_time &lt; date_add(CAST(SYSDATE()AS DATE),interval -0 day)
  </select>
  <select id="getFirstInvestmentWaitInvitee" resultMap="BaseResultMap">
	select invitee.*
	from user inviter
	inner join user invitee on inviter.invite_code=invitee.invite_by_code
	left join (select user_id,count(1) cnt from investment_view where order_status in (1,2) group by user_id) 
		inviter_invest_count on inviter.id=inviter_invest_count.user_id
	left join (select user_id,count(1) cnt from investment_view where order_status in (1,2) group by user_id) 
		invitee_invest_count on invitee.id=invitee_invest_count.user_id
	where inviter_invest_count.cnt>0 and ifnull(invitee_invest_count.cnt,0)=0 and invitee.create_date>=date_add(CAST(SYSDATE()AS DATE),interval -1 day)
	and invitee.create_date &lt; date_add(CAST(SYSDATE()AS DATE),interval -0 day)
  </select>
  
  <select id="dataSourceSum" parameterType="map" resultType="com.goochou.p2b.model.vo.DataSourceSumVo">
	select
		user_data_source.name,
		data_source_sum.client,
		ifnull(data_source_sum.regist_count,0) regist_count,
		ifnull(data_source_sum.first_count,0) first_count,
		ifnull(data_source_sum.first_amount,0) first_amount,
		ifnull(data_source_sum.repeat_count,0) repeat_count,
		ifnull(data_source_sum.repeat_amount,0) repeat_amount
    from (
		select user.data_source,user.client,
			count(user.id) regist_count,
			count(first_investment.user_id) first_count,
			ifnull(sum(first_investment.amount),0) first_amount,
			ifnull(sum(investment_sum.count&gt;1),0) repeat_count,
			ifnull(sum(investment_sum.amount),0) repeat_amount
		from user
		<if test="adminId != null ">
		inner join admin_responsible 
			on admin_responsible.admin_id=${adminId} 
			and admin_responsible.department_id=user.department_id 
	    </if>
	    <if test="departmentId != null">
	    	inner join department_relation
				on department_relation.department_id=${departmentId} 
				and department_relation.sub_department_id=user.department_id 
	    </if>
		left join(
					select user_id,
							sum(amount) amount,
							count(investment.id) count
					from investment
					where pay_status=2
					group by user_id
		)investment_sum	
				on investment_sum.user_id=user.id
		left join(
			select investment.*
			from investment
			inner join (
				select min(id) id
				from investment
				where pay_status=2
				group by user_id
			)first_investment on investment.id=first_investment.id
		)first_investment on first_investment.user_id=user.id
		where true
		<if test="userCreateDateStart != null">
	    and  user.create_date&gt;=#{userCreateDateStart,jdbcType=TIMESTAMP}
	    </if>
	    <if test="userCreateDateEnd != null">
	    and  user.create_date &lt; #{userCreateDateEnd,jdbcType=TIMESTAMP}
	    </if>
		and user.create_date is not null
		group by user.data_source,user.client
	)data_source_sum 
	left join user_data_source 
		on user_data_source.id=data_source_sum.data_source
  </select>
  
</mapper>