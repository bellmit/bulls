<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.TradeRecordMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.TradeRecord">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="other_id" jdbcType="INTEGER" property="otherId" />
    <result column="table_name" jdbcType="VARCHAR" property="tableName" />
    <result column="aoe_type" jdbcType="VARCHAR" property="aoeType" />
    <result column="amount" jdbcType="DOUBLE" property="amount" />
    <result column="balance_amount" jdbcType="DOUBLE" property="balanceAmount" />
    <result column="frozen_amount" jdbcType="DOUBLE" property="frozenAmount" />
    <result column="credit_amount" jdbcType="DOUBLE" property="creditAmount" />
    <result column="frozen_credit_amount" jdbcType="DOUBLE" property="frozenCreditAmount" />
    <result column="reamk" jdbcType="VARCHAR" property="reamk" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="account_type_id" jdbcType="INTEGER" property="accountTypeId" />
    <result column="account_operate_type_id" jdbcType="INTEGER" property="accountOperateTypeId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    id, user_id, other_id, table_name, aoe_type, amount, balance_amount, frozen_amount,
    credit_amount, frozen_credit_amount, reamk, create_date, update_date, account_type_id,
    account_operate_type_id
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.TradeRecordExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from trade_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    select
    <include refid="Base_Column_List" />
    from trade_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    delete from trade_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.TradeRecordExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    delete from trade_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.TradeRecord" useGeneratedKeys="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into trade_record (user_id, other_id, table_name,
      aoe_type, amount, balance_amount,
      frozen_amount, credit_amount, frozen_credit_amount,
      reamk, create_date, update_date,
      account_type_id, account_operate_type_id)
    values (#{userId,jdbcType=INTEGER}, #{otherId,jdbcType=INTEGER}, #{tableName,jdbcType=VARCHAR},
      #{aoeType,jdbcType=VARCHAR}, #{amount,jdbcType=DOUBLE}, #{balanceAmount,jdbcType=DOUBLE},
      #{frozenAmount,jdbcType=DOUBLE}, #{creditAmount,jdbcType=DOUBLE}, #{frozenCreditAmount,jdbcType=DOUBLE},
      #{reamk,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP},
      #{accountTypeId,jdbcType=INTEGER}, #{accountOperateTypeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.TradeRecord">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into trade_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="otherId != null">
        other_id,
      </if>
      <if test="tableName != null">
        table_name,
      </if>
      <if test="aoeType != null">
        aoe_type,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="balanceAmount != null">
        balance_amount,
      </if>
      <if test="frozenAmount != null">
        frozen_amount,
      </if>
      <if test="creditAmount != null">
        credit_amount,
      </if>
      <if test="frozenCreditAmount != null">
        frozen_credit_amount,
      </if>
      <if test="reamk != null">
        reamk,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="accountTypeId != null">
        account_type_id,
      </if>
      <if test="accountOperateTypeId != null">
        account_operate_type_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="otherId != null">
        #{otherId,jdbcType=INTEGER},
      </if>
      <if test="tableName != null">
        #{tableName,jdbcType=VARCHAR},
      </if>
      <if test="aoeType != null">
        #{aoeType,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DOUBLE},
      </if>
      <if test="balanceAmount != null">
        #{balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null">
        #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="creditAmount != null">
        #{creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenCreditAmount != null">
        #{frozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="reamk != null">
        #{reamk,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="accountTypeId != null">
        #{accountTypeId,jdbcType=INTEGER},
      </if>
      <if test="accountOperateTypeId != null">
        #{accountOperateTypeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.TradeRecordExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    select count(*) from trade_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    update trade_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.otherId != null">
        other_id = #{record.otherId,jdbcType=INTEGER},
      </if>
      <if test="record.tableName != null">
        table_name = #{record.tableName,jdbcType=VARCHAR},
      </if>
      <if test="record.aoeType != null">
        aoe_type = #{record.aoeType,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DOUBLE},
      </if>
      <if test="record.balanceAmount != null">
        balance_amount = #{record.balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.frozenAmount != null">
        frozen_amount = #{record.frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.creditAmount != null">
        credit_amount = #{record.creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.frozenCreditAmount != null">
        frozen_credit_amount = #{record.frozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.reamk != null">
        reamk = #{record.reamk,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.accountTypeId != null">
        account_type_id = #{record.accountTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.accountOperateTypeId != null">
        account_operate_type_id = #{record.accountOperateTypeId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    update trade_record
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      other_id = #{record.otherId,jdbcType=INTEGER},
      table_name = #{record.tableName,jdbcType=VARCHAR},
      aoe_type = #{record.aoeType,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DOUBLE},
      balance_amount = #{record.balanceAmount,jdbcType=DOUBLE},
      frozen_amount = #{record.frozenAmount,jdbcType=DOUBLE},
      credit_amount = #{record.creditAmount,jdbcType=DOUBLE},
      frozen_credit_amount = #{record.frozenCreditAmount,jdbcType=DOUBLE},
      reamk = #{record.reamk,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      account_type_id = #{record.accountTypeId,jdbcType=INTEGER},
      account_operate_type_id = #{record.accountOperateTypeId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.TradeRecord">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    update trade_record
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="otherId != null">
        other_id = #{otherId,jdbcType=INTEGER},
      </if>
      <if test="tableName != null">
        table_name = #{tableName,jdbcType=VARCHAR},
      </if>
      <if test="aoeType != null">
        aoe_type = #{aoeType,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DOUBLE},
      </if>
      <if test="balanceAmount != null">
        balance_amount = #{balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null">
        frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="creditAmount != null">
        credit_amount = #{creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenCreditAmount != null">
        frozen_credit_amount = #{frozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="reamk != null">
        reamk = #{reamk,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="accountTypeId != null">
        account_type_id = #{accountTypeId,jdbcType=INTEGER},
      </if>
      <if test="accountOperateTypeId != null">
        account_operate_type_id = #{accountOperateTypeId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.TradeRecord">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Jun 13 16:26:59 CST 2019.
    -->
    update trade_record
    set user_id = #{userId,jdbcType=INTEGER},
      other_id = #{otherId,jdbcType=INTEGER},
      table_name = #{tableName,jdbcType=VARCHAR},
      aoe_type = #{aoeType,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DOUBLE},
      balance_amount = #{balanceAmount,jdbcType=DOUBLE},
      frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      credit_amount = #{creditAmount,jdbcType=DOUBLE},
      frozen_credit_amount = #{frozenCreditAmount,jdbcType=DOUBLE},
      reamk = #{reamk,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      account_type_id = #{accountTypeId,jdbcType=INTEGER},
      account_operate_type_id = #{accountOperateTypeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <select id="findByUserId" parameterType="map" resultType="map">
        select tr.* from trade_record tr where 1=1
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>
        <if test="startDate != null and endDate != null">
            and tr.create_date between #{startDate} and #{endDate}
        </if>
        order by tr.create_date desc,tr.id desc limit #{start},#{limit} ;
    </select>

    <select id="findByUserIdCount" parameterType="map" resultType="int">
        select count(id) from trade_record tr where 1=1
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>
        <if test="startDate != null and endDate != null">
            and tr.create_date between #{startDate} and #{endDate}
        </if>
        <if test="source != null">
            and tr.source=#{source}
        </if>
    </select>
    <select id="findExcelTradeRecord" resultType="com.goochou.p2b.model.TradeRecord">
        SELECT tr.id,u.username,u.true_name,tr.type,tr.create_date,tr.amount,tr.balance FROM trade_record tr,`user` u WHERE
        tr.user_id = u.id
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>
        <if test="type != null">
            <if test="type == 4">
                and tr.type in(4,5)
            </if>
            <if test="type == 0">
                and tr.type in(0,6)
            </if>
            <if test="type != 0 and type != 4">
                and tr.type = #{type}
            </if>
        </if>
        <if test="startDate != null and endDate != null">
            and tr.create_date between #{startDate} and #{endDate}
        </if>
        and tr.source=0
        order by tr.user_id,tr.create_date desc
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="findByUserIdApp" parameterType="map" resultType="com.goochou.p2b.model.TradeRecord">
        select tr.* from trade_record tr where 1=1
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>
        <if test="startDate != null and endDate != null">
            and tr.create_date between #{startDate} and #{endDate}
        </if>
        <if test="type != null">
            <choose>
                <when test="type==0">
                    and tr.type in (0,6,10)
                </when>
                <when test="type==3">
                    and tr.type in (3,12)
                </when>
                <when test="type==4">
                    and tr.type in (4,5,15)
                </when>
                <otherwise>
                    and tr.type = #{type}
                </otherwise>
            </choose>
        </if>
        order by tr.id desc
        <if test="start!= null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="findByUserIdAppCount" parameterType="map" resultType="int">
        select count(*) from trade_record tr where 1=1
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>
        <if test="startDate != null and endDate != null">
            and tr.create_date between #{startDate} and #{endDate}
        </if>
        <if test="aoeType != null">
            and tr.aoe_type = #{aoeType}
        </if>
    </select>

    <select id="getWithRate" parameterType="map" resultType="map">
        select tr.*,u.username,u.true_name trueName from trade_record tr
          inner join user u on tr.user_id=u.id
        where tr.user_id=#{userId}
        <if test="aoeTypes != null and aoeTypes != ''">
            and tr.aoe_type in (#{aoeTypes})
        </if>
        order by tr.create_date desc
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="getWithRateCount" parameterType="map" resultType="int">
        SELECT count(tr.id) FROM trade_record tr
          inner join user u on tr.user_id=u.id
        where tr.user_id=#{userId}
        <if test="aoeTypes != null and aoeTypes != ''">
            and tr.aoe_type in (#{aoeTypes})
        </if>
    </select>

    <select id="selectAllAmountByType" resultType="double">
        SELECT SUM(amount)
        FROM trade_record
        WHERE type = #{type} AND source = 1
    </select>
    <select id="getNewInvesting" resultType="double">
        SELECT sum(amount)
        FROM trade_record
        WHERE type = 1 AND update_date &gt; #{date} AND user_id = #{userId}
        UNION ALL
        SELECT sum(amount)
        FROM withdraw
        WHERE user_id = #{userId} AND status IN (0, 1, 4) AND create_time &gt; #{date}
    </select>

    <select id="query" parameterType="map" resultType="map">
        select i.*,u.phone,u.username,u.true_name trueName from trade_record i,user u where i.user_id=u.id
        <if test="keyword != null and keyword != ''">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="aoeType != null and (aoeType != '' or aoeType == '0')">
            and i.aoe_type=#{aoeType}
        </if>
        <if test="startDate != null">
            and i.create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            and i.create_date &lt; #{endDate}
        </if>
        order by i.create_date desc,i.id desc
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="queryCount" parameterType="map" resultType="int">
        select count(*) from trade_record i,user u where i.user_id=u.id
        <if test="keyword != null and keyword != ''">
            and (u.username like '%${keyword}%' or u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="aoeType != null">
            and i.aoe_type=#{aoeType}
        </if>
        <if test="startDate != null">
            and i.create_date &gt;= #{startDate}
        </if>
        <if test="endDate != null">
            and i.create_date &lt; #{endDate}
        </if>
    </select>

    <select id="tradeAdd" parameterType="int" resultType="map">
        SELECT DISTINCT
            t.amount,
            t.update_date                    tradetime,
            u.phone,
            u.true_name               trueName,
            u.register_time           registerTime,
            a.total_investment_amount investAmount,
            a.available_balance       balance
        FROM trade_record t
            LEFT JOIN user u ON u.id = t.user_id
            LEFT JOIN assets a ON a.user_id = t.user_id
        WHERE DATE_FORMAT(t.update_date, '%Y-%m-%d') = DATE_SUB(CURDATE(), INTERVAL 1 DAY) AND a.total_investment_amount = t.amount AND t.amount &gt; 0 AND t.type = 0;
    </select>

    <select id="continuousExtractionInTimeSlot" parameterType="map" resultType="map">
        SELECT
            temp.user_id,
            u.username,
            u.phone,
            u.true_name     AS trueName,
            u.register_time AS update_date,
            tr2.allinvestment,
            tr2.allrecharge,
            tr2.allwithdraw,
            a.available_balance
        FROM
            (
                SELECT
                    user_id,
                    update_date,
                    withdraw,
                    @countday := (
                        CASE WHEN (@last_uid = user_id AND datediff(update_date, @last_date) = 1)
                            THEN (@countday + 1)
                        ELSE 1
                        END)                                             AS countday,
                    (@group_id := (@group_id + if(@countday = 1, 1, 0))) AS group_id,
                    @last_uid := user_id                                 AS last_uid,
                    @last_date := update_date                                   AS last_date
                FROM
                    (
                        SELECT
                            user_id,
                            time,
                            min(amount) AS withdraw
                        FROM
                            (
                                SELECT
                                    user_id,
                                    amount,
                                    date_format(update_date, '%Y-%m-%d') AS time
                                FROM trade_record
                                WHERE
                                    type = 2
                                    AND amount &gt;= #{extractAmount}
                                    AND update_date BETWEEN date_sub(curdate(), INTERVAL #{timeSlot} DAY) AND date_sub(curdate(), INTERVAL 0 DAY)
                            ) AS tr
                        GROUP BY tr.create_date
                        ORDER BY tr.user_id, update_date
                    ) AS t1
                    ,
                    (SELECT
                         @countday := 0,
                         @group_id := 0,
                         @last_uid := '',
                         @last_date := '') AS t2) AS temp
            LEFT JOIN
            (SELECT
                 user_id,
                 sum(if(type = 0, amount, 0)) AS allinvestment,
                 sum(if(type = 1, amount, 0)) AS allrecharge,
                 sum(if(type = 2, amount, 0)) AS allwithdraw
             FROM trade_record
             GROUP BY user_id)
                AS tr2 ON tr2.user_id = temp.user_id
            LEFT JOIN assets a ON temp.user_id = a.user_id
            LEFT JOIN user u ON temp.user_id = u.id
        WHERE temp.countday &gt;= #{days}
        GROUP BY temp.user_id;
    </select>

    <select id="rechargeAndReflectInSameDay" parameterType="java.util.Date" resultType="map">
        SELECT
            u.username,
            u.true_name            AS trueName,
            u.phone,
            m.user_id,
            m.rechargeTime,
            m.rechargeAmount,
            m.rechargeBalance,
            m.withdrawTime,
            m.withdrawAmount,
            m.withdrawBalance,
            s.available_balance    AS accountBalance,
            cast(m.hc AS CHAR(16)) AS hourc
        FROM
            (
                SELECT
                    t.user_id,
                    min(t.hourDiff) AS dif,
                    t.rechargeTime,
                    t.rechargeAmount,
                    t.rechargeBalance,
                    t.withdrawTime,
                    t.withdrawAmount,
                    t.withdrawBalance,
                    t.hc
                FROM
                    (
                        SELECT
                            t1.user_id,
                            t1.update_date                                                                                 AS rechargeTime,
                            t1.amount                                                                               AS rechargeAmount,
                            t1.balance                                                                              AS rechargeBalance,
                            t2.time                                                                                 AS withdrawTime,
                            t2.amount                                                                               AS withdrawAmount,
                            t2.balance                                                                              AS withdrawBalance,
                            SEC_TO_TIME(UNIX_TIMESTAMP(t2.time) - UNIX_TIMESTAMP(t1.time))                          AS hc,
                            SUBSTRING_INDEX(SEC_TO_TIME(UNIX_TIMESTAMP(t2.time) - UNIX_TIMESTAMP(t1.time)), ':', 1) AS hourDiff
                        FROM
                            (
                                SELECT *
                                FROM trade_record
                                WHERE type = 1
                                      AND
                                      (
                                          DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL 1 DAY)
                                          OR DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL 2 DAY)
                                      )
                            ) AS t1,
                            (
                                SELECT *
                                FROM trade_record
                                WHERE type = 2
                                      AND
                                      (
                                          DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL 1 DAY)
                                          OR DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL 2 DAY)
                                      )
                            )
                            t2
                        WHERE t1.user_id = t2.user_id AND t2.time &gt; t1.time
                        ORDER BY t1.user_id
                    ) AS t
                WHERE t.hourDiff &lt;= 24
                GROUP BY t.user_id
            ) AS m
            LEFT JOIN user u ON m.user_id = u.id
            LEFT JOIN assets s ON s.user_id = m.user_id
    </select>

    <select id="immediatelyAfterInvestmentOfAdjacent" parameterType="map" resultType="map">
        SELECT
            u.id,
            u.username,
            u.true_name AS trueName,
            u.phone,
            tr.rtime    AS rechargeTime,
            tr.ramount  AS rechargeAmount,
            tr.rbalance AS rechargeBalance,
            tr.wtime    AS withdrawTime,
            tr.wamount  AS withdrawAmount,
            tr.wbalance AS withdrawBalance
        FROM
            (
                SELECT *
                FROM
                    (
                        SELECT
                            t1.user_id,
                            t1.time    AS rtime,
                            t1.amount  AS ramount,
                            t1.balance AS rbalance,
                            t2.time    AS wtime,
                            t2.amount  AS wamount,
                            t2.balance AS wbalance
                        FROM
                            (
                                SELECT *
                                FROM trade_record
                                WHERE type = 0 AND DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL #{morning} DAY)
                            ) AS t1,
                            (
                                SELECT *
                                FROM trade_record
                                WHERE type = 2 AND DATE_FORMAT(time, '%Y-%m-%d') = date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL #{late} DAY)
                            ) AS t2
                        WHERE
                            t1.user_id = t2.user_id
                            AND t1.time &gt; cast(CONCAT(date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL #{morning} DAY), ' 21:00:00') AS DATETIME)
                            AND t2.time &lt; cast(CONCAT(date_sub(DATE_FORMAT(CURDATE(), '%Y-%m-%d'), INTERVAL #{late} DAY), ' 09:00:00') AS DATETIME)
                    ) AS t
                GROUP BY t.user_id
            ) AS tr
            LEFT JOIN user u ON u.id = tr.user_id
    </select>

    <select id="selectShakeRecord" parameterType="map" resultType="map">
        select u.true_name,u.id,u.phone,y.update_date `time`,y.type,
        (CASE WHEN y.type=0 THEN 0
        WHEN y.type in (1,6) THEN (select amount from hongbao where id=y.other_id)
        WHEN y.type in (2,5) THEN (select rate from rate_coupon where id=y.other_id)
        ELSE'其他' END) rate
        from yao_record y
        left join user u on y.user_id=u.id where 1=1
        <if test="keyword != null and keyword != ''">
            and (u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="adminId != null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="type != null">
            and y.type=#{type}
        </if>
        <if test="startTime != null">
            and date_format(y.update_date, '%y-%m-%d') &gt;= date_format(#{startTime}, '%y-%m-%d')
        </if>
        <if test="endTime != null">
            and  date_format(y.update_date, '%y-%m-%d') &lt;= date_format(#{endTime}, '%y-%m-%d')
        </if>
        ORDER BY
        y.update_date desc
        <if test="start != null and limit != null">
            limit #{start},#{limit} ;
        </if>
    </select>

    <select id="selectShakeRecordCount" parameterType="map" resultType="int">
        select count(y.id)
        from yao_record y
        left join user u on y.user_id=u.id where 1=1
        <if test="keyword != null and keyword != ''">
            and (u.true_name like '%${keyword}%' or u.phone like '%${keyword}%')
        </if>
        <if test="adminId != null">
            and (u.id in (select user_id from customer_list cl join user_admin ua on cl.admin_id=ua.id where (ua.parent_id=#{adminId} or cl.admin_id=#{adminId})))
        </if>
        <if test="type != null and (type != '' or type == 0)">
            and y.type=#{type}
        </if>
        <if test="startTime != null">
            and date_format(y.update_date, '%y-%m-%d') &gt;= date_format(#{startTime}, '%y-%m-%d')
        </if>
        <if test="endTime != null">
            and  date_format(y.update_date, '%y-%m-%d') &lt;= date_format(#{endTime}, '%y-%m-%d')
        </if>
    </select>

    <select id="selectShakeCount" parameterType="String" resultType="map">
        SELECT
            u.id,
            y.count,
            y.today_count todayCount,
            u.true_name,
            u.phone
        FROM yao_count y LEFT JOIN user u ON u.id = y.user_id
        WHERE u.phone = #{phone,jdbcType=VARCHAR}
    </select>

    <select id="selectRegularIncome" parameterType="int" resultType="double">
        SELECT IFNULL(SUM(amount), 0) amount
        FROM
            trade_record
        WHERE
            user_id = #{userId}
            AND type = 3
            AND date_format(update_date, '%y-%m-%d') = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
            AND source IN (0, 6, 7)
    </select>

    <select id="selectMonthlyBill" parameterType="map" resultType="map">
        SELECT
            t.type,
            IFNULL(sum(t.amount), 0) sumAmount
        FROM trade_record t
        WHERE t.user_id = #{userId}
              AND t.update_date BETWEEN date_format(#{month}, '%Y-%m-01') AND CONCAT(LAST_DAY(#{month}), ' 23:59:59')
        GROUP BY type
    </select>
    <select id="selectAllInvestment" parameterType="map" resultType="map">
        SELECT
            IFNULL(sum(t.amount), 0) sumAmount,
            t.source
        FROM trade_record t
        WHERE (t.type = 0 OR t.type = 10) AND t.user_id = #{userId}
              AND t.update_date BETWEEN date_format(#{month}, '%Y-%m-01') AND CONCAT(LAST_DAY(#{month}), ' 23:59:59')
        GROUP BY source
    </select>
    <select id="selectAllInvestment2" parameterType="map" resultType="map">
        SELECT
            t.source,
            IFNULL(sum(t.amount), 0) sumAmount
        FROM trade_record t
        WHERE t.type = 3 AND t.user_id = #{userId}
              AND t.update_date BETWEEN date_format(#{month}, '%Y-%m-01') AND CONCAT(LAST_DAY(#{month}), ' 23:59:59')
        GROUP BY t.source
    </select>

    <select id="noOperationAfterBackPay" resultType="map">
        SELECT
            u.username,
            u.true_name     trueName,
            u.phone,
            u.register_time registerTime,
            a.id            aid,
            a.other_id      aother,
            a.user_id       uid,
            a.table_name,
            a.amount        aamount,
            a.time          atime,
            b.id            bid,
            b.other_id      bother,
            b.user_id       buid,
            b.table_name    btable,
            b.amount        bamount,
            b.time          btime
        FROM
            (SELECT *
             FROM trade_record
             WHERE /*source = 0 AND*/ type IN (4, 5) AND date_format(update_date, '%Y-%m-%d') = curdate()) a
            LEFT JOIN
            (SELECT *
             FROM (SELECT *
                   FROM trade_record
                   WHERE aoe_type IN (0, 2) AND date_format(update_date, '%Y-%m-%d') = curdate() /* TODO sq type 改为 aoe_type */
                   ORDER BY id DESC) c
             GROUP BY c.user_id) b
                ON a.user_id = b.user_id
            LEFT JOIN user u ON a.user_id = u.id
        WHERE
            a.update_date &gt; b.update_date OR b.update_date IS NULL
        ORDER BY a.user_id
    </select>

    <select id="getTransactionAmount" parameterType="list" resultType="double">
        select sum(amount) from trade_record where type in
        <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
            #{item}
        </foreach>
    </select>


    <select id="findByUserIdandAmount" parameterType="int" resultType="int">
        select count(id) from trade_record tr where amount&gt;=2000 and (type=0 or type=10) and source in(0,2)
        <if test="userId != null">
            and tr.user_id = #{userId}
        </if>


    </select>


    <select id="selectUserInvestmentWeeklyReport" parameterType="map" resultType="map">
        SELECT
        a.investmentType,
        a.daysProject,
        a.limit_days,
        CASE a.daysProject
        WHEN '新手标' THEN
        (
        IFNULL(
        (
        SELECT
        sum(t.amount)
        FROM
        `trade_record` t
        LEFT JOIN user u ON t.`user_id` = u.id
        WHERE
        t.`type` = 0
        AND t.`source` = 2
        AND date_format(t.`time`, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
        AND date_format(#{endDate}, '%Y-%m-%d')
        AND u.`status` =0
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>
        ),
        0
        )
        )
        ELSE

        a.totalAmount
        END AS totalAmount,


        CASE a.daysProject
        WHEN '新手标' THEN
        (
        IFNULL(
        (
        SELECT
        sum(t.amount)
        FROM
        `trade_record` t
        LEFT JOIN user u ON t.`user_id` = u.id
        WHERE
        t.`type` = 0
        AND t.`source` = 2
        AND date_format(t.`time`, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
        AND date_format(#{endDate}, '%Y-%m-%d')
        AND u.`status` =0
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>
        ),
        0
        )
        )
        ELSE

        a.totalAmountPc
        END AS totalAmountPc,
        CASE a.daysProject
        WHEN '新手标' THEN
        (
        IFNULL(
        (
        SELECT
        sum(t.amount)
        FROM
        `trade_record` t
        LEFT JOIN user u ON t.`user_id` = u.id
        WHERE
        t.`type` = 0
        AND t.`source` = 2
        AND date_format(t.`time`, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
        AND date_format(#{endDate}, '%Y-%m-%d')
        AND u.`status` =0
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>
        ),
        0
        )
        )
        ELSE

        a.totalAmountAd
        END AS totalAmountAd,
        CASE a.daysProject
        WHEN '新手标' THEN
        (
        IFNULL(
        (
        SELECT
        sum(t.amount)
        FROM
        `trade_record` t
        LEFT JOIN user u ON t.`user_id` = u.id
        WHERE
        t.`type` = 0
        AND t.`source` = 2
        AND date_format(t.`time`, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
        AND date_format(#{endDate}, '%Y-%m-%d')
        AND u.`status` =0
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>
        ),
        0
        )
        )
        ELSE

        a.totalAmountIOS
        END AS totalAmountIOS
        FROM
        (
        SELECT i.terminal,
        p.limit_days,
        CASE t.`type`
        WHEN 0 THEN
        '直投投资'
        WHEN 6 THEN
        '认购债权'
        ELSE
        '活转定'
        END AS investmentType,
        SUM(case when i.terminal=0 then t.amount else 0 end ) totalAmountPc,
        SUM(case when i.terminal=1 then t.amount else 0 end ) totalAmountAd,
        SUM(case when i.terminal=2 then t.amount else 0 end ) totalAmountIOS,
        SUM( t.amount ) totalAmount,
        CASE p.`limit_days`
        WHEN 7 THEN
        '7天新手标'
        WHEN 28 THEN
        '28天新手标'
        WHEN 14 THEN
        '14天项目'
        WHEN 30 THEN
        '30天项目'
        WHEN 90 THEN
        '90天项目'
        WHEN 180 THEN
        '180天项目'
        WHEN 270 THEN
        '270天项目'
        WHEN 365 THEN
        '365天项目'
        ELSE
        '未知项目天数'
        END AS daysProject
        FROM
        trade_record t
        LEFT JOIN investment i ON t.other_id = i.id
        LEFT JOIN project p ON p.id = i.project_id
        LEFT JOIN user u ON u.id = t.`user_id`
        WHERE
        t.type IN (0, 6, 10)
        AND t.source in (0,2,4)
        and t.table_name ='investment'
        AND u.status =0
        AND date_format(t.`time`, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
        AND date_format(#{endDate}, '%Y-%m-%d')
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>

        GROUP BY
        t.type,
        p.limit_days
        ) a;


    </select>

    <select id="selectNewUserHuoTotalAmount" parameterType="map" resultType="map">
        SELECT SUM(t.amount) totalAmount,
        sum(case when terminal = 0 then t.amount else 0 end) totalAmountPc,
        sum(case when terminal = 1 then t.amount else 0 end) totalAmountAd,
        sum(case when terminal = 2 then t.amount else 0 end) totalAmountIOS
        FROM
        trade_record t
        LEFT JOIN investment i ON t.other_id = i.id
        LEFT JOIN project p ON p.id = i.project_id
        WHERE
        t.type = 0
        AND t.source = 1
        <if test="type == 1">
            AND t.user_id IN (
            SELECT
            u.id
            FROM
            user u
            WHERE
            date_format(u.register_time, '%Y-%m-%d') BETWEEN date_format(#{startDate}, '%Y-%m-%d')
            AND date_format(#{endDate}, '%Y-%m-%d') and u.status =0
            )
        </if>
    </select>

    <select id="hourReport" parameterType="string" resultType="map">
	    select time.rownum+1 time,ifnull(trade_record.amount,0) amount
		from (
			SELECT @rownum:=@rownum+1 AS rownum
			FROM (SELECT @rownum:=-1) r ,user
			where @rownum &lt; 23
		)time
		left join (
			SELECT
		            date_format(tr.create_date, '%H') time,
		            sum(amount) / 7         amount
		        FROM trade_record tr
		        inner join user u on tr.user_id = u.id
		        <if test="adminId != null ">
					inner join admin_responsible 
						on admin_responsible.admin_id=${adminId} 
						and admin_responsible.department_id=u.department_id
			    </if>
			    <if test="departmentId != null">
			    	inner join department_relation
						on department_relation.department_id=${departmentId} 
						and department_relation.sub_department_id=u.department_id
			    </if>
		        WHERE u.status = 0 AND tr.aoe_type in(${aoeType}) AND
		              tr.create_date BETWEEN date_sub(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE()
		        GROUP BY date_format(tr.create_date, '%H')
		)trade_record on trade_record.time=time.rownum
		order by rownum
		
    </select>

<!-- 
    	SELECT
            date_format(tr.create_date, '%H') time,
            sum(amount) / 7         amount
        FROM trade_record tr, user u
        WHERE tr.user_id = u.id AND u.status = 0 AND tr.aoe_type = #{aoeType} AND
              tr.create_date BETWEEN date_sub(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE()
        GROUP BY date_format(tr.create_date, '%H') -->
    <select id="getTodayRedeemAmount" parameterType="int" resultType="double">
        SELECT sum(CASE WHEN tr.type = 10
            THEN -tr.amount + IFNULL(hb.amount, 0)
                   WHEN tr.type = 7
                       THEN tr.amount
                   ELSE 0 END)
        FROM trade_record tr LEFT JOIN investment inv ON inv.id = tr.other_id
            LEFT JOIN hongbao hb ON hb.id = inv.hongbao_id
        WHERE tr.user_id = #{userId} AND tr.type IN (7, 10) AND to_days(tr.create_date) = TO_DAYS(NOW())
    </select>

    <select id="getHuoTradeList" parameterType="map" resultType="map">
        SELECT * from trade_record where user_id=#{userId} and
        (
        <if test="type == null">
            (type=0 and source=1) or (type=7) or (type=10)
        </if>
        <if test="type == 0">
            (type=0 and source=1)
        </if>
        <if test="type == 1">
            (type=7)
        </if>
        <if test="type == 2">
            (type=10)
        </if>
        )
        <if test="startTime != null and endTime != null">
            and date_format(time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d')
            AND date_format(#{endTime}, '%Y-%m-%d')
        </if>
        <if test="startTime != null and endTime == null">
            and time &gt;= #{startTime}
        </if>
        <if test="endTime != null and startTime == null">
            and time &lt;= #{endTime}
        </if>
        order by time desc
        limit #{start},#{limit}
    </select>

    <select id="getHuoTradeListCount" parameterType="map" resultType="int">
        SELECT count(id) from trade_record where user_id=#{userId} and
        (
        <if test="type == null">
            (type=0 and source=1) or (type=7) or (type=10)
        </if>
        <if test="type == 0">
            (type=0 and source=1)
        </if>
        <if test="type == 1">
            (type=7)
        </if>
        <if test="type == 2">
            (type=10)
        </if>
        )
        <if test="startTime != null and endTime != null">
            and date_format(time, '%Y-%m-%d') BETWEEN date_format(#{startTime}, '%Y-%m-%d')
            AND date_format(#{endTime}, '%Y-%m-%d')
        </if>
        <if test="startTime != null and endTime == null">
            and time &gt;= #{startTime}
        </if>
        <if test="endTime != null and startTime == null">
            and time &lt;= #{endTime}
        </if>
    </select>

    <select id="selectAccumulatedIncome" parameterType="int" resultType="map">
        SELECT
            IFNULL(sum(CASE WHEN (t.type = 3 AND (t.source = 0 OR t.source = 5))
                THEN t.amount
                       ELSE 0 END), 0) 'regularAmount',
            IFNULL(sum(CASE WHEN (t.type = 3 AND t.source = 1)
                THEN t.amount
                       ELSE 0 END), 0) 'huoAmount',
            IFNULL(c.amount, 0)        'hongbaoAmount',
            IFNULL(coupon.amount, 0)        'rateCouponAmount',
            IFNULL(yyy.amount, 0)        'yyyIncome',
            IFNULL(sum(CASE WHEN t.type = 11
                THEN t.amount
                       ELSE 0 END), 0) 'signAmount'
        FROM trade_record t, (
                                 SELECT sum(h.amount) amount
                                 FROM hongbao h
                                 WHERE use_time IS NOT NULL AND user_id = #{userId}
                             ) c,
                             (
                             	SELECT SUM(income) amount FROM rate_coupon WHERE type = 3
                             	AND user_id = #{userId} AND use_time IS NOT NULL AND has_dividended = 1
                             ) coupon,
                             (
                             	SELECT IFNULL(SUM(amount),0) amount FROM trade_record WHERE type = 3 AND source = 9
                             	AND user_id = #{userId}
                             ) yyy
        WHERE t.user_id = #{userId}
    </select>

    <select id="getHongbaoAmountByMonth" parameterType="map" resultType="double">
        SELECT sum(amount)
        FROM trade_record tr
        WHERE tr.type = 11 AND date_format(time, '%Y-%m') = date_format(#{date }, '%Y-%m')
    </select>

    <select id="selectAllAmountSource" parameterType="map" resultType="double">
        SELECT SUM(amount)
        FROM trade_record
        WHERE type = 3 AND source IN (0, 1, 2, 4, 5, 6, 7) AND user_id = #{userId}
    </select>


    <select id="queryInvestRecodeByDate" parameterType="map" resultType="com.goochou.p2b.model.vo.TradeRecordVO">

		SELECT
			a.user_id,
			a.true_name,
			amount,
			time,
			usr.true_name username,
			source,
			type
		FROM
			(
				SELECT
					cl.user_id,
					ua.true_name
				FROM
					user_admin ua
				INNER JOIN admin_role ar ON ar.admin_id = ua.id
				AND role_id = 18
				INNER JOIN customer_list cl ON ua.id = cl.admin_id
			) a
		INNER JOIN trade_record tr ON a.user_id = tr.user_id
		INNER JOIN user usr on usr.id = a.user_id
		AND amount &gt;= #{amount}
		AND source IN (0, 2, 5)
		AND type IN (0, 10)
		and time &gt;= #{date}
		order by time desc
    </select>

    <insert id="insertBatch" parameterType="list">

        INSERT INTO `trade_record`
        (
        	`id`,
        	`user_id`,
        	`other_id`,
        	`table_name`,
        	`type`,
        	`source`,
        	`time`,
        	`amount`,
        	`huo_balance`,
        	`balance`,
        	`reamk`
        )
        VALUES
        	<foreach collection="list" item="record" separator=",">
        		(
		        	null,
		        	#{record.userId},
		        	#{record.otherId},
		        	#{record.tableName},
		        	#{record.type},
		        	#{record.source},
		        	now(),
		        	#{record.amount},
		        	NULL,
		        	#{record.balance},
		        	#{record.reamk}
		        )
          	</foreach>

    </insert>



    <select id="queryTradeRecordInfoByHour" parameterType="map" resultType="com.goochou.p2b.model.vo.ActivityDataVO">

    	select hour(time) hour, count(1) count from trade_record
		where source in
		(
		<foreach collection="source" item="item" separator=",">
			#{item}
		</foreach>
		)
		and type in
		(
		<foreach collection="types" item="item" separator=",">
			#{item}
		</foreach>
		)
		and time &gt;= #{date} and time &lt;= #{endDate}
		and user_id

		${inStr}

		(select id from user where register_time &gt;= #{date} and register_time &lt;= #{endDate}) group by hour

    </select>

    <select id="queryTradeRecordInfoByAge" parameterType="map" resultType="com.goochou.p2b.model.vo.ActivityDataVO">

    	select t2.age, t2.count from (
		select t.*, timestampdiff(year, substr(ua.identification_no, 7, 8), current_date()) age, count(1) count from (
		select user_id  from trade_record
		where source in
		(
		<foreach collection="source" item="item" separator=",">
			#{item}
		</foreach>
		)
		and type in
		(
		<foreach collection="types" item="item" separator=",">
			#{item}
		</foreach>
		)
		and time &gt;= #{date}  and time &lt;= #{endDate}
		and user_id

		${inStr}

		(select id from user where register_time &gt;= #{date} and register_time &lt;= #{endDate}) ) t
		inner join
		user_authentication ua
		on t.user_id = ua.user_id
		where ua.status = 1 group by age) t2;

    </select>

    <select id="queryTradeRecordInfoByArea" parameterType="map" resultType="com.goochou.p2b.model.vo.ActivityDataVO">

    	SELECT t2.area, t2.count FROM (
		SELECT t.*, CASE substr(ua.identification_no, 1, 2) WHEN 11 THEN '北京' WHEN 12 THEN '天津' WHEN 13 THEN '河北' WHEN 14 THEN '山西' WHEN 15 THEN '内蒙古' WHEN 21 THEN '辽宁' WHEN 22 THEN '吉林' WHEN 23 THEN '黑龙江' WHEN 31 THEN '上海' WHEN 32 THEN '江苏' WHEN 33 THEN '浙江' WHEN 34 THEN '安徽' WHEN 35 THEN '福建' WHEN 36 THEN '江西' WHEN 37 THEN '山东' WHEN 41 THEN '河南' WHEN 42 THEN '湖北' WHEN 43 THEN '湖南' WHEN 44 THEN '广东' WHEN 45 THEN '广西' WHEN 46 THEN '海南' WHEN 50 THEN '重庆' WHEN 51 THEN '四川' WHEN 52 THEN '贵州' WHEN 53 THEN '云南' WHEN 54 THEN '西藏' WHEN 61 THEN '陕西' WHEN 62 THEN '甘肃' WHEN 63 THEN '青海' WHEN 64 THEN '宁夏' WHEN 65 THEN '新疆' WHEN 71 THEN '台湾' WHEN 81 THEN '香港' WHEN 82 THEN '澳门' ELSE '其他' END area,
		count(1) count
		FROM (
		SELECT user_id FROM trade_record WHERE source IN
		(
		<foreach collection="source" item="item" separator=",">
			#{item}
		</foreach>
		)
		and type in
		(
		<foreach collection="types" item="item" separator=",">
			#{item}
		</foreach>
		)
		AND time &gt;= #{date} and time &lt;= #{endDate} AND user_id

		${inStr}

		( SELECT id FROM user WHERE register_time &gt;= #{date} and register_time &lt;= #{endDate})) t
		INNER JOIN user_authentication ua ON t.user_id = ua.user_id WHERE ua. STATUS = 1 GROUP BY area ) t2 order by count desc limit 10

    </select>


    <select id="sumAmountByType" parameterType="map" resultType="Double">
    	select sum(amount) sum from trade_record where user_id = #{userId} and type = #{type};
    </select>

    <select id="queryTradeRecord" parameterType="map" resultType="map">
    select c.true_name as name,
           e.code code,
           d.id uid ,
           d.register_time regtime,
           case when a.type=0 then '投资' when a.type=1 then '充值' when a.type=2 then '提现' when a.type=4 then '回款' when a.type=5 then '债转' end type ,
		   a.time ctime,
		   case when a.type=0 then  DATE_ADD(g.deadline,INTERVAL g.limit_days DAY) end retime,
		   a.amount amount,
		   case when a.type=0 then 	TRUNCATE(f.amount*g.limit_days/365,2) ELSE 0 end amounts,
           case when a.type=0 and h.investmentId=a.other_id then '是' else '否' end isa
		 from trade_record a
			left join customer_list b on a.user_id=b.user_id
			left join user_admin c on b.admin_id=c.id
			left join `user` d on a.user_id=d.id
			left JOIN wx_activity e on a.user_id=e.user_id
			left join investment f on a.other_id=f.id
			left join project g on f.project_id=g.id and g.project_type!=2
			left join (select user_id,min(id) investmentId from investment GROUP BY user_id) h on a.type=0 and a.user_id=h.user_id
			where a.type in (0,1,2,4,5)
		  <if test="startTime != null and startTime !=''">
		   and a.time &gt;= #{startTime}
		  </if>
		  <if test="endTime != null and endTime != ''">
		   and a.time &lt;= #{endTime}
		  </if>
		  <if test="trueName != null and !trueName.isEmpty()">
		   and c.true_name like '%${trueName}%'
		  </if>
		  order by a.time desc
		   <if test="start != null">
		   limit #{start},#{limit}
		  </if>
    </select>
    <select id="queryTradeRecordCount" parameterType="map" resultType="int">
         select count(*)
		 from trade_record a
			left join customer_list b on a.user_id=b.user_id
			left join user_admin c on b.admin_id=c.id
			left join `user` d on a.user_id=d.id
			left JOIN wx_activity e on a.user_id=e.user_id
			left join investment f on a.other_id=f.id
			left join project g on f.project_id=g.id and g.project_type!=2
			left join (select user_id,min(id) investmentId from investment GROUP BY user_id) h on a.type=0 and a.user_id=h.user_id
			where a.type in (0,1,2,4,5)
		 <if test="startTime != null and startTime !=''">
		   and a.time &gt;= #{startTime}
		  </if>
		  <if test="endTime != null and endTime != ''">
		   and a.time &lt;= #{endTime}
		  </if>
		  <if test="trueName != null and !trueName.isEmpty()">
		   and c.true_name like '%${trueName}%'
		  </if>
    </select>

    <select id="queryUserTradeRecord" parameterType="map" resultType="com.goochou.p2b.model.vo.TransactionRecordVO">
        SELECT
            t1.id,
            t1.table_name,
            t1.other_id,
            t1.aoe_type,
            t1.amount,
            t1.balance_amount,
            t1.frozen_amount,
            t1.credit_amount,
            t1.frozen_credit_amount,
            date_format(t1.create_date, '%Y-%m-%d %H:%i:%S') create_date,
            date_format(t1.update_date, '%Y-%m-%d %H:%i:%S') update_date,
            t1.account_type_id,
            t1.account_operate_type_id,
            t1.user_id,
            t2.true_name,
            t2.phone,
            t2.department_id
        FROM
        trade_record t1
        INNER JOIN `user` t2
        ON t2.id = t1.user_id
      <if test="adminId != null ">
	 	inner join admin_responsible 
	  	on admin_responsible.admin_id=${adminId} 
	  	and admin_responsible.department_id=t2.department_id
	  </if>
	  <if test="departmentId != null">
    	inner join department_relation
			on department_relation.department_id=${departmentId} 
			and department_relation.sub_department_id=t2.department_id
      </if>
      <if test="id != null and id != ''">
        and t1.id = #{id}
      </if>
        <if test="userId != null and userId != ''">
          and t1.user_id = #{userId}
        </if>
        <if test="aoeType != null and aoeType != ''">
          and t1.aoe_type = #{aoeType}
        </if>
        <if test="aoeTypes != null and aoeTypes != ''">
          and t1.aoe_type in ('${aoeTypes}')
        </if>
        <if test="startTime != null and startTime != ''">
          and t1.create_date &gt;= #{startTime}
        </if>
        <if test="endTime != null and endTime != ''">
          and t1.create_date &lt;= #{endTime}
        </if>
        <if test="keyword != null and keyword != ''">
          and (t2.username like '%${keyword}%' or t2.true_name like '%${keyword}%' or t2.phone like '%${keyword}%')
        </if>
        <if test="accountTypeIds != null and accountTypeIds != ''">
          and t1.account_type_id in (${accountTypeIds})
        </if>
        <if test="accountOperateTypeIds != null and accountOperateTypeIds != ''">
          and t1.account_operate_type_id in (${accountOperateTypeIds})
        </if>
        ORDER BY t1.id DESC
        <if test="start != null and end != null">
            limit ${start} , ${end}
        </if>
    </select>

  <select id="queryUserTradeRecordCount" parameterType="map" resultType="int">
    SELECT count(1) FROM
      trade_record t1
    INNER JOIN `user` t2
    ON t2.id = t1.user_id
      <if test="adminId != null ">
		inner join admin_responsible 
		on admin_responsible.admin_id=${adminId} 
		and admin_responsible.department_id=t2.department_id
	  </if>
	  <if test="departmentId != null">
    	inner join department_relation
			on department_relation.department_id=${departmentId} 
			and department_relation.sub_department_id=t2.department_id
      </if>
      <if test="userId != null and userId != ''">
          and t1.user_id = #{userId}
      </if>
      <if test="aoeType != null and aoeType != ''">
          and t1.aoe_type = #{aoeType}
      </if>
      <if test="startTime != null and startTime != ''">
          and t1.create_date &gt;= #{startTime}
      </if>
      <if test="endTime != null and endTime != ''">
          and t1.create_date &lt;= #{endTime}
      </if>
      <if test="keyword != null and keyword != ''">
          and (t2.username like '%${keyword}%' or t2.true_name like '%${keyword}%' or t2.phone like '%${keyword}%')
      </if>
      <if test="accountTypeIds != null and accountTypeIds != ''">
          and t1.account_type_id in (${accountTypeIds})
      </if>
      <if test="accountOperateTypeIds != null and accountOperateTypeIds != ''">
          and t1.account_operate_type_id in (${accountOperateTypeIds})
      </if>
  </select>

    <select id="queryUserTradeSumAmount" parameterType="map" resultType="double">
        SELECT IFNULL(sum(amount),0) FROM trade_record
        where user_id = #{userId}
        <if test="accountTypeId != null and accountTypeId != ''">
            and account_type_id in (${accountTypeId})
        </if>
        <if test="accountOperateTypeId != null and accountOperateTypeId != ''">
            and account_operate_type_id in (${accountOperateTypeId})
        </if>
        <if test="startTime != null and startTime != ''">
          and create_date &gt;= #{startTime}
        </if>
        <if test="endTime != null and endTime != ''">
          and create_date &lt;= #{endTime}
        </if>
    </select>

	<select id="listReturnDetailByPage" resultType="map">
		select
			s1.*,ao.app_description
		from
			(SELECT
				tr.id,
				tr.amount,
				tr.aoe_type,
				tr.account_operate_type_id,
				date_format( tr.create_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no 
			FROM
				trade_record tr
				inner JOIN investment i ON i.id = tr.other_id  and tr.table_name='investment'
			WHERE
				tr.account_type_id = 2
				
			union all
			
			select
				goir.id,
				goir.amount,
				case when goir.table_type=1 then 'goodsorder_credit_subtract'
						 when goir.table_type=2 then 'vip_dividend_credit_subtract'
				end as aoe_type,
				'2' as account_operate_type_id,
				date_format( goir.create_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no
			from investment i
				inner join t_goods_order_invest_relation goir ON i.id = goir.invest_id	
			where 1 = 1
		
			union all
			
			select
				goir.id,
				goir.amount,
				case when goir.table_type=1 then 'goodsorder_refund_credit_add'
						 when goir.table_type=2 then null
				end as aoe_type,
				'1' account_operate_type_id,
				date_format( goir.update_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no
			from investment i
				inner join t_goods_order_invest_relation goir ON i.id = goir.invest_id	
			where 1 = 1
				and goir.state = 2 ) s1
		left join account_operate ao on s1.aoe_type = ao.feature_name
		where s1.order_no = #{orderNo}
		order by s1.create_date desc
		<if test="limitStart != null and limitEnd != null">
			limit ${limitStart} , ${limitEnd}
		</if>
	</select>

	<select id="countReturnDetail" resultType="int">
		select count(1) from
			(SELECT
				tr.id,
				tr.amount,
				tr.aoe_type,
				tr.account_operate_type_id,
				date_format( tr.create_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no 
			FROM
				trade_record tr
				inner JOIN investment i ON i.id = tr.other_id  and tr.table_name='investment'
			WHERE
				tr.account_type_id = 2
				
			union all
			
			select
				goir.id,
				goir.amount,
				case when goir.table_type=1 then 'goodsorder_credit_subtract'
						 when goir.table_type=2 then 'vip_dividend_credit_subtract'
				end as aoe_type,
				'2' as account_operate_type_id,
				date_format( goir.create_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no
			from investment i
				inner join t_goods_order_invest_relation goir ON i.id = goir.invest_id	
			where 1 = 1
		
			union all
			
			select
				goir.id,
				goir.amount,
				case when goir.table_type=1 then 'goodsorder_refund_credit_add'
						 when goir.table_type=2 then null
				end as aoe_type,
				'1' account_operate_type_id,
				date_format( goir.update_date, '%Y-%m-%d %H:%i:%S' ) AS create_date,
				i.order_no
			from investment i
				inner join t_goods_order_invest_relation goir ON i.id = goir.invest_id	
			where 1 = 1
				and goir.state = 2 ) s1
		left join account_operate ao on s1.aoe_type = ao.feature_name
		where s1.order_no = #{orderNo}
	</select>

  <select id="customDetailOfFunds" resultType="map" parameterType="string">
      SELECT
        (@i := @i + 1) num,
        assets_snapshot.*
      FROM(
      	SELECT assets_snapshot.*, user.true_name cus_name, user.phone 
        FROM ${tableName} assets_snapshot
        INNER JOIN `user`  ON user.id = assets_snapshot.user_id
        <if test="adminId != null ">
			inner join admin_responsible 
				on admin_responsible.admin_id=${adminId} 
				and admin_responsible.department_id=user.department_id
	    </if>
	    <if test="departmentId != null">
	    	inner join department_relation
				on department_relation.department_id=${departmentId} 
				and department_relation.sub_department_id=user.department_id
	    </if>
      ) assets_snapshot, (SELECT @i := 0) temp
  </select>


  <select id="customDetailOfFundsSum" resultType="map" parameterType="string">
    SELECT
      IFNULL(SUM(assets_snapshot.balance_amount),0) balance_amount,
      IFNULL(SUM(assets_snapshot.frozen_amount),0) frozen_amount,
      IFNULL(SUM(assets_snapshot.credit_amount),0) credit_amount,
      IFNULL(SUM(assets_snapshot.freozen_credit_amount),0) freozen_credit_amount
    FROM
      ${tableName} assets_snapshot
      INNER JOIN `user`  ON user.id = assets_snapshot.user_id
	<if test="adminId != null ">
		inner join admin_responsible 
			on admin_responsible.admin_id=${adminId} 
			and admin_responsible.department_id=user.department_id
    </if>
    <if test="departmentId != null">
    	inner join department_relation
			on department_relation.department_id=${departmentId} 
			and department_relation.sub_department_id=user.department_id
    </if>
  </select>

</mapper>

