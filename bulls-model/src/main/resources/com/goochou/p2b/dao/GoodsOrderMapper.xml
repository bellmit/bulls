<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.GoodsOrderMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.goods.GoodsOrder">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
    <result column="count" jdbcType="INTEGER" property="count" />
    <result column="total_money" jdbcType="DECIMAL" property="totalMoney" />
    <result column="real_pay_money" jdbcType="DECIMAL" property="realPayMoney" />
    <result column="balance_pay_money" jdbcType="DECIMAL" property="balancePayMoney" />
    <result column="credit_pay_money" jdbcType="DECIMAL" property="creditPayMoney" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="is_hidden" jdbcType="INTEGER" property="isHidden" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="hongbao_id" jdbcType="INTEGER" property="hongbaoId" />
    <result column="hongbao_money" jdbcType="DECIMAL" property="hongbaoMoney" />
    <result column="client" jdbcType="VARCHAR" property="client" />
    <result column="express" jdbcType="VARCHAR" property="express" />
    <result column="express_num" jdbcType="VARCHAR" property="expressNum" />
    <result column="express_fee" jdbcType="DECIMAL" property="expressFee" />
    <result column="real_express_fee" jdbcType="DECIMAL" property="realExpressFee" />
    <result column="delivery_date" jdbcType="TIMESTAMP" property="deliveryDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="addressee_name" jdbcType="VARCHAR" property="addresseeName" />
    <result column="addressee_phone" jdbcType="VARCHAR" property="addresseePhone" />
    <result column="addressee_detail" jdbcType="VARCHAR" property="addresseeDetail" />
 	<collection property="goodsOrderDetail"  column="id"  ofType="com.goochou.p2b.model.goods.GoodsOrderDetail"
		select="com.goochou.p2b.dao.GoodsOrderDetailMapper.getGoodsOrderDetailByOrderId"/>
    
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_id, order_no, count, total_money, real_pay_money, balance_pay_money, credit_pay_money, 
    state, is_hidden, create_date, hongbao_id, hongbao_money, client, express, express_num, 
    express_fee, real_express_fee, delivery_date, update_date, addressee_name, addressee_phone, 
    addressee_detail
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.goods.GoodsOrderExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_goods_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from t_goods_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_goods_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.goods.GoodsOrderExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_goods_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.goods.GoodsOrder" useGeneratedKeys="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_goods_order (user_id, order_no, count, 
      total_money, real_pay_money, balance_pay_money, 
      credit_pay_money, state, is_hidden, 
      create_date, hongbao_id, hongbao_money, 
      client, express, express_num, 
      express_fee, real_express_fee, delivery_date, 
      update_date, addressee_name, addressee_phone, 
      addressee_detail)
    values (#{userId,jdbcType=INTEGER}, #{orderNo,jdbcType=VARCHAR}, #{count,jdbcType=INTEGER}, 
      #{totalMoney,jdbcType=DECIMAL}, #{realPayMoney,jdbcType=DECIMAL}, #{balancePayMoney,jdbcType=DECIMAL}, 
      #{creditPayMoney,jdbcType=DECIMAL}, #{state,jdbcType=INTEGER}, #{isHidden,jdbcType=INTEGER}, 
      #{createDate,jdbcType=TIMESTAMP}, #{hongbaoId,jdbcType=INTEGER}, #{hongbaoMoney,jdbcType=DECIMAL}, 
      #{client,jdbcType=VARCHAR}, #{express,jdbcType=VARCHAR}, #{expressNum,jdbcType=VARCHAR}, 
      #{expressFee,jdbcType=DECIMAL}, #{realExpressFee,jdbcType=DECIMAL}, #{deliveryDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{addresseeName,jdbcType=VARCHAR}, #{addresseePhone,jdbcType=VARCHAR}, 
      #{addresseeDetail,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.goods.GoodsOrder">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_goods_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="count != null">
        count,
      </if>
      <if test="totalMoney != null">
        total_money,
      </if>
      <if test="realPayMoney != null">
        real_pay_money,
      </if>
      <if test="balancePayMoney != null">
        balance_pay_money,
      </if>
      <if test="creditPayMoney != null">
        credit_pay_money,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="isHidden != null">
        is_hidden,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="hongbaoId != null">
        hongbao_id,
      </if>
      <if test="hongbaoMoney != null">
        hongbao_money,
      </if>
      <if test="client != null">
        client,
      </if>
      <if test="express != null">
        express,
      </if>
      <if test="expressNum != null">
        express_num,
      </if>
      <if test="expressFee != null">
        express_fee,
      </if>
      <if test="realExpressFee != null">
        real_express_fee,
      </if>
      <if test="deliveryDate != null">
        delivery_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="addresseeName != null">
        addressee_name,
      </if>
      <if test="addresseePhone != null">
        addressee_phone,
      </if>
      <if test="addresseeDetail != null">
        addressee_detail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        #{count,jdbcType=INTEGER},
      </if>
      <if test="totalMoney != null">
        #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="realPayMoney != null">
        #{realPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="balancePayMoney != null">
        #{balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="creditPayMoney != null">
        #{creditPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="isHidden != null">
        #{isHidden,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hongbaoId != null">
        #{hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoMoney != null">
        #{hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="client != null">
        #{client,jdbcType=VARCHAR},
      </if>
      <if test="express != null">
        #{express,jdbcType=VARCHAR},
      </if>
      <if test="expressNum != null">
        #{expressNum,jdbcType=VARCHAR},
      </if>
      <if test="expressFee != null">
        #{expressFee,jdbcType=DECIMAL},
      </if>
      <if test="realExpressFee != null">
        #{realExpressFee,jdbcType=DECIMAL},
      </if>
      <if test="deliveryDate != null">
        #{deliveryDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="addresseeName != null">
        #{addresseeName,jdbcType=VARCHAR},
      </if>
      <if test="addresseePhone != null">
        #{addresseePhone,jdbcType=VARCHAR},
      </if>
      <if test="addresseeDetail != null">
        #{addresseeDetail,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.goods.GoodsOrderExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from t_goods_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods_order
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.count != null">
        count = #{record.count,jdbcType=INTEGER},
      </if>
      <if test="record.totalMoney != null">
        total_money = #{record.totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.realPayMoney != null">
        real_pay_money = #{record.realPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.balancePayMoney != null">
        balance_pay_money = #{record.balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.creditPayMoney != null">
        credit_pay_money = #{record.creditPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.isHidden != null">
        is_hidden = #{record.isHidden,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.hongbaoId != null">
        hongbao_id = #{record.hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="record.hongbaoMoney != null">
        hongbao_money = #{record.hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="record.client != null">
        client = #{record.client,jdbcType=VARCHAR},
      </if>
      <if test="record.express != null">
        express = #{record.express,jdbcType=VARCHAR},
      </if>
      <if test="record.expressNum != null">
        express_num = #{record.expressNum,jdbcType=VARCHAR},
      </if>
      <if test="record.expressFee != null">
        express_fee = #{record.expressFee,jdbcType=DECIMAL},
      </if>
      <if test="record.realExpressFee != null">
        real_express_fee = #{record.realExpressFee,jdbcType=DECIMAL},
      </if>
      <if test="record.deliveryDate != null">
        delivery_date = #{record.deliveryDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.addresseeName != null">
        addressee_name = #{record.addresseeName,jdbcType=VARCHAR},
      </if>
      <if test="record.addresseePhone != null">
        addressee_phone = #{record.addresseePhone,jdbcType=VARCHAR},
      </if>
      <if test="record.addresseeDetail != null">
        addressee_detail = #{record.addresseeDetail,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods_order
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      count = #{record.count,jdbcType=INTEGER},
      total_money = #{record.totalMoney,jdbcType=DECIMAL},
      real_pay_money = #{record.realPayMoney,jdbcType=DECIMAL},
      balance_pay_money = #{record.balancePayMoney,jdbcType=DECIMAL},
      credit_pay_money = #{record.creditPayMoney,jdbcType=DECIMAL},
      state = #{record.state,jdbcType=INTEGER},
      is_hidden = #{record.isHidden,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      hongbao_id = #{record.hongbaoId,jdbcType=INTEGER},
      hongbao_money = #{record.hongbaoMoney,jdbcType=DECIMAL},
      client = #{record.client,jdbcType=VARCHAR},
      express = #{record.express,jdbcType=VARCHAR},
      express_num = #{record.expressNum,jdbcType=VARCHAR},
      express_fee = #{record.expressFee,jdbcType=DECIMAL},
      real_express_fee = #{record.realExpressFee,jdbcType=DECIMAL},
      delivery_date = #{record.deliveryDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      addressee_name = #{record.addresseeName,jdbcType=VARCHAR},
      addressee_phone = #{record.addresseePhone,jdbcType=VARCHAR},
      addressee_detail = #{record.addresseeDetail,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.goods.GoodsOrder">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods_order
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="count != null">
        count = #{count,jdbcType=INTEGER},
      </if>
      <if test="totalMoney != null">
        total_money = #{totalMoney,jdbcType=DECIMAL},
      </if>
      <if test="realPayMoney != null">
        real_pay_money = #{realPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="balancePayMoney != null">
        balance_pay_money = #{balancePayMoney,jdbcType=DECIMAL},
      </if>
      <if test="creditPayMoney != null">
        credit_pay_money = #{creditPayMoney,jdbcType=DECIMAL},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="isHidden != null">
        is_hidden = #{isHidden,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="hongbaoId != null">
        hongbao_id = #{hongbaoId,jdbcType=INTEGER},
      </if>
      <if test="hongbaoMoney != null">
        hongbao_money = #{hongbaoMoney,jdbcType=DECIMAL},
      </if>
      <if test="client != null">
        client = #{client,jdbcType=VARCHAR},
      </if>
      <if test="express != null">
        express = #{express,jdbcType=VARCHAR},
      </if>
      <if test="expressNum != null">
        express_num = #{expressNum,jdbcType=VARCHAR},
      </if>
      <if test="expressFee != null">
        express_fee = #{expressFee,jdbcType=DECIMAL},
      </if>
      <if test="realExpressFee != null">
        real_express_fee = #{realExpressFee,jdbcType=DECIMAL},
      </if>
      <if test="deliveryDate != null">
        delivery_date = #{deliveryDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="addresseeName != null">
        addressee_name = #{addresseeName,jdbcType=VARCHAR},
      </if>
      <if test="addresseePhone != null">
        addressee_phone = #{addresseePhone,jdbcType=VARCHAR},
      </if>
      <if test="addresseeDetail != null">
        addressee_detail = #{addresseeDetail,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.goods.GoodsOrder">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods_order
    set user_id = #{userId,jdbcType=INTEGER},
      order_no = #{orderNo,jdbcType=VARCHAR},
      count = #{count,jdbcType=INTEGER},
      total_money = #{totalMoney,jdbcType=DECIMAL},
      real_pay_money = #{realPayMoney,jdbcType=DECIMAL},
      balance_pay_money = #{balancePayMoney,jdbcType=DECIMAL},
      credit_pay_money = #{creditPayMoney,jdbcType=DECIMAL},
      state = #{state,jdbcType=INTEGER},
      is_hidden = #{isHidden,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      hongbao_id = #{hongbaoId,jdbcType=INTEGER},
      hongbao_money = #{hongbaoMoney,jdbcType=DECIMAL},
      client = #{client,jdbcType=VARCHAR},
      express = #{express,jdbcType=VARCHAR},
      express_num = #{expressNum,jdbcType=VARCHAR},
      express_fee = #{expressFee,jdbcType=DECIMAL},
      real_express_fee = #{realExpressFee,jdbcType=DECIMAL},
      delivery_date = #{deliveryDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      addressee_name = #{addresseeName,jdbcType=VARCHAR},
      addressee_phone = #{addresseePhone,jdbcType=VARCHAR},
      addressee_detail = #{addresseeDetail,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
 <!--  &lt;resultMap id="queryGoodsOrderForListMap" extends="BaseResultMap"  type="com.goochou.p2b.model.goods.GoodsOrder"&gt;
         
        &lt;collection property="goodsDetails" column="id"  ofType="com.goochou.p2b.model.goods.GoodsOrderDetail"
		select="com.goochou.p2b.dao.GoodsPictureMapper.getGoodsPictureByGoodsId"/&gt;
  &lt;/resultMap&gt;
  -->
  
  
 <!--  &amp;lt;resultMap id="queryGoodsOrderForListMap" extends="BaseResultMap"  type="com.goochou.p2b.model.goods.GoodsOrder"&amp;gt;
         
        &amp;lt;collection property="goodsDetails" column="id"  ofType="com.goochou.p2b.model.goods.GoodsOrderDetail"
		select="com.goochou.p2b.dao.GoodsPictureMapper.getGoodsPictureByGoodsId"/&amp;gt;
  &amp;lt;/resultMap&amp;gt;
  -->
  
  <select id="getGoodsOrderByOrderNo" parameterType="string" resultMap="BaseResultMap">
		SELECT
			*
		FROM
			t_goods_order
		WHERE
			1 = 1
		AND order_no = #{orderNo}
    </select>
    
	<select id="listGoodsOrder" parameterType="map" resultType="map">
			select go.*,u.true_name,r.pay_channel
			from goods_order_view go 
			<if test="adminId != null ">
				inner join admin_responsible 
					on admin_responsible.admin_id=${adminId} 
					and admin_responsible.department_id=go.department_id
		    </if>
		    <if test="departmentId != null">
		    	inner join department_relation
					on department_relation.department_id=${departmentId} 
					and department_relation.sub_department_id=go.department_id
		    </if>
			left join user u on go.user_id = u.id
			left join recharge r on r.other_id = go.id and r.order_type = 'goods' and r.status = 0
			where 1=1
		<if test="trueName != null and trueName != '' ">
	  		and u.true_name like '%${trueName}%'
	  	</if>
		<if test="userId != null">
	  		and u.id = #{userId}
	  	</if>
	  	<if test="keyword != null and keyword != '' ">
	  		and go.order_no like '%${keyword}%'
	  	</if>
	  	<if test="status != null">
          and go.state in 
          <foreach close=")" collection="status" item="listItem" open="(" separator=",">
            #{listItem}
          </foreach>
        </if>
	  	<if test="startTime != null">
	  		and go.create_date &gt;= #{startTime}
	  	</if>
	  	<if test="endTime != null">
	  		and go.create_date &lt; #{endTime}
	  	</if>
	  	<if test="payStartTime != null">
	  		and go.pay_time &gt;= #{payStartTime}
	  	</if>
	  	<if test="payEndTime != null">
	  		and go.pay_time &lt; #{payEndTime}
	  	</if>
	  	<if test="refundFinishStartTime != null">
	  		and go.refund_finish_time &gt;= #{refundFinishStartTime}
	  	</if>
	  	<if test="refundFinishEndTime != null">
	  		and go.refund_finish_time &lt; #{refundFinishEndTime}
	  	</if>
	  	<if test="expressWay != null">
	  		<if test="expressWay == 0">
                and go.total_money &lt; 200
            </if>
        	<if test="expressWay == 1">
                and go.total_money &gt;= 200
            </if>
        </if>
        <if test="payChannel != null and payChannel != '' ">
	  		and r.pay_channel = #{payChannel}
	  	</if>
	  	 	order by go.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
  	</select>
  
  	<select id="countOrder" parameterType="map" resultType="int">
	  		select count(*) 
			from goods_order_view go 
			<if test="adminId != null ">
				inner join admin_responsible 
					on admin_responsible.admin_id=${adminId} 
					and admin_responsible.department_id=go.department_id
		    </if>
		    <if test="departmentId != null">
		    	inner join department_relation
					on department_relation.department_id=${departmentId} 
					and department_relation.sub_department_id=go.department_id
		    </if>
			left join user u on go.user_id = u.id
			left join recharge r on r.other_id = go.id and r.order_type = 'goods' and r.status = 0
			where 1=1
	  	<if test="trueName != null and trueName != '' ">
	  		and u.true_name like '%${trueName}%'
	  	</if>
	  	<if test="userId != null">
	  		and u.id = #{userId}
	  	</if>
	  	<if test="keyword != null and keyword != '' ">
	  		and go.order_no like '%${keyword}%'
	  	</if>
	  	<if test="status != null">
          and go.state in
          <foreach close=")" collection="status" item="listItem" open="(" separator=",">
            #{listItem}
          </foreach>
        </if>
	  	<if test="startTime != null">
	  		and go.create_date &gt;= #{startTime}
	  	</if>
	  	<if test="endTime != null">
	  		and go.create_date &lt; #{endTime}
	  	</if>
	  	<if test="payStartTime != null">
	  		and go.pay_time &gt;= #{payStartTime}
	  	</if>
	  	<if test="payEndTime != null">
	  		and go.pay_time &lt; #{payEndTime}
	  	</if>
	  	<if test="refundFinishStartTime != null">
	  		and go.refund_finish_time &gt;= #{refundFinishStartTime}
	  	</if>
	  	<if test="refundFinishEndTime != null">
	  		and go.refund_finish_time &lt; #{refundFinishEndTime}
	  	</if>
	  	<if test="expressWay != null">
	  		<if test="expressWay == 0">
                and go.total_money &lt; 200
            </if>
        	<if test="expressWay == 1">
                and go.total_money &gt;= 200
            </if>
        </if>
        <if test="payChannel != null and payChannel != '' ">
	  		and r.pay_channel = #{payChannel}
	  	</if>
  	</select>
    
    <select id="getAmountCount" parameterType="int" resultType="double">
        select ifnull(sum(total_money),0) 
		from t_goods_order 
		inner join user on user.id=t_goods_order.user_id
        <if test="adminId != null ">
			inner join admin_responsible 
				on admin_responsible.admin_id=${adminId} 
				and admin_responsible.department_id=user.department_id
	    </if>
	    <if test="departmentId != null">
	    	inner join department_relation
				on department_relation.department_id=${departmentId} 
				and department_relation.sub_department_id=user.department_id
	    </if>
		where state in (2,3,4,7)
    </select>
    
    
    <select id="listGoodsOrderApp" parameterType="map" resultMap="BaseResultMap">
		  	SELECT
				orders.* 
			FROM 
				t_goods_order orders  
			where true and orders.is_hidden = 0
		<if test="userId != null">
	  		and orders.user_id = #{userId}
	  	</if>
	 
	  	<if test="status != null">
		  	<choose>
			    <when test="status == 0">
			        and orders.state in (0,1)
			    </when>
			    <when test="status == 7">
			    	and state = 7  AND orders.id not in (
					 	SELECT
							ass.order_id 
						FROM
							t_assess ass
						LEFT JOIN t_goods_order_detail detail ON ass.goods_id = detail.goods_id
							AND ass.order_id = detail.order_id  
					 ) 
			    </when>
			    <otherwise> 
			    	 and orders.state = #{status}
			    </otherwise>
			</choose>
		</if>
	  	 	order by orders.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
  	</select>
  
  	<select id="countOrderApp" parameterType="map" resultType="int">
	  		SELECT
				count(1)
			FROM 
				t_goods_order orders  
			where true and orders.is_hidden = 0
	  	<if test="userId != null">
	  		and orders.user_id = #{userId}
	  	</if>
	  	<if test="status != null">
		  	<choose>
			    <when test="status == 0">
			        and orders.state in (0,1)
			    </when>
			    <when test="status == 7">
			    	and state = 7 AND orders.id not in (
					 	SELECT
							ass.order_id 
						FROM
							t_assess ass
						LEFT JOIN t_goods_order_detail detail ON ass.goods_id = detail.goods_id
							AND ass.order_id = detail.order_id  
					 )
			    </when>
			    <otherwise> 
			    	 and orders.state = #{status}
			    </otherwise>
			</choose>
		</if>
	  	 
  	</select>
  	<select id="queryGoodsOrderDetail" parameterType="String" resultMap="BaseResultMap">
		SELECT
			orders.id,
			user_id,
			orders.order_no,
			orders.count,
			total_money,
			real_pay_money,
			balance_pay_money,
			credit_pay_money,
			state,
			DATE_FORMAT(orders.create_date, '%Y-%m-%d %H:%i:%s' ) create_date,
			hongbao_id,
			hongbao_money,
			orders.client,
			express,
			express_num,
			express_fee,
			DATE_FORMAT( orders.delivery_date, '%Y-%m-%d %H:%i:%s' ) delivery_date,
			DATE_FORMAT( orders.update_date, '%Y-%m-%d %H:%i:%s' ) update_date,
			addressee_name,
			addressee_phone,
			addressee_detail,
			<!-- detail.sale_price,
			detail.buy_price, -->
			<!-- goods.goods_name,
			goods.goods_no,
			goods.stock,
			goods.introduction,
			goods.saling_price,
			goods.buying_price, -->
			<!-- up.path , -->
			(select DATE_FORMAT(done.create_date, '%Y-%m-%d %H:%i:%s' )  from order_done done where done.order_no = orders.order_no and done.order_status = 'pay') as pay_time,
			(select DATE_FORMAT(done.create_date, '%Y-%m-%d %H:%i:%s' ) from order_done done where done.order_no = orders.order_no and done.order_status = 'refund') as refund_time,
			(select DATE_FORMAT(done.create_date, '%Y-%m-%d %H:%i:%s' ) from order_done done where done.order_no = orders.order_no and done.order_status = 'cannel') as cancel_time
		FROM
			t_goods_order orders<!-- 
			LEFT JOIN t_goods_order_detail detail ON orders.id = detail.order_id 
			LEFT JOIN t_goods goods ON goods.id = detail.goods_id --><!-- 
			left join t_goods_picture pic on pic.goods_id = goods.id and pic.`status` = 0
			left join upload up on pic.upload_id = up.id and up.status = 0
			left join user users on orders.user_id = users.id  -->
		where true and orders.order_no = #{orderNo}
  	</select>
  	
  	<select id="listBuyGoodsRecord" resultType="map">
  			select  user.true_name,god.buy_price,DATE_FORMAT(god.create_date,'%Y-%m-%d %H:%i:%s') as  create_date ,go.client from t_goods_order_detail  god   left join t_goods_order go   on  god.order_id=go.id     left join  user   on   go.user_id=user.id
			where  god.goods_id=#{goodsId}
			order by god.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
  	</select>
  	<select id="countBuyGoodsRecord" resultType="int">
  			select  count(1) as count from t_goods_order_detail  god   left join t_goods_order go   on  god.order_id=go.id     left join  user   on   go.user_id=user.id
			where  god.goods_id=#{goodsId}
  	</select>
  	<select id="selectByPrimaryKeyForUpdate" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_goods_order
		where id = #{id,jdbcType=INTEGER} for update
	</select>
  <select id="selectSecondKillOrder" resultType="com.goochou.p2b.model.goods.GoodsOrder">
    SELECT a.* from t_goods_order a
        INNER JOIN t_goods_order_detail b on b.activity_detail_id = a.id and b.activity_type = 1
    where b.activity_type = 1 and DATE_FORMAT(a.create_date, '%Y-%m-%d') = DATE_FORMAT(now(), '%Y-%m-%d')
    and (a.state != 0 or a.state != 5)

    <if test="activityDetailId != null">
      and b.activity_detail_id= #{activityDetailId,jdbcType=INTEGER}
    </if>

    <if test="userId != null">
      and a.user_id = #{userId,jdbcType=INTEGER}
    </if>

    ORDER BY a.id DESC

  </select>

	<select id="listCarriage" resultType="map">
		select
			go.id,
			go.order_no,
			GROUP_CONCAT(ifnull(g.sku_code,'无')) as sku_code,
			GROUP_CONCAT(g.goods_name) as goods_name,
			GROUP_CONCAT(god.count) as count,
			GROUP_CONCAT(concat(g.goods_name,'(',god.count,')')) as name_and_count,
			go.user_id,
			u.true_name,
			u.phone,
			go.addressee_detail,
			go.total_money,
			go.state,
			GROUP_CONCAT(ifnull(g.weight*god.count,'无')) as weight,
			sum(g.weight*god.count) as weight_sum,
			go.express_fee,
			go.real_express_fee,
			g.create_date,
			order_status.pay_time,
			order_status.refund_finish_time
		from t_goods_order go
		inner join ( 
			select 	order_no,
				max(case when order_status='pay' then create_date else null end)  pay_time,
				max(case when order_status='refund_finish' then create_date else null end)  refund_finish_time
			from order_done
			where order_type='goods'
			group by order_no	
		) order_status on order_status.order_no = go.order_no
		left join t_goods_order_detail god on god.order_id = go.id
		left join t_goods g on g.id = god.goods_id
		left join user u on u.id = go.user_id
		where go.state &gt; 1
		<if test="orderNo !=null and orderNo !=''">
			and go.order_no like '%${orderNo}%'
		</if>
		<if test="orderStatus != null">
	  		and go.state = #{orderStatus}
	  	</if>
	  	<if test="payStartTime != null">
	  		and order_status.pay_time &gt;= #{payStartTime}
	  	</if>
	  	<if test="payEndTime != null">
	  		and order_status.pay_time &lt; #{payEndTime}
	  	</if>
	  	group by go.id
	  	having 1 = 1
	  	<if test="skuCode !=null and skuCode !=''">
			and GROUP_CONCAT(ifnull(g.sku_code,'无')) like '%${skuCode}%'
		</if>
	  	order by go.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
	</select>
	
	<select id="countCarriage" resultType="int">
		select count(*) from (
			select count(*)
			from t_goods_order go
			inner join ( 
				select 	order_no,
					max(case when order_status='pay' then create_date else null end)  pay_time,
					max(case when order_status='refund_finish' then create_date else null end)  refund_finish_time
				from order_done
				where order_type='goods'
				group by order_no	
			) order_status on order_status.order_no = go.order_no
			left join t_goods_order_detail god on god.order_id = go.id
			left join t_goods g on g.id = god.goods_id
			left join user u on u.id = go.user_id
			where go.state &gt; 1
		<if test="orderNo !=null and orderNo !=''">
			and go.order_no like '%${orderNo}%'
		</if>
		<if test="orderStatus != null">
	  		and go.state = #{orderStatus}
	  	</if>
	  	<if test="payStartTime != null">
	  		and order_status.pay_time &gt;= #{payStartTime}
	  	</if>
	  	<if test="payEndTime != null">
	  		and order_status.pay_time &lt; #{payEndTime}
	  	</if>
	  		group by go.id
	  		having 1 = 1
	  	<if test="skuCode !=null and skuCode !=''">
			and GROUP_CONCAT(ifnull(g.sku_code,'无')) like '%${skuCode}%'
		</if>
			) s1
	</select>
</mapper>