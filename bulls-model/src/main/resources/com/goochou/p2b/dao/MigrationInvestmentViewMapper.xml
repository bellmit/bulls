<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.MigrationInvestmentViewMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.MigrationInvestmentView">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="bid_id" jdbcType="BIGINT" property="bidId" />
    <result column="bid_title" jdbcType="VARCHAR" property="bidTitle" />
    <result column="repayment_type_id" jdbcType="BIGINT" property="repaymentTypeId" />
    <result column="period_unit" jdbcType="INTEGER" property="periodUnit" />
    <result column="period" jdbcType="INTEGER" property="period" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="loan_time" jdbcType="TIMESTAMP" property="loanTime" />
    <result column="apr" jdbcType="DECIMAL" property="apr" />
    <result column="is_increase_rate" jdbcType="BIT" property="isIncreaseRate" />
    <result column="increase_rate" jdbcType="DOUBLE" property="increaseRate" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="red_amount" jdbcType="DECIMAL" property="redAmount" />
    <result column="interest" jdbcType="DECIMAL" property="interest" />
    <result column="increase_interest" jdbcType="DECIMAL" property="increaseInterest" />
    <result column="is_finished" jdbcType="BIT" property="isFinished" />
    <result column="finished_time" jdbcType="TIMESTAMP" property="finishedTime" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="received_corpus" jdbcType="DECIMAL" property="receivedCorpus" />
    <result column="received_interest" jdbcType="DECIMAL" property="receivedInterest" />
    <result column="not_received_corpus" jdbcType="DECIMAL" property="notReceivedCorpus" />
    <result column="not_received_interest" jdbcType="DECIMAL" property="notReceivedInterest" />
    <result column="not_received_increase_interest" jdbcType="DECIMAL" property="notReceivedIncreaseInterest" />
    <result column="next_receive_time" jdbcType="TIMESTAMP" property="nextReceiveTime" />
    <result column="last_receive_time" jdbcType="TIMESTAMP" property="lastReceiveTime" />
    <result column="remain_periods" jdbcType="DECIMAL" property="remainPeriods" />
    <result column="received_interest_before" jdbcType="DECIMAL" property="receivedInterestBefore" />
    <result column="receive_increase_interest_before" jdbcType="DECIMAL" property="receiveIncreaseInterestBefore" />
    <result column="received_interest_after" jdbcType="DECIMAL" property="receivedInterestAfter" />
    <result column="receive_increase_interest_after" jdbcType="DECIMAL" property="receiveIncreaseInterestAfter" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_id, bid_id, bid_title, repayment_type_id, period_unit, period, create_time, 
    loan_time, apr, is_increase_rate, increase_rate, amount, red_amount, interest, increase_interest, 
    is_finished, finished_time, version, received_corpus, received_interest, not_received_corpus, 
    not_received_interest, not_received_increase_interest, next_receive_time, last_receive_time, 
    remain_periods, received_interest_before, receive_increase_interest_before, received_interest_after, 
    receive_increase_interest_after
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.MigrationInvestmentViewExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from migration_investment_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.MigrationInvestmentViewExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from migration_investment_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.goochou.p2b.model.MigrationInvestmentView">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into migration_investment_view (user_id, bid_id, bid_title, 
      repayment_type_id, period_unit, period, 
      create_time, loan_time, apr, 
      is_increase_rate, increase_rate, amount, 
      red_amount, interest, increase_interest, 
      is_finished, finished_time, version, 
      received_corpus, received_interest, not_received_corpus, 
      not_received_interest, not_received_increase_interest, 
      next_receive_time, last_receive_time, remain_periods, 
      received_interest_before, receive_increase_interest_before, 
      received_interest_after, receive_increase_interest_after
      )
    values (#{userId,jdbcType=BIGINT}, #{bidId,jdbcType=BIGINT}, #{bidTitle,jdbcType=VARCHAR}, 
      #{repaymentTypeId,jdbcType=BIGINT}, #{periodUnit,jdbcType=INTEGER}, #{period,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{loanTime,jdbcType=TIMESTAMP}, #{apr,jdbcType=DECIMAL}, 
      #{isIncreaseRate,jdbcType=BIT}, #{increaseRate,jdbcType=DOUBLE}, #{amount,jdbcType=DECIMAL}, 
      #{redAmount,jdbcType=DECIMAL}, #{interest,jdbcType=DECIMAL}, #{increaseInterest,jdbcType=DECIMAL}, 
      #{isFinished,jdbcType=BIT}, #{finishedTime,jdbcType=TIMESTAMP}, #{version,jdbcType=INTEGER}, 
      #{receivedCorpus,jdbcType=DECIMAL}, #{receivedInterest,jdbcType=DECIMAL}, #{notReceivedCorpus,jdbcType=DECIMAL}, 
      #{notReceivedInterest,jdbcType=DECIMAL}, #{notReceivedIncreaseInterest,jdbcType=DECIMAL}, 
      #{nextReceiveTime,jdbcType=TIMESTAMP}, #{lastReceiveTime,jdbcType=TIMESTAMP}, #{remainPeriods,jdbcType=DECIMAL}, 
      #{receivedInterestBefore,jdbcType=DECIMAL}, #{receiveIncreaseInterestBefore,jdbcType=DECIMAL}, 
      #{receivedInterestAfter,jdbcType=DECIMAL}, #{receiveIncreaseInterestAfter,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.MigrationInvestmentView">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into migration_investment_view
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="bidId != null">
        bid_id,
      </if>
      <if test="bidTitle != null">
        bid_title,
      </if>
      <if test="repaymentTypeId != null">
        repayment_type_id,
      </if>
      <if test="periodUnit != null">
        period_unit,
      </if>
      <if test="period != null">
        period,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="loanTime != null">
        loan_time,
      </if>
      <if test="apr != null">
        apr,
      </if>
      <if test="isIncreaseRate != null">
        is_increase_rate,
      </if>
      <if test="increaseRate != null">
        increase_rate,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="redAmount != null">
        red_amount,
      </if>
      <if test="interest != null">
        interest,
      </if>
      <if test="increaseInterest != null">
        increase_interest,
      </if>
      <if test="isFinished != null">
        is_finished,
      </if>
      <if test="finishedTime != null">
        finished_time,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="receivedCorpus != null">
        received_corpus,
      </if>
      <if test="receivedInterest != null">
        received_interest,
      </if>
      <if test="notReceivedCorpus != null">
        not_received_corpus,
      </if>
      <if test="notReceivedInterest != null">
        not_received_interest,
      </if>
      <if test="notReceivedIncreaseInterest != null">
        not_received_increase_interest,
      </if>
      <if test="nextReceiveTime != null">
        next_receive_time,
      </if>
      <if test="lastReceiveTime != null">
        last_receive_time,
      </if>
      <if test="remainPeriods != null">
        remain_periods,
      </if>
      <if test="receivedInterestBefore != null">
        received_interest_before,
      </if>
      <if test="receiveIncreaseInterestBefore != null">
        receive_increase_interest_before,
      </if>
      <if test="receivedInterestAfter != null">
        received_interest_after,
      </if>
      <if test="receiveIncreaseInterestAfter != null">
        receive_increase_interest_after,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="bidId != null">
        #{bidId,jdbcType=BIGINT},
      </if>
      <if test="bidTitle != null">
        #{bidTitle,jdbcType=VARCHAR},
      </if>
      <if test="repaymentTypeId != null">
        #{repaymentTypeId,jdbcType=BIGINT},
      </if>
      <if test="periodUnit != null">
        #{periodUnit,jdbcType=INTEGER},
      </if>
      <if test="period != null">
        #{period,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loanTime != null">
        #{loanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="apr != null">
        #{apr,jdbcType=DECIMAL},
      </if>
      <if test="isIncreaseRate != null">
        #{isIncreaseRate,jdbcType=BIT},
      </if>
      <if test="increaseRate != null">
        #{increaseRate,jdbcType=DOUBLE},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="redAmount != null">
        #{redAmount,jdbcType=DECIMAL},
      </if>
      <if test="interest != null">
        #{interest,jdbcType=DECIMAL},
      </if>
      <if test="increaseInterest != null">
        #{increaseInterest,jdbcType=DECIMAL},
      </if>
      <if test="isFinished != null">
        #{isFinished,jdbcType=BIT},
      </if>
      <if test="finishedTime != null">
        #{finishedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="receivedCorpus != null">
        #{receivedCorpus,jdbcType=DECIMAL},
      </if>
      <if test="receivedInterest != null">
        #{receivedInterest,jdbcType=DECIMAL},
      </if>
      <if test="notReceivedCorpus != null">
        #{notReceivedCorpus,jdbcType=DECIMAL},
      </if>
      <if test="notReceivedInterest != null">
        #{notReceivedInterest,jdbcType=DECIMAL},
      </if>
      <if test="notReceivedIncreaseInterest != null">
        #{notReceivedIncreaseInterest,jdbcType=DECIMAL},
      </if>
      <if test="nextReceiveTime != null">
        #{nextReceiveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastReceiveTime != null">
        #{lastReceiveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remainPeriods != null">
        #{remainPeriods,jdbcType=DECIMAL},
      </if>
      <if test="receivedInterestBefore != null">
        #{receivedInterestBefore,jdbcType=DECIMAL},
      </if>
      <if test="receiveIncreaseInterestBefore != null">
        #{receiveIncreaseInterestBefore,jdbcType=DECIMAL},
      </if>
      <if test="receivedInterestAfter != null">
        #{receivedInterestAfter,jdbcType=DECIMAL},
      </if>
      <if test="receiveIncreaseInterestAfter != null">
        #{receiveIncreaseInterestAfter,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.MigrationInvestmentViewExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from migration_investment_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update migration_investment_view
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.bidId != null">
        bid_id = #{record.bidId,jdbcType=BIGINT},
      </if>
      <if test="record.bidTitle != null">
        bid_title = #{record.bidTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.repaymentTypeId != null">
        repayment_type_id = #{record.repaymentTypeId,jdbcType=BIGINT},
      </if>
      <if test="record.periodUnit != null">
        period_unit = #{record.periodUnit,jdbcType=INTEGER},
      </if>
      <if test="record.period != null">
        period = #{record.period,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.loanTime != null">
        loan_time = #{record.loanTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.apr != null">
        apr = #{record.apr,jdbcType=DECIMAL},
      </if>
      <if test="record.isIncreaseRate != null">
        is_increase_rate = #{record.isIncreaseRate,jdbcType=BIT},
      </if>
      <if test="record.increaseRate != null">
        increase_rate = #{record.increaseRate,jdbcType=DOUBLE},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.redAmount != null">
        red_amount = #{record.redAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.interest != null">
        interest = #{record.interest,jdbcType=DECIMAL},
      </if>
      <if test="record.increaseInterest != null">
        increase_interest = #{record.increaseInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.isFinished != null">
        is_finished = #{record.isFinished,jdbcType=BIT},
      </if>
      <if test="record.finishedTime != null">
        finished_time = #{record.finishedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.receivedCorpus != null">
        received_corpus = #{record.receivedCorpus,jdbcType=DECIMAL},
      </if>
      <if test="record.receivedInterest != null">
        received_interest = #{record.receivedInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.notReceivedCorpus != null">
        not_received_corpus = #{record.notReceivedCorpus,jdbcType=DECIMAL},
      </if>
      <if test="record.notReceivedInterest != null">
        not_received_interest = #{record.notReceivedInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.notReceivedIncreaseInterest != null">
        not_received_increase_interest = #{record.notReceivedIncreaseInterest,jdbcType=DECIMAL},
      </if>
      <if test="record.nextReceiveTime != null">
        next_receive_time = #{record.nextReceiveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastReceiveTime != null">
        last_receive_time = #{record.lastReceiveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remainPeriods != null">
        remain_periods = #{record.remainPeriods,jdbcType=DECIMAL},
      </if>
      <if test="record.receivedInterestBefore != null">
        received_interest_before = #{record.receivedInterestBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.receiveIncreaseInterestBefore != null">
        receive_increase_interest_before = #{record.receiveIncreaseInterestBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.receivedInterestAfter != null">
        received_interest_after = #{record.receivedInterestAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.receiveIncreaseInterestAfter != null">
        receive_increase_interest_after = #{record.receiveIncreaseInterestAfter,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update migration_investment_view
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      bid_id = #{record.bidId,jdbcType=BIGINT},
      bid_title = #{record.bidTitle,jdbcType=VARCHAR},
      repayment_type_id = #{record.repaymentTypeId,jdbcType=BIGINT},
      period_unit = #{record.periodUnit,jdbcType=INTEGER},
      period = #{record.period,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      loan_time = #{record.loanTime,jdbcType=TIMESTAMP},
      apr = #{record.apr,jdbcType=DECIMAL},
      is_increase_rate = #{record.isIncreaseRate,jdbcType=BIT},
      increase_rate = #{record.increaseRate,jdbcType=DOUBLE},
      amount = #{record.amount,jdbcType=DECIMAL},
      red_amount = #{record.redAmount,jdbcType=DECIMAL},
      interest = #{record.interest,jdbcType=DECIMAL},
      increase_interest = #{record.increaseInterest,jdbcType=DECIMAL},
      is_finished = #{record.isFinished,jdbcType=BIT},
      finished_time = #{record.finishedTime,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=INTEGER},
      received_corpus = #{record.receivedCorpus,jdbcType=DECIMAL},
      received_interest = #{record.receivedInterest,jdbcType=DECIMAL},
      not_received_corpus = #{record.notReceivedCorpus,jdbcType=DECIMAL},
      not_received_interest = #{record.notReceivedInterest,jdbcType=DECIMAL},
      not_received_increase_interest = #{record.notReceivedIncreaseInterest,jdbcType=DECIMAL},
      next_receive_time = #{record.nextReceiveTime,jdbcType=TIMESTAMP},
      last_receive_time = #{record.lastReceiveTime,jdbcType=TIMESTAMP},
      remain_periods = #{record.remainPeriods,jdbcType=DECIMAL},
      received_interest_before = #{record.receivedInterestBefore,jdbcType=DECIMAL},
      receive_increase_interest_before = #{record.receiveIncreaseInterestBefore,jdbcType=DECIMAL},
      received_interest_after = #{record.receivedInterestAfter,jdbcType=DECIMAL},
      receive_increase_interest_after = #{record.receiveIncreaseInterestAfter,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>