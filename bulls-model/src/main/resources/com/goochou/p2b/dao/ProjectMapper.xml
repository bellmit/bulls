<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.ProjectMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.Project">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parent_id" jdbcType="INTEGER" property="parentId" />
    <result column="product_id" jdbcType="INTEGER" property="productId" />
    <result column="investment_id" jdbcType="INTEGER" property="investmentId" />
    <result column="enterprise_id" jdbcType="INTEGER" property="enterpriseId" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="annualized" jdbcType="REAL" property="annualized" />
    <result column="increase_annualized" jdbcType="REAL" property="increaseAnnualized" />
    <result column="deadline" jdbcType="TIMESTAMP" property="deadline" />
    <result column="trade_time" jdbcType="TIMESTAMP" property="tradeTime" />
    <result column="buy_back_time" jdbcType="TIMESTAMP" property="buyBackTime" />
    <result column="limit_days" jdbcType="INTEGER" property="limitDays" />
    <result column="total_amount" jdbcType="DOUBLE" property="totalAmount" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="repayment_method" jdbcType="INTEGER" property="repaymentMethod" />
    <result column="project_description" jdbcType="VARCHAR" property="projectDescription" />
    <result column="project_type" jdbcType="INTEGER" property="projectType" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="investors_num" jdbcType="INTEGER" property="investorsNum" />
    <result column="invested_amount" jdbcType="DOUBLE" property="investedAmount" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="tag" jdbcType="VARCHAR" property="tag" />
    <result column="item_number" jdbcType="VARCHAR" property="itemNumber" />
    <result column="noob" jdbcType="INTEGER" property="noob" />
    <result column="rate_coupon_days" jdbcType="INTEGER" property="rateCouponDays" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="contract_id" jdbcType="VARCHAR" property="contractId" />
    <result column="transferable" jdbcType="INTEGER" property="transferable" />
    <result column="plat_service_charge" jdbcType="DOUBLE" property="platServiceCharge" />
    <result column="channel_service_charge" jdbcType="DOUBLE" property="channelServiceCharge" />
    <result column="repay_unit" jdbcType="VARCHAR" property="repayUnit" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="raise_fee" jdbcType="DOUBLE" property="raiseFee" />
    <result column="manage_fee" jdbcType="DOUBLE" property="manageFee" />
    <result column="ear_number" jdbcType="VARCHAR" property="earNumber" />
    <result column="safe_number" jdbcType="VARCHAR" property="safeNumber" />
    <result column="interest_amount" jdbcType="DOUBLE" property="interestAmount" />
    <result column="weight" jdbcType="DOUBLE" property="weight" />
    <result column="unit_zoom_price" jdbcType="DOUBLE" property="unitZoomPrice" />
    <result column="unit_feed_price" jdbcType="DOUBLE" property="unitFeedPrice" />
    <result column="unit_manage_price" jdbcType="DOUBLE" property="unitManagePrice" />
    <result column="add_weight" jdbcType="DOUBLE" property="addWeight" />
    <result column="gps_number" jdbcType="VARCHAR" property="gpsNumber" />
    <result column="prairie_value" jdbcType="VARCHAR" property="prairieValue" />
    <result column="expectant" jdbcType="INTEGER" property="expectant" />
    <result column="auto_enable_sale" jdbcType="BIT" property="autoEnableSale" />
    <result column="real_ear_number" jdbcType="VARCHAR" property="realEarNumber" />
    <result column="buy_again" jdbcType="BIT" property="buyAgain" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, parent_id, product_id, investment_id, enterprise_id, title, annualized, increase_annualized, 
    deadline, trade_time, buy_back_time, limit_days, total_amount, start_time, create_date, 
    update_date, repayment_method, project_description, project_type, user_id, investors_num, 
    invested_amount, status, version, tag, item_number, noob, rate_coupon_days, sort, 
    contract_id, transferable, plat_service_charge, channel_service_charge, repay_unit, 
    sex, raise_fee, manage_fee, ear_number, safe_number, interest_amount, weight, unit_zoom_price, 
    unit_feed_price, unit_manage_price, add_weight, gps_number, prairie_value, expectant, 
    auto_enable_sale, real_ear_number, buy_again
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.ProjectExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="r">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from project
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from project
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.ProjectExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.Project" useGeneratedKeys="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into project (parent_id, product_id, investment_id, 
      enterprise_id, title, annualized, 
      increase_annualized, deadline, trade_time, 
      buy_back_time, limit_days, total_amount, 
      start_time, create_date, update_date, 
      repayment_method, project_description, project_type, 
      user_id, investors_num, invested_amount, 
      status, version, tag, 
      item_number, noob, rate_coupon_days, 
      sort, contract_id, transferable, 
      plat_service_charge, channel_service_charge, 
      repay_unit, sex, raise_fee, 
      manage_fee, ear_number, safe_number, 
      interest_amount, weight, unit_zoom_price, 
      unit_feed_price, unit_manage_price, add_weight, 
      gps_number, prairie_value, expectant, 
      auto_enable_sale, real_ear_number, buy_again
      )
    values (#{parentId,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER}, #{investmentId,jdbcType=INTEGER}, 
      #{enterpriseId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{annualized,jdbcType=REAL}, 
      #{increaseAnnualized,jdbcType=REAL}, #{deadline,jdbcType=TIMESTAMP}, #{tradeTime,jdbcType=TIMESTAMP}, 
      #{buyBackTime,jdbcType=TIMESTAMP}, #{limitDays,jdbcType=INTEGER}, #{totalAmount,jdbcType=DOUBLE}, 
      #{startTime,jdbcType=TIMESTAMP}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{repaymentMethod,jdbcType=INTEGER}, #{projectDescription,jdbcType=VARCHAR}, #{projectType,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER}, #{investorsNum,jdbcType=INTEGER}, #{investedAmount,jdbcType=DOUBLE}, 
      #{status,jdbcType=INTEGER}, #{version,jdbcType=INTEGER}, #{tag,jdbcType=VARCHAR}, 
      #{itemNumber,jdbcType=VARCHAR}, #{noob,jdbcType=INTEGER}, #{rateCouponDays,jdbcType=INTEGER}, 
      #{sort,jdbcType=INTEGER}, #{contractId,jdbcType=VARCHAR}, #{transferable,jdbcType=INTEGER}, 
      #{platServiceCharge,jdbcType=DOUBLE}, #{channelServiceCharge,jdbcType=DOUBLE}, 
      #{repayUnit,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{raiseFee,jdbcType=DOUBLE}, 
      #{manageFee,jdbcType=DOUBLE}, #{earNumber,jdbcType=VARCHAR}, #{safeNumber,jdbcType=VARCHAR}, 
      #{interestAmount,jdbcType=DOUBLE}, #{weight,jdbcType=DOUBLE}, #{unitZoomPrice,jdbcType=DOUBLE}, 
      #{unitFeedPrice,jdbcType=DOUBLE}, #{unitManagePrice,jdbcType=DOUBLE}, #{addWeight,jdbcType=DOUBLE}, 
      #{gpsNumber,jdbcType=VARCHAR}, #{prairieValue,jdbcType=VARCHAR}, #{expectant,jdbcType=INTEGER}, 
      #{autoEnableSale,jdbcType=BIT}, #{realEarNumber,jdbcType=VARCHAR}, #{buyAgain,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.Project">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into project
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="investmentId != null">
        investment_id,
      </if>
      <if test="enterpriseId != null">
        enterprise_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="annualized != null">
        annualized,
      </if>
      <if test="increaseAnnualized != null">
        increase_annualized,
      </if>
      <if test="deadline != null">
        deadline,
      </if>
      <if test="tradeTime != null">
        trade_time,
      </if>
      <if test="buyBackTime != null">
        buy_back_time,
      </if>
      <if test="limitDays != null">
        limit_days,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="repaymentMethod != null">
        repayment_method,
      </if>
      <if test="projectDescription != null">
        project_description,
      </if>
      <if test="projectType != null">
        project_type,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="investorsNum != null">
        investors_num,
      </if>
      <if test="investedAmount != null">
        invested_amount,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="tag != null">
        tag,
      </if>
      <if test="itemNumber != null">
        item_number,
      </if>
      <if test="noob != null">
        noob,
      </if>
      <if test="rateCouponDays != null">
        rate_coupon_days,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="contractId != null">
        contract_id,
      </if>
      <if test="transferable != null">
        transferable,
      </if>
      <if test="platServiceCharge != null">
        plat_service_charge,
      </if>
      <if test="channelServiceCharge != null">
        channel_service_charge,
      </if>
      <if test="repayUnit != null">
        repay_unit,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="raiseFee != null">
        raise_fee,
      </if>
      <if test="manageFee != null">
        manage_fee,
      </if>
      <if test="earNumber != null">
        ear_number,
      </if>
      <if test="safeNumber != null">
        safe_number,
      </if>
      <if test="interestAmount != null">
        interest_amount,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="unitZoomPrice != null">
        unit_zoom_price,
      </if>
      <if test="unitFeedPrice != null">
        unit_feed_price,
      </if>
      <if test="unitManagePrice != null">
        unit_manage_price,
      </if>
      <if test="addWeight != null">
        add_weight,
      </if>
      <if test="gpsNumber != null">
        gps_number,
      </if>
      <if test="prairieValue != null">
        prairie_value,
      </if>
      <if test="expectant != null">
        expectant,
      </if>
      <if test="autoEnableSale != null">
        auto_enable_sale,
      </if>
      <if test="realEarNumber != null">
        real_ear_number,
      </if>
      <if test="buyAgain != null">
        buy_again,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="investmentId != null">
        #{investmentId,jdbcType=INTEGER},
      </if>
      <if test="enterpriseId != null">
        #{enterpriseId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="annualized != null">
        #{annualized,jdbcType=REAL},
      </if>
      <if test="increaseAnnualized != null">
        #{increaseAnnualized,jdbcType=REAL},
      </if>
      <if test="deadline != null">
        #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="tradeTime != null">
        #{tradeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="buyBackTime != null">
        #{buyBackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="limitDays != null">
        #{limitDays,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null">
        #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="repaymentMethod != null">
        #{repaymentMethod,jdbcType=INTEGER},
      </if>
      <if test="projectDescription != null">
        #{projectDescription,jdbcType=VARCHAR},
      </if>
      <if test="projectType != null">
        #{projectType,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="investorsNum != null">
        #{investorsNum,jdbcType=INTEGER},
      </if>
      <if test="investedAmount != null">
        #{investedAmount,jdbcType=DOUBLE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="tag != null">
        #{tag,jdbcType=VARCHAR},
      </if>
      <if test="itemNumber != null">
        #{itemNumber,jdbcType=VARCHAR},
      </if>
      <if test="noob != null">
        #{noob,jdbcType=INTEGER},
      </if>
      <if test="rateCouponDays != null">
        #{rateCouponDays,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="contractId != null">
        #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="transferable != null">
        #{transferable,jdbcType=INTEGER},
      </if>
      <if test="platServiceCharge != null">
        #{platServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="channelServiceCharge != null">
        #{channelServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="repayUnit != null">
        #{repayUnit,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="raiseFee != null">
        #{raiseFee,jdbcType=DOUBLE},
      </if>
      <if test="manageFee != null">
        #{manageFee,jdbcType=DOUBLE},
      </if>
      <if test="earNumber != null">
        #{earNumber,jdbcType=VARCHAR},
      </if>
      <if test="safeNumber != null">
        #{safeNumber,jdbcType=VARCHAR},
      </if>
      <if test="interestAmount != null">
        #{interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=DOUBLE},
      </if>
      <if test="unitZoomPrice != null">
        #{unitZoomPrice,jdbcType=DOUBLE},
      </if>
      <if test="unitFeedPrice != null">
        #{unitFeedPrice,jdbcType=DOUBLE},
      </if>
      <if test="unitManagePrice != null">
        #{unitManagePrice,jdbcType=DOUBLE},
      </if>
      <if test="addWeight != null">
        #{addWeight,jdbcType=DOUBLE},
      </if>
      <if test="gpsNumber != null">
        #{gpsNumber,jdbcType=VARCHAR},
      </if>
      <if test="prairieValue != null">
        #{prairieValue,jdbcType=VARCHAR},
      </if>
      <if test="expectant != null">
        #{expectant,jdbcType=INTEGER},
      </if>
      <if test="autoEnableSale != null">
        #{autoEnableSale,jdbcType=BIT},
      </if>
      <if test="realEarNumber != null">
        #{realEarNumber,jdbcType=VARCHAR},
      </if>
      <if test="buyAgain != null">
        #{buyAgain,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.ProjectExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from project
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update project
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.parentId != null">
        parent_id = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.investmentId != null">
        investment_id = #{record.investmentId,jdbcType=INTEGER},
      </if>
      <if test="record.enterpriseId != null">
        enterprise_id = #{record.enterpriseId,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.annualized != null">
        annualized = #{record.annualized,jdbcType=REAL},
      </if>
      <if test="record.increaseAnnualized != null">
        increase_annualized = #{record.increaseAnnualized,jdbcType=REAL},
      </if>
      <if test="record.deadline != null">
        deadline = #{record.deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="record.tradeTime != null">
        trade_time = #{record.tradeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.buyBackTime != null">
        buy_back_time = #{record.buyBackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.limitDays != null">
        limit_days = #{record.limitDays,jdbcType=INTEGER},
      </if>
      <if test="record.totalAmount != null">
        total_amount = #{record.totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.repaymentMethod != null">
        repayment_method = #{record.repaymentMethod,jdbcType=INTEGER},
      </if>
      <if test="record.projectDescription != null">
        project_description = #{record.projectDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.projectType != null">
        project_type = #{record.projectType,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.investorsNum != null">
        investors_num = #{record.investorsNum,jdbcType=INTEGER},
      </if>
      <if test="record.investedAmount != null">
        invested_amount = #{record.investedAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.tag != null">
        tag = #{record.tag,jdbcType=VARCHAR},
      </if>
      <if test="record.itemNumber != null">
        item_number = #{record.itemNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.noob != null">
        noob = #{record.noob,jdbcType=INTEGER},
      </if>
      <if test="record.rateCouponDays != null">
        rate_coupon_days = #{record.rateCouponDays,jdbcType=INTEGER},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.contractId != null">
        contract_id = #{record.contractId,jdbcType=VARCHAR},
      </if>
      <if test="record.transferable != null">
        transferable = #{record.transferable,jdbcType=INTEGER},
      </if>
      <if test="record.platServiceCharge != null">
        plat_service_charge = #{record.platServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="record.channelServiceCharge != null">
        channel_service_charge = #{record.channelServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="record.repayUnit != null">
        repay_unit = #{record.repayUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.raiseFee != null">
        raise_fee = #{record.raiseFee,jdbcType=DOUBLE},
      </if>
      <if test="record.manageFee != null">
        manage_fee = #{record.manageFee,jdbcType=DOUBLE},
      </if>
      <if test="record.earNumber != null">
        ear_number = #{record.earNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.safeNumber != null">
        safe_number = #{record.safeNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.interestAmount != null">
        interest_amount = #{record.interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=DOUBLE},
      </if>
      <if test="record.unitZoomPrice != null">
        unit_zoom_price = #{record.unitZoomPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.unitFeedPrice != null">
        unit_feed_price = #{record.unitFeedPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.unitManagePrice != null">
        unit_manage_price = #{record.unitManagePrice,jdbcType=DOUBLE},
      </if>
      <if test="record.addWeight != null">
        add_weight = #{record.addWeight,jdbcType=DOUBLE},
      </if>
      <if test="record.gpsNumber != null">
        gps_number = #{record.gpsNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.prairieValue != null">
        prairie_value = #{record.prairieValue,jdbcType=VARCHAR},
      </if>
      <if test="record.expectant != null">
        expectant = #{record.expectant,jdbcType=INTEGER},
      </if>
      <if test="record.autoEnableSale != null">
        auto_enable_sale = #{record.autoEnableSale,jdbcType=BIT},
      </if>
      <if test="record.realEarNumber != null">
        real_ear_number = #{record.realEarNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.buyAgain != null">
        buy_again = #{record.buyAgain,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update project
    set id = #{record.id,jdbcType=INTEGER},
      parent_id = #{record.parentId,jdbcType=INTEGER},
      product_id = #{record.productId,jdbcType=INTEGER},
      investment_id = #{record.investmentId,jdbcType=INTEGER},
      enterprise_id = #{record.enterpriseId,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      annualized = #{record.annualized,jdbcType=REAL},
      increase_annualized = #{record.increaseAnnualized,jdbcType=REAL},
      deadline = #{record.deadline,jdbcType=TIMESTAMP},
      trade_time = #{record.tradeTime,jdbcType=TIMESTAMP},
      buy_back_time = #{record.buyBackTime,jdbcType=TIMESTAMP},
      limit_days = #{record.limitDays,jdbcType=INTEGER},
      total_amount = #{record.totalAmount,jdbcType=DOUBLE},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      repayment_method = #{record.repaymentMethod,jdbcType=INTEGER},
      project_description = #{record.projectDescription,jdbcType=VARCHAR},
      project_type = #{record.projectType,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      investors_num = #{record.investorsNum,jdbcType=INTEGER},
      invested_amount = #{record.investedAmount,jdbcType=DOUBLE},
      status = #{record.status,jdbcType=INTEGER},
      version = #{record.version,jdbcType=INTEGER},
      tag = #{record.tag,jdbcType=VARCHAR},
      item_number = #{record.itemNumber,jdbcType=VARCHAR},
      noob = #{record.noob,jdbcType=INTEGER},
      rate_coupon_days = #{record.rateCouponDays,jdbcType=INTEGER},
      sort = #{record.sort,jdbcType=INTEGER},
      contract_id = #{record.contractId,jdbcType=VARCHAR},
      transferable = #{record.transferable,jdbcType=INTEGER},
      plat_service_charge = #{record.platServiceCharge,jdbcType=DOUBLE},
      channel_service_charge = #{record.channelServiceCharge,jdbcType=DOUBLE},
      repay_unit = #{record.repayUnit,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      raise_fee = #{record.raiseFee,jdbcType=DOUBLE},
      manage_fee = #{record.manageFee,jdbcType=DOUBLE},
      ear_number = #{record.earNumber,jdbcType=VARCHAR},
      safe_number = #{record.safeNumber,jdbcType=VARCHAR},
      interest_amount = #{record.interestAmount,jdbcType=DOUBLE},
      weight = #{record.weight,jdbcType=DOUBLE},
      unit_zoom_price = #{record.unitZoomPrice,jdbcType=DOUBLE},
      unit_feed_price = #{record.unitFeedPrice,jdbcType=DOUBLE},
      unit_manage_price = #{record.unitManagePrice,jdbcType=DOUBLE},
      add_weight = #{record.addWeight,jdbcType=DOUBLE},
      gps_number = #{record.gpsNumber,jdbcType=VARCHAR},
      prairie_value = #{record.prairieValue,jdbcType=VARCHAR},
      expectant = #{record.expectant,jdbcType=INTEGER},
      auto_enable_sale = #{record.autoEnableSale,jdbcType=BIT},
      real_ear_number = #{record.realEarNumber,jdbcType=VARCHAR},
      buy_again = #{record.buyAgain,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.Project">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update project
    <set>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="investmentId != null">
        investment_id = #{investmentId,jdbcType=INTEGER},
      </if>
      <if test="enterpriseId != null">
        enterprise_id = #{enterpriseId,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="annualized != null">
        annualized = #{annualized,jdbcType=REAL},
      </if>
      <if test="increaseAnnualized != null">
        increase_annualized = #{increaseAnnualized,jdbcType=REAL},
      </if>
      <if test="deadline != null">
        deadline = #{deadline,jdbcType=TIMESTAMP},
      </if>
      <if test="tradeTime != null">
        trade_time = #{tradeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="buyBackTime != null">
        buy_back_time = #{buyBackTime,jdbcType=TIMESTAMP},
      </if>
      <if test="limitDays != null">
        limit_days = #{limitDays,jdbcType=INTEGER},
      </if>
      <if test="totalAmount != null">
        total_amount = #{totalAmount,jdbcType=DOUBLE},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="repaymentMethod != null">
        repayment_method = #{repaymentMethod,jdbcType=INTEGER},
      </if>
      <if test="projectDescription != null">
        project_description = #{projectDescription,jdbcType=VARCHAR},
      </if>
      <if test="projectType != null">
        project_type = #{projectType,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="investorsNum != null">
        investors_num = #{investorsNum,jdbcType=INTEGER},
      </if>
      <if test="investedAmount != null">
        invested_amount = #{investedAmount,jdbcType=DOUBLE},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="tag != null">
        tag = #{tag,jdbcType=VARCHAR},
      </if>
      <if test="itemNumber != null">
        item_number = #{itemNumber,jdbcType=VARCHAR},
      </if>
      <if test="noob != null">
        noob = #{noob,jdbcType=INTEGER},
      </if>
      <if test="rateCouponDays != null">
        rate_coupon_days = #{rateCouponDays,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="contractId != null">
        contract_id = #{contractId,jdbcType=VARCHAR},
      </if>
      <if test="transferable != null">
        transferable = #{transferable,jdbcType=INTEGER},
      </if>
      <if test="platServiceCharge != null">
        plat_service_charge = #{platServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="channelServiceCharge != null">
        channel_service_charge = #{channelServiceCharge,jdbcType=DOUBLE},
      </if>
      <if test="repayUnit != null">
        repay_unit = #{repayUnit,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="raiseFee != null">
        raise_fee = #{raiseFee,jdbcType=DOUBLE},
      </if>
      <if test="manageFee != null">
        manage_fee = #{manageFee,jdbcType=DOUBLE},
      </if>
      <if test="earNumber != null">
        ear_number = #{earNumber,jdbcType=VARCHAR},
      </if>
      <if test="safeNumber != null">
        safe_number = #{safeNumber,jdbcType=VARCHAR},
      </if>
      <if test="interestAmount != null">
        interest_amount = #{interestAmount,jdbcType=DOUBLE},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=DOUBLE},
      </if>
      <if test="unitZoomPrice != null">
        unit_zoom_price = #{unitZoomPrice,jdbcType=DOUBLE},
      </if>
      <if test="unitFeedPrice != null">
        unit_feed_price = #{unitFeedPrice,jdbcType=DOUBLE},
      </if>
      <if test="unitManagePrice != null">
        unit_manage_price = #{unitManagePrice,jdbcType=DOUBLE},
      </if>
      <if test="addWeight != null">
        add_weight = #{addWeight,jdbcType=DOUBLE},
      </if>
      <if test="gpsNumber != null">
        gps_number = #{gpsNumber,jdbcType=VARCHAR},
      </if>
      <if test="prairieValue != null">
        prairie_value = #{prairieValue,jdbcType=VARCHAR},
      </if>
      <if test="expectant != null">
        expectant = #{expectant,jdbcType=INTEGER},
      </if>
      <if test="autoEnableSale != null">
        auto_enable_sale = #{autoEnableSale,jdbcType=BIT},
      </if>
      <if test="realEarNumber != null">
        real_ear_number = #{realEarNumber,jdbcType=VARCHAR},
      </if>
      <if test="buyAgain != null">
        buy_again = #{buyAgain,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.Project">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update project
    set parent_id = #{parentId,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      investment_id = #{investmentId,jdbcType=INTEGER},
      enterprise_id = #{enterpriseId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      annualized = #{annualized,jdbcType=REAL},
      increase_annualized = #{increaseAnnualized,jdbcType=REAL},
      deadline = #{deadline,jdbcType=TIMESTAMP},
      trade_time = #{tradeTime,jdbcType=TIMESTAMP},
      buy_back_time = #{buyBackTime,jdbcType=TIMESTAMP},
      limit_days = #{limitDays,jdbcType=INTEGER},
      total_amount = #{totalAmount,jdbcType=DOUBLE},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      repayment_method = #{repaymentMethod,jdbcType=INTEGER},
      project_description = #{projectDescription,jdbcType=VARCHAR},
      project_type = #{projectType,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      investors_num = #{investorsNum,jdbcType=INTEGER},
      invested_amount = #{investedAmount,jdbcType=DOUBLE},
      status = #{status,jdbcType=INTEGER},
      version = #{version,jdbcType=INTEGER},
      tag = #{tag,jdbcType=VARCHAR},
      item_number = #{itemNumber,jdbcType=VARCHAR},
      noob = #{noob,jdbcType=INTEGER},
      rate_coupon_days = #{rateCouponDays,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      contract_id = #{contractId,jdbcType=VARCHAR},
      transferable = #{transferable,jdbcType=INTEGER},
      plat_service_charge = #{platServiceCharge,jdbcType=DOUBLE},
      channel_service_charge = #{channelServiceCharge,jdbcType=DOUBLE},
      repay_unit = #{repayUnit,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      raise_fee = #{raiseFee,jdbcType=DOUBLE},
      manage_fee = #{manageFee,jdbcType=DOUBLE},
      ear_number = #{earNumber,jdbcType=VARCHAR},
      safe_number = #{safeNumber,jdbcType=VARCHAR},
      interest_amount = #{interestAmount,jdbcType=DOUBLE},
      weight = #{weight,jdbcType=DOUBLE},
      unit_zoom_price = #{unitZoomPrice,jdbcType=DOUBLE},
      unit_feed_price = #{unitFeedPrice,jdbcType=DOUBLE},
      unit_manage_price = #{unitManagePrice,jdbcType=DOUBLE},
      add_weight = #{addWeight,jdbcType=DOUBLE},
      gps_number = #{gpsNumber,jdbcType=VARCHAR},
      prairie_value = #{prairieValue,jdbcType=VARCHAR},
      expectant = #{expectant,jdbcType=INTEGER},
      auto_enable_sale = #{autoEnableSale,jdbcType=BIT},
      real_ear_number = #{realEarNumber,jdbcType=VARCHAR},
      buy_again = #{buyAgain,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>

	<resultMap extends="BaseResultMap" id="r" type="com.goochou.p2b.model.Project">
		<association column="enterprise_id" property="enterprise" select="com.goochou.p2b.dao.EnterpriseMapper.selectByPrimaryKey" />
		<association column="product_id" property="product" select="com.goochou.p2b.dao.ProductMapper.selectByPrimaryKey" />
		<association column="id" property="pictures" select="com.goochou.p2b.dao.ProjectPictureMapper.selectByProjectId" />
		<association column="id" property="propertys" select="com.goochou.p2b.dao.ProjectPropertyValueMapper.selectByProjectId" />
		<association column="prairie_value" property="tmDict" select="com.goochou.p2b.dao.TmDictMapper.getTmDictByValue" />
<!-- &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="investment_id" property="investment" select="com.goochou.p2b.dao.InvestmentMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="investment_detail_id" 
			property="investmentDetail" select="com.goochou.p2b.dao.InvestmentDetailMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="enterprise_id" property="enterprise" 
			select="com.goochou.p2b.dao.EnterpriseMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="parent_id" property="project" select="com.goochou.p2b.dao.ProjectMapper.selectByPrimaryKey" 
			/&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="user_id" property="user" select="com.goochou.p2b.dao.UserMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="id" property="pictures" 
			select="com.goochou.p2b.dao.ProjectPictureMapper.selectByProjectId" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="product_id" property="product" select="com.goochou.p2b.dao.ProductMapper.selectByPrimaryKey" 
			/&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="package_id" property="projectPackage" select="com.goochou.p2b.dao.ProjectPackageMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; -->
	</resultMap>

	<resultMap extends="BaseResultMap" id="r2" type="com.goochou.p2b.model.Project">
		<!-- &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="parent_id" property="project" select="com.goochou.p2b.dao.ProjectMapper.selectByPrimaryKey" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;association column="id" property="pictures" 
			select="com.goochou.p2b.dao.ProjectPictureMapper.selectByProjectId" /&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; -->
	</resultMap>

	<select id="getInvestors" parameterType="map" resultType="map">
		SELECT
		phone,
		username,
		DATE_FORMAT(i.time, '%Y-%m-%d %H:%i:%s') AS time,
		DATE_FORMAT(i.time, '%Y-%m-%d') AS ymd,
		DATE_FORMAT(i.time, '%H:%i:%s') AS his,
		amount,
		terminal,
		user.id userId,
		i.id
		investmentId
		FROM
		user, project,
		investment i
		WHERE user.id = i.user_id AND project.id = i.project_id AND project.id = #{projectId}
		AND user.status IN (0, 4)
		ORDER BY i.time DESC
		LIMIT
		#{start}, #{limit}
	</select>

	<select id="getInvestors1" parameterType="map" resultType="map">
		SELECT
		phone,
		username,
		DATE_FORMAT(i.time, '%Y-%m-%d %H:%i:%s') AS time,
		DATE_FORMAT(i.time, '%Y-%m-%d') AS ymd,
		DATE_FORMAT(i.time, '%H:%i:%s') AS his,
		i.amount,
		terminal,
		user.id userId,
		i.id
		investmentId
		FROM
		user, project,
		investment_detail i, investment inv
		WHERE user.id = inv.user_id AND project.id = i.project_id AND inv.id = i.investment_id AND project.id =
		#{projectId}
		AND user.status IN (0, 4)
		ORDER BY i.time
		LIMIT #{start}, #{limit}
	</select>
 

	<select id="getInvestorsCount" parameterType="int" resultType="int">
		SELECT count(*)
		FROM user, project, investment i
		WHERE user.id = i.user_id AND
		project.id = i.project_id AND
		project.id = #{projectId}
		AND user.status IN (0, 4)
	</select>
	<select id="getInvestorsCount1" parameterType="int" resultType="int">
		SELECT count(*)
		FROM
		user, project, investment_detail i, investment inv
		WHERE
		user.id = inv.user_id AND project.id = i.project_id AND inv.id = i.investment_id AND project.id = #{projectId}
		AND user.status IN (0, 4)
	</select>


	<select id="getUsableBondList" parameterType="map" resultType="map">
		SELECT
		invest.*,
		interest.date nextDividendDate,
		max(interest.date) overTime
		FROM
		(
		SELECT
		i.id investmentId,
		IFNULL(pb.title, pb.bTitle) title,
		(
		CASE
		WHEN pb.annualized != 0
		THEN
		pb.annualized
		WHEN pb.annualized = 0
		THEN
		bAnnualized
		END
		)
		annualized,
		IFNULL(pb.bIncreaseAnnualized, pb.increase_annualized) increase_annualized,
		i.remain_amount,
		i.time,
		datediff(
		CASE
		WHEN pb.parent_id IS NULL
		THEN
		ADDDATE(
		pb.deadline,
		INTERVAL pb.limit_days DAY
		)
		WHEN pb.parent_id IS NOT NULL
		THEN
		ADDDATE(
		pb.bDeadline,
		INTERVAL pb.bLimitDays DAY
		)
		END,
		curdate()
		)
		dayDiff
		FROM
		investment i
		LEFT JOIN (
		SELECT
		p.*,
		b.deadline bDeadline,
		b.limit_days bLimitDays,
		b.annualized bAnnualized,
		b.title bTitle,
		b.increase_annualized bIncreaseAnnualized
		FROM
		project p
		LEFT JOIN (SELECT *
		FROM project
		WHERE id &gt;= 506) b ON p.parent_id = b.id
		) AS pb ON pb.id =
		i.project_id
		WHERE
		i.user_id = #{userId}
		AND i.type IN (0, 4)
		AND i.remain_amount &gt; 0
		and pb.transferable &gt; 0
		AND (
		(
		pb.parent_id IS NULL
		AND
		TO_DAYS(NOW()) &gt;= TO_DAYS(i.time) + pb.transferable
		AND TO_DAYS(pb.deadline) + pb.limit_days
		)
		OR (
		pb.parent_id IS NOT NULL
		AND TO_DAYS(NOW()) &gt;=
		TO_DAYS(i.time) + pb.transferable
		AND TO_DAYS(pb.bDeadline) + pb.bLimitDays
		)
		)
		) invest
		LEFT JOIN interest ON invest.investmentId =
		interest.investment_id
		WHERE
		interest.date &gt; now()
		AND interest.has_dividended = 0
		GROUP BY
		invest.investmentId
		ORDER BY
		invest.time DESC
		LIMIT #{start},
		#{limit}
	</select>

	<select id="getUsableBondListCount" parameterType="int" resultType="int">
		SELECT count(t.id)
		FROM
		investment t,
		project p
		WHERE
		t.project_id = p.id
		AND
		t.user_id = #{userId}
		AND t.remain_amount &gt; 0
		AND p.id &gt;= 506
		and p.transferable &gt; 0
		AND TO_DAYS(NOW()) &gt;= TO_DAYS(t.time) + p.transferable
		AND TO_DAYS(p.deadline) + p.limit_days
		LIMIT 10
	</select>

	<select id="getAssignBondList" parameterType="map" resultType="map">
		SELECT
		p.title,
		bond.id,
		p.annualized,
		p.increase_annualized,
		bond.total_amount
		totalAmount,
		bond.invested_amount investedAmount,
		bond.create_time createTime,
		datediff(date_add(p.deadline, INTERVAL p.limit_days DAY), NOW())
		dayDiff,
		i.id investmentId,
		i.time
		FROM
		project bond,
		project p,
		investment i
		WHERE
		bond.parent_id = p.id
		AND bond.status = #{status}
		AND p.product_id IS NULL
		AND bond.investment_id = i.id
		AND i.user_id = #{userId}
		AND p.id &gt;= 506
		ORDER BY bond.create_time DESC
		LIMIT #{start}, #{limit}
	</select>

	<select id="getAssignBondCount" parameterType="map" resultType="int">
		SELECT count(p.id)
		FROM
		project bond,
		project p,
		investment i
		WHERE
		bond.parent_id =
		p.id
		AND bond.status = #{status}
		AND p.product_id IS NULL
		AND p.id &gt;= 506
		AND bond.investment_id = i.id
		AND i.user_id = #{userId}
	</select>

	<select id="getPurchasedBondList" parameterType="map" resultType="map">
		SELECT inv.*,
		DATEDIFF(inv.over_time, NOW()) dayDiff,
		inv.over_time overTime
		FROM(
		SELECT invest.*, SUM(IF(interest.has_dividended= 1, interest.interest_amount, 0)) dividendedAmount
		FROM(
		SELECT parent.title title, pc.title
		titleCreditor, parent.id projectId, investment.id id, parent.annualized annualized,
		parent.increase_annualized, project.status STATUS,
		ADDDATE(parent.deadline, INTERVAL parent.limit_days DAY) over_time,
		investment.amount, project.total_amount, project.deadline, investment.time
		FROM
		investment LEFT JOIN project ON investment.`project_id` =project.id
		LEFT JOIN project parent ON parent.id = project.`parent_id` LEFT JOIN
		project_creditor pc ON pc.`project_id` =parent.id
		WHERE investment.user_id= #{userId} AND project.`project_type` =1 AND parent.id &gt;= 506
		ORDER BY
		investment.time DESC) invest LEFT JOIN interest ON invest.id = interest.investment_id
		GROUP BY invest.id
		) inv ORDER BY inv.time DESC
		LIMIT #{start},
		#{limit}
	</select>

	<select id="getPurchasedBondCount" parameterType="int" resultType="int">
		SELECT count(investment.id)
		FROM
		investment,
		project
		WHERE
		investment.project_id
		= project.id
		AND investment.user_id = #{userId}
		AND project.parent_id IS NOT NULL AND project.parent_id &gt;= 506
	</select>

	<select id="getTransferedProjectByUserId" parameterType="int" resultType="map">
		SELECT
		count(id) count,
		sum(total_amount) amount
		FROM
		project
		WHERE
		project.user_id = #{userId}
		AND project.parent_id IS NOT NULL
		AND project.status = 2
		GROUP BY
		project.user_id
	</select>

	<select id="getProjectByInvestmentId" parameterType="int" resultMap="BaseResultMap">
		SELECT project.*
		FROM project, investment
		WHERE investment.id =
		#{investmentId} AND project.id =
		investment.project_id
	</select>

	<select id="getAllInvestors" resultType="int">
		SELECT i.user_id
		FROM investment i, project p
		WHERE i.project_id = p.id AND p.id = #{projectId}
		GROUP BY
		i.user_id
	</select>
	<select id="getNewProjectByApp" resultType="com.goochou.p2b.model.Project">
		SELECT *
		FROM project
		WHERE id = (SELECT max(id)
		FROM project
		WHERE project_type = 2)
	</select>
	<select id="getAllProjectCountByApp" resultType="Integer">
		SELECT count(1)
		FROM project
		WHERE project_type = 2 AND status &gt; 0
	</select>
	<select id="queryList" resultType="com.goochou.p2b.model.Project">
		SELECT
		p.*, p.invested_amount trueAmount,
		(
		SELECT
		count(1)
		FROM
		project
		WHERE
		`status` = 2
		AND project_type IN (0)
		AND parent_id IS NULL
		AND enterprise_id =
		p.enterprise_id
		) sellCount
		FROM
		project p
		LEFT JOIN investment i on p.id=i.project_id
		LEFT JOIN `user` u on i.user_id=u.id
		<where>
			<if test="keyword != null">
				and (p.title like '%${keyword}%' or p.deadline like binary '${keyword}%' or p.ear_number like '%${keyword}%')
			</if>
			<if test="status != null">
				and p.status = #{status}
			</if>
			<if test="projectType != null">
				<if test="projectType == 0">
					and p.project_type = #{projectType}
				</if>
				<if test="projectType == 2">
					and p.project_type = #{projectType}
				</if>
				<if test="projectType == 5">
					and p.project_type = #{projectType}
				</if>
			</if>
			<if test="noob != null and noob==3">
				and p.project_type = 7
				and p.parent_id is null
			</if>
			<if test="projectType == null">
				and p.project_type in (0,3,7)
				
			</if>
			<if test="noob != null and noob!=3">
				and noob=#{noob}
			</if>
			<if test="limitDays != null">
				and limit_days=#{limitDays}
			</if>
			<if test="lendBeginTimeStartTime !=null and lendBeginTimeStartTime!=''  ">
		         <![CDATA[ and date_format(p.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{lendBeginTimeStartTime},'%Y-%m-%d') ]]>  
			</if>	
			<if test="lendBeginTimeEndTime!=null and  lendBeginTimeEndTime!=''  ">
			     <![CDATA[ and date_format(p.create_date ,'%Y-%m-%d') <STR_TO_DATE(#{lendBeginTimeEndTime},'%Y-%m-%d') ]]>   
			</if>		
				
		</where>
		GROUP BY p.id
		<if test="orderby != null">
			order by ${orderby}
		</if>
		<if test="sort != null">
			${sort}
		</if>
		<if test="start != null">
			limit #{start},
		</if>
		<if test="limit != null">
			#{limit}
		</if>
	</select>

	<select id="countProjectList" resultType="int">
	select count(1) from (
		SELECT
			p.*
		FROM
		project p
		LEFT JOIN investment i on p.id=i.project_id
		LEFT JOIN `user` u on i.user_id=u.id
		<where>
			<if test="keyword != null">
				and (p.title like '%${keyword}%' or p.deadline like binary '${keyword}%' or p.ear_number like '%${keyword}%')
			</if>
			<if test="status != null">
				and p.status = #{status}
			</if>
			<if test="projectType != null">
				<if test="projectType == 0">
					and p.project_type = #{projectType}
				</if>
				<if test="projectType == 2">
					and p.project_type = #{projectType}
				</if>
				<if test="projectType == 5">
					and p.project_type = #{projectType}
				</if>
			</if>
			<if test="noob != null and noob==3">
				and p.project_type = 7
				and p.parent_id is null
			</if>
			<if test="projectType == null">
				and p.project_type in (0,3,7)
				
			</if>
			<if test="noob != null and noob!=3">
				and noob=#{noob}
			</if>
			<if test="limitDays != null">
				and limit_days=#{limitDays}
			</if>

			<if test="lendBeginTimeStartTime !=null and lendBeginTimeStartTime!=''  ">
		         <![CDATA[ and date_format(p.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{lendBeginTimeStartTime},'%Y-%m-%d') ]]>  
			</if>	
			<if test="lendBeginTimeEndTime!=null and  lendBeginTimeEndTime!=''  ">
			     <![CDATA[ and date_format(p.create_date ,'%Y-%m-%d') <STR_TO_DATE(#{lendBeginTimeEndTime},'%Y-%m-%d') ]]>   
			</if>
			
		</where>
			GROUP BY p.id   ) aa
	</select>


	<select id="queryListCount" resultType="int">
		select count(*) from project p
		<where>
			<if test="keyword != null">
				and (p.title like '%${keyword}%' or p.deadline like binary '${keyword}%')
			</if>
			<if test="status != null">
				and p.status = #{status}
			</if>
			<if test="projectType != null">
				<if test="projectType == 0">
					and p.project_type = #{projectType}
				</if>
				<if test="projectType == 2">
					and p.project_type = #{projectType}
				</if>
			</if>
			<if test="noob != null and noob==3">
				and p.project_type = 7
				and p.parent_id is null
			</if>
			<if test="projectType == null">
				and p.project_type in (0,3,7)
				and p.parent_id is null
			</if>
			<if test="noob != null">
				and noob=#{noob}
			</if>
		</where>
	</select>

	<select id="queryCreditor" parameterType="map" resultType="map">
		select
		pc.id,pc.project_id projectId,pc.title,pc.content,pc.status,
		p.title projecTitle,p.annualized,p.total_amount totalAmount,p.start_time
		startTime,p.create_time
		createTime,p.deadline endTime,p.limit_days limitDays
		from project_creditor pc left join project p on pc.project_id=p.id
		where
		1=1
		<if test="keyword != null">
			and (pc.title like '%${keyword}%' or pc.content like '%${keyword}%')
		</if>
		<if test="status != null">
			and pc.status=#{status}
		</if>
		order by p.create_time desc
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>

	</select>

	<select id="queryCreditorCount" parameterType="map" resultType="int">
		select
		count(*)
		from project_creditor pc left join project p on pc.project_id=p.id
		where 1=1
		<if test="keyword != null">
			and (pc.title like '%${keyword}%' or pc.content like '%${keyword}%')
		</if>
		<if test="status != null">
			and p.status=#{status}
		</if>
	</select>

	<select id="selectNoobProject" resultMap="BaseResultMap">
		SELECT *
		FROM project
		WHERE project_type = 0 AND noob = 1 AND status &gt;= 2
		ORDER BY status, id DESC
		LIMIT
		0, 1;
	</select>
	<select id="selectRegularProject" parameterType="int" resultType="com.goochou.p2b.model.Project">
		SELECT *
		FROM project
		WHERE project_type = 0 AND status = 2 and tag not like '渠道%'
		<if test="level == 0">
			AND noob in(0,3)
		</if>
		<if test="level != 0">
			AND noob = 2
		</if>
		ORDER BY status asc, sort asc, id DESC
		LIMIT
		0, 1;
	</select>
	<select id="selectInvestment" parameterType="int" resultType="int">
		SELECT count(*)
		FROM investment
		WHERE project_id = #{project_id,jdbcType=INTEGER};
	</select>
	<select id="selectRegularList" parameterType="map" resultType="com.goochou.p2b.model.Project">
		SELECT *
		FROM (
		SELECT *
		FROM project
		WHERE project_type = 0 AND status NOT IN (0,
		1) AND noob = 0 AND tag NOT LIKE '渠道%'
		ORDER BY id DESC
		) p
		ORDER BY status, p.limit_days
	</select>

	<select id="selectHotProjectList" parameterType="map" resultType="com.goochou.p2b.model.Project">
		SELECT *
		FROM project
		WHERE project_type = 0 AND STATUS NOT IN (0, 1) AND noob != 1 AND tag NOT LIKE '渠道%'
		ORDER BY
		<trim suffixOverrides=",">
			<if test="param1 != null">
				${param1},
			</if>
			<if test="param2 != null">
				${param2},
			</if>
			<if test="param3 != null">
				${param3}
			</if>
		</trim>
	</select>

	<select id="selectRegularCount" resultType="int">
		SELECT count(*)
		FROM project
		WHERE project_type = 0 AND noob = 0 AND status = 2;
	</select>

	<select id="selectByOtherIdTitle" parameterType="map" resultType="map">
		SELECT *
		FROM project
		WHERE id = (
		SELECT parent_id
		FROM project
		WHERE id = (
		SELECT project_id
		FROM investment
		WHERE id = (SELECT investment_id
		FROM ${tableName}
		WHERE id = #{otherId})
		))
	</select>
	<select id="selectByOtherIdTitle2" parameterType="map" resultType="map">
		SELECT *
		FROM project
		WHERE id = (
		SELECT project_id
		FROM investment
		WHERE id =
		(SELECT investment_id
		FROM ${tableName}
		WHERE id = #{otherId})
		)
	</select>
	<select id="selectByOtherIdTitle3" parameterType="map" resultType="map">
		SELECT *
		FROM project
		WHERE id = (
		SELECT IFNULL(parent_id, id)
		FROM project
		WHERE id = (
		SELECT project_id
		FROM ${tableName}
		WHERE id = #{otherId}
		))
	</select>
	<select id="selectByOtherIdTitle4" parameterType="int" resultType="map">
		SELECT *
		FROM project
		WHERE id = #{id}
	</select>

	<select id="selectByPrimaryInterest" parameterType="map" resultType="map">
		select * from project where id=(
		select project_id from investment where id=
		<if test="tableName == 'interest'">
			(select investment_id from interest where id=#{otherId})
		</if>
		<if test="tableName == 'investment'">
			#{otherId}
		</if>
		)
	</select>

	<select id="queryCreditorAssignmentAssets" parameterType="map" resultType="map">
		select i.amount,i.time,p.id,i.id investID,pc.title from investment i,project p,project_creditor pc
		where i.project_id =p.id
		<if test="userId != null">
			and i.user_id=#{userId}
		</if>
		and (p.id=pc.project_id or (p.parent_id is not null and p.parent_id=pc.project_id))
		and p.id&gt;=506
		and (i.type=0 or i.type=2)
		order by i.time desc
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="queryCreditorAssignmentAssetsCount" parameterType="int" resultType="int">
		select count(*) from investment i,project p,project_creditor pc
		where i.project_id =p.id
		<if test="userId != null">
			and i.user_id=#{userId}
		</if>
		and (p.id=pc.project_id or (p.parent_id is not null and p.parent_id=pc.project_id))
		and i.type=0 and p.id&gt;=506
	</select>

	<select id="queryCreditorAssignmentAssetsDetail" parameterType="map" resultType="map">
		select
		i.amount,i.time investTime,p.id,p.parent_id,p.title projectTitle,p.total_amount,i.id investID,
		pc.title,DATE_ADD(p.deadline,INTERVAL
		p.limit_days DAY) time,
		pc.detail_id detailId,i.id investmentId
		from investment i,project p,project_creditor pc
		where i.project_id =p.id
		<if test="userId != null">
			and i.user_id=#{userId}
		</if>
		<if test="userId != null">
			and i.id=#{investID}
		</if>
		and (p.id=pc.project_id or (p.parent_id is not null and p.parent_id=pc.project_id))
		and (i.type=0 or i.type=2)
	</select>

	<select id="queryEnterprise" parameterType="int" resultType="string">
		SELECT name
		FROM enterprise
		WHERE id = (
		SELECT enterprise_id
		FROM project
		WHERE id =
		#{projectId})
	</select>

	<select id="queryEnterprise2" parameterType="int" resultType="map">
		SELECT
		e.name,
		p.title,
		DATE_ADD(p.deadline, INTERVAL p.limit_days DAY) time
		FROM
		enterprise e, project p
		WHERE p.enterprise_id = e.id AND p.id = #{projectId}
	</select>

	<select id="queryCreditorContractData" parameterType="map" resultType="map">

	</select>

	<select id="getProjectTitleOption" resultType="com.goochou.p2b.model.Project">
		SELECT
		*
		FROM
		project p
		WHERE
		p.parent_id IS NULL
		AND p.project_type = 0
		AND
		<if test="id != null">
			( p.id=#{id}
			or
			p.id NOT IN (
			SELECT
			pc.project_id
			FROM
			project_creditor pc
			WHERE
			pc.project_id != #{id}
			)
			)
		</if>
		<if test=" id == null">
			p.id NOT IN (
			SELECT
			pc.project_id
			FROM
			project_creditor pc
			)
		</if>
	</select>

	<select id="selectUserInvestment" parameterType="int" resultType="int">
		SELECT count(*)
		FROM project
		WHERE user_id = #{userId} AND project_type = 1 AND
		id = #{projectId}
	</select>

	<select id="selectRegularProjectList" parameterType="map" resultMap="BaseResultMap">
		select * from project where (project_type=0 and status not in(0,1)) and id &gt;=506 and tag not like '渠道%'
		order by project_type asc,status asc,
		(case when (noob=1 and status=2) then 3 when (noob=2 and status=2) then 2 else -1 end) desc,start_time desc
		<if test="start != null and limit !=null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="selectStatus2ProjectList" parameterType="map" resultMap="BaseResultMap">
		SELECT * FROM project WHERE id &gt;= 506 and project_type=0 and limit_days = #{limitDays}
		<if test="noob ==1">
			AND noob = 1
		</if>
		<if test="noob !=1">
			AND noob in (0,2,3)
		</if>
		AND STATUS in
		<foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
		ORDER BY (CASE WHEN (noob=1 AND STATUS=2) THEN 3 WHEN (noob=2 AND STATUS=2) THEN 2 ELSE -1 END) DESC,${sort}
		<if test="start != null and limit !=null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="selectStatus2ProjectCount" parameterType="map" resultType="int">
		SELECT COUNT(1) FROM project WHERE id &gt;= 506 and project_type=0 and limit_days = #{limitDays}
		<if test="noob ==1">
			AND noob = 1
		</if>
		<if test="noob !=1">
			AND noob in (0,2,3)
		</if>
		AND STATUS in
		<foreach close=")" collection="list" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</select>

	<select id="selectRegularProjectTunnelList" resultMap="BaseResultMap">
		SELECT *
		FROM project
		WHERE (project_type = 0 AND status NOT IN (0, 1)) AND id &gt;= 506
		AND tag LIKE '渠道%'
	</select>
	<select id="selectRegularProjectCount" resultType="int">
		SELECT count(*)
		FROM project
		WHERE (project_type = 0 AND status NOT IN (0, 1)) AND id &gt;=
		506 AND tag NOT LIKE '渠道%'
	</select>

	<select id="selectRegularProjectListold" parameterType="map" resultMap="BaseResultMap">
		select * from project where ((project_type=0 and status not in(0,1)) or (project_type=3 and status=1)) and id &gt;=506
		order by project_type
		asc,status asc,
		(case when (noob=1 and status=2) then 3 when noob=2 then 2 else -1 end) desc,deadline asc
		<if test="start != null and limit !=null">
			limit #{start},#{limit}
		</if>
	</select>
	<select id="selectRegularProjectCountold" resultType="int">
		SELECT count(*)
		FROM project
		WHERE ((project_type = 0 AND status NOT IN (0, 1)) OR
		(project_type = 3 AND status = 1)) AND id &gt;= 506
	</select>


	<select id="selectCreditorList" parameterType="map" resultType="map">
		SELECT
		IFNULL(pc.title, b.title) title,
		b.annualized,
		p.create_time createTime,
		p.deadline,
		p.status,
		p.total_amount totalAmount,
		p.invested_amount
		investedAmount,
		p.id,ii.trueAmount,

		IF (
		DATEDIFF(
		ADDDATE(
		b.deadline,
		INTERVAL b.limit_days DAY
		),
		NOW()
		) &gt; 0,
		DATEDIFF(
		ADDDATE(
		b.deadline,
		INTERVAL
		b.limit_days DAY
		),
		NOW()
		),
		0
		) dateDiff
		FROM
		project p
		LEFT JOIN project b ON p.parent_id = b.id
		left join (SELECT i.*,SUM(i.amount) trueAmount from
		investment i,`user`
		u where u.id=i.user_id and u.status = 0 GROUP BY i.project_id) ii on p.id = ii.project_id
		LEFT JOIN project_creditor pc ON
		pc.project_id = b.id
		WHERE
		p.project_type = 1
		<if test="status != null">
			AND p. status = #{status}
		</if>
		<if test="keyword != null">
			and (p.title like '%${keyword}%' or b.title like '%${keyword}%')
		</if>
		ORDER BY
		p.id DESC
		<if test="start != null and limit !=null">
			limit #{start},#{limit}
		</if>
	</select>


	<select id="selectCreditorCount" resultType="int">
		SELECT
		count(*)
		FROM
		project p
		LEFT JOIN project b ON p.parent_id = b.id
		LEFT JOIN project_creditor pc ON pc.project_id = b.id
		WHERE
		p.project_type = 1
		<if test="status != null">
			AND p. status = #{status}
		</if>
		<if test="keyword != null">
			and (p.title like '%${keyword}%' or b.title like '%${keyword}%')
		</if>
	</select>

	<select id="getRegularProject" parameterType="map" resultType="com.goochou.p2b.model.Project">
		SELECT *
		FROM project
		WHERE parent_id IS NULL AND project_type = 0 AND status IN
		(0, 1, 2)
		ORDER BY id DESC
	</select>

	<select id="detailNew" parameterType="int" resultMap="r2">
		SELECT
		p.*,
		pc.html_content repaymentSourceDetail
		FROM (
		SELECT
		p.*,
		pce.detail_id
		FROM project
		p LEFT JOIN project_creditor pce ON pce.project_id = p.id
		WHERE p.id = #{id}
		) p LEFT JOIN project_contract pc ON p.detail_id = pc.id
	</select>

	<select id="detailNewBond" parameterType="int" resultMap="r2">
		SELECT
		p.*,
		pc.html_content repaymentSourceDetail
		FROM (
		SELECT
		p2.enterprise_id,
		p.id,
		p.parent_id,
		p.investment_id,
		p.investment_detail_id,
		pce.detail_id,
		p.title,
		p2.annualized,
		p.increase_annualized,
		p.deadline,
		p2.limit_days,
		p2.total_amount,
		p.start_time,
		p.create_time,
		p.repayment_method,
		p.project_description,
		p.use_of_funds,
		p.repayment_source,
		p.project_type,
		p.user_id,
		p.investors_num,
		p.guarantee_institution_id,
		p.collateral_info,p.risk_control_method,p.involving_lawsuit_info,p.suggestion,p.risk_money,p.rental_income,p.address,p.invested_amount,p.`status`,p.lock_mark,
		p.tag,p.item_number,p.noob,p.product_id,p.package_id
		FROM project p, project p2 LEFT JOIN project_creditor pce ON pce.project_id = p2.id
		WHERE
		p.parent_id = p2.id AND p.id = #{id}
		) p LEFT JOIN project_contract pc ON p.detail_id = pc.id
	</select>

	<select id="detailSafe" parameterType="int" resultType="map">
		SELECT
		p.risk_money riskMoney,
		p.collateral_info collateralInfo,
		pc.html_content
		repaymentSourceDetail
		FROM (
		SELECT
		p.*,
		pce.detail_id
		FROM project p LEFT JOIN project_creditor pce ON pce.project_id = p.id
		WHERE p.id = #{id}
		) p LEFT
		JOIN project_contract pc ON p.detail_id = pc.id
	</select>

	<!-- pc专用债转详情 -->
	<select id="detailNewBondPC" parameterType="int" resultMap="r2">
		SELECT
		p.*,
		CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(p.deadline2, INTERVAL
		p.limit_days2 DAY),NOW()) ELSE DATEDIFF(ADDDATE(p.deadline2, INTERVAL p.limit_days2
		DAY), p.create_time) END as bondDayDiff,
		pc.html_content
		repaymentSourceDetail
		FROM (
		SELECT
		p.*,
		pce.detail_id,
		p2.deadline deadline2,
		p2.limit_days limit_days2
		FROM project p, project p2 LEFT JOIN
		project_creditor pce ON pce.project_id = p2.id
		WHERE p.parent_id = p2.id AND p.id = #{id}
		) p LEFT JOIN project_contract pc ON p.detail_id = pc.id
	</select>

	<select id="detailSafeBond" parameterType="int" resultType="map">
		SELECT
		p.risk_money riskMoney,
		p.collateral_info collateralInfo,
		pc.html_content
		repaymentSourceDetail
		FROM (
		SELECT
		p2.*,
		pce.detail_id
		FROM project p, project p2 LEFT JOIN project_creditor pce ON pce.project_id = p2.id
		WHERE
		p.parent_id = p2.id AND p.id = #{id}
		) p LEFT JOIN project_contract pc ON p.detail_id = pc.id
	</select>

	<select id="selectDebts" parameterType="map" resultType="map">

		select u.username ,p.create_time,p.total_amount,p.title,p.`status`,p.annualized,p.deadline,p.limit_days,
		p2.total_amount,p2.user_id,p2.parent_id
		,sum(p2.total_amount) shijitouzi
		from project p INNER JOIN project p2, user u where u.id = p2.user_id and p.id = p2.parent_id and p.id&gt;506

		<if test="status != null">
			AND p. status = #{status}
		</if>

		<if test="startTime != null and endTime == null">
			and p.create_time &gt; #{startTime}
		</if>
		<if test="startTime == null and  endTime != null">
			and p.create_time &lt; #{endTime}
		</if>
		<if test="startTime != null and  endTime != null">
			and p.create_time &gt; #{startTime} and p.create_time &lt; #{endTime}
		</if>
	</select>
	<select id="queryCurrentCreditorList" parameterType="map" resultType="map">
		select i.amount,i.time,p.id projectId,i.id investID,p.title from investment i,project p
		where i.project_id =p.id
		<if test="userId != null">
			and i.user_id=#{userId}
		</if>
		and p.id&gt;=1050
		and i.type=1
		order by i.time desc
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="queryNewCurrentCreditorList" parameterType="map" resultType="map">
		select IF(t.type=0,'转入','转出') type,t.amount,t.huo_balance,t.other_id investID,i.project_id projectId,t.time from trade_record t
		left join investment
		i on t.other_id=i.id
		where t.source=1
		<if test="source != null">
			<if test="source ==0">
				and t.type in (0,7)
			</if>
			<if test="source ==1">
				and t.type =0
			</if>
			<if test="source ==2">
				and t.type =7
			</if>
		</if>
		<if test="userId != null">
			and t.user_id=#{userId}
		</if>
		order by t.id desc
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>
	<select id="queryNewCurrentCreditorCount" parameterType="map" resultType="int">
		select count(*) from trade_record t
		where t.source=1
		<if test="source != null">
			<if test="source ==0">
				and t.type in (0,7)
			</if>
			<if test="source ==1">
				and t.type =0
			</if>
			<if test="source ==2">
				and t.type =7
			</if>
		</if>
		<if test="userId != null">
			and t.user_id=#{userId}
		</if>
	</select>


	<select id="queryCurrentCreditorCount" parameterType="int" resultType="int">
		select count(i.id) from investment i,project p
		where i.project_id =p.id
		<if test="userId != null">
			and i.user_id=#{userId}
		</if>
		and p.id&gt;=506
		and i.type=1
	</select>


	<select id="selectSuperProjectList" parameterType="int" resultMap="r">
		SELECT *
		FROM (
		SELECT
		c.id,
		c.parent_id,
		c.investment_id,
		c.deadline,
		c.total_amount,
		c.create_time,
		c.project_type,
		c.user_id,
		c.status,
		c.lock_mark,
		c.noob,
		(c.invested_amount + IFNULL(d.s, 0)) invested_amount
		FROM (
		SELECT
		p.id,
		p.parent_id,
		p.investment_id,
		p.deadline,
		p.total_amount,
		p.create_time,
		p.project_type,
		p.user_id,
		p.invested_amount,
		p.`status`,
		p.lock_mark,
		p.noob
		FROM
		project p
		LEFT JOIN project_link_project l ON
		p.id = l.parent_id

		LEFT JOIN project b ON
		l.subcalss_id = b.id

		WHERE
		p.project_type = 4
		AND p.user_id =
		#{userId}
		GROUP BY p.id
		) c
		LEFT JOIN
		(SELECT
		sum(plp.parent_amount) s,
		g.id
		FROM project_link_project plp
		LEFT JOIN project g ON plp.parent_id = g.id
		LEFT
		JOIN project h ON plp.subcalss_id = h.id
		WHERE h.status = 2
		GROUP BY g.id) d ON c.id = d.id
		) k
		ORDER BY (k.total_amount - k.invested_amount) DESC
	</select>


	<select id="selectHuoProjectSuper" parameterType="int" resultType="int">
		SELECT DISTINCT (pp.user_id)
		FROM project_link_project plp
		LEFT JOIN project
		sp ON sp.id = plp.subcalss_id
		LEFT JOIN project pp ON pp.id = plp.parent_id
		WHERE sp.id = #{projectId}
	</select>

	<select id="listMyCurrent" parameterType="map" resultType="map">
		SELECT * from (
		SELECT
		inv.id investmentId,
		inv.amount,
		inv.time,
		IF (p.parent_id is null,p.annualized,p2.annualized) annualized,
		IF (p.parent_id is
		null,p.increase_annualized,p2.increase_annualized) increaseAnnualized,
		IF (p.parent_id is null,p.title,p2.title) title,
		IF (p.parent_id is
		null,p.tag,p2.tag) tag,
		IF (p.parent_id is null,p.status,p2.status) status,
		IF (p.parent_id is null,p.total_amount,p2.total_amount) totalAmount,
		i.date,
		i.has_dividended,
		sum(interest_amount) interestAmount,
		DATE_FORMAT(max(date),'%Y-%m-%d') endDate
		FROM
		interest i,
		investment inv,
		project p LEFT
		JOIN project p2
		on p.parent_id=p2.id
		WHERE
		i.investment_id = inv.id
		AND inv.project_id = p.id
		AND p.project_type IN (0, 1)
		AND inv.user_id = #{userId}
		<if test="startDate != null and endDate != null">
			and inv.time between #{startDate} and #{endDate}
		</if>
		<if test="status==0">
			<!--剩余可计算利息的金额大于0并且项目没有回款完成的算 回款中 -->
			AND IF (p.parent_id is null,p.status,p2.status) in(2,3,4)
			AND inv.interest_usable_amount&gt;0

			<if test="orderBy == 3">
				and i.has_dividended =0
			</if>
		</if>
		<if test="status==1">
			AND (IF (p.parent_id is null,p.status,p2.status)=5
			or inv.interest_usable_amount &lt;=0)
		</if>
		GROUP BY inv.id
		) a where 1=1
		<if test="orderBy == 0">
			order by time desc
		</if>
		<if test="orderBy == 1 and status == 0">
			order by endDate asc,time desc
		</if>
		<if test="orderBy == 1 and status == 1">
			order by endDate asc
		</if>
		<if test="orderBy == 2">
			order by a.amount desc
		</if>
		<if test="orderBy == 3">
			order by date asc,time desc
		</if>
		limit #{start},#{limit}
	</select>

	<select id="listMyCurrentCount" parameterType="map" resultType="int">
		select count(*) from (
		SELECT
		inv.id investmentId,
		inv.amount,
		inv.time,
		IF (p.parent_id is null,p.annualized,p2.annualized) annualized,
		IF (p.parent_id
		is null,p.increase_annualized,p2.increase_annualized) increaseAnnualized,
		IF (p.parent_id is null,p.title,p2.title) title,
		IF (p.parent_id is
		null,p.tag,p2.tag) tag,
		IF (p.parent_id is null,p.status,p2.status) status,
		i.date,
		i.has_dividended,
		sum(interest_amount) interestAmount,
		max(date)
		endDate
		FROM
		interest i,
		investment inv,
		project p LEFT JOIN project p2
		on p.parent_id=p2.id
		WHERE
		i.investment_id = inv.id
		AND inv.project_id = p.id
		AND
		p.project_type IN (0, 1)
		AND inv.user_id = #{userId}
		<if test="startDate != null and endDate != null">
			and inv.time between #{startDate} and #{endDate}
		</if>
		<if test="status==0">
			AND IF (p.parent_id is null,p.status,p2.status) in(2,3,4)
			AND inv.interest_usable_amount&gt;0
			<if test="orderBy == 3">
				and i.has_dividended =0
			</if>
		</if>
		<if test="status==1">
			AND (IF (p.parent_id is null,p.status,p2.status)=5
			or inv.interest_usable_amount &lt;=0)
		</if>
		GROUP BY inv.id
		) a
	</select>

	<select id="getTransferAmountByInvestmentId" parameterType="int" resultType="double">
		SELECT ifnull(sum(invested_amount), 0)
		FROM project
		WHERE
		investment_id = #{investmentId};
	</select>

	<select id="getProjectById" parameterType="int" resultMap="BaseResultMap">
		SELECT *
		FROM project
		WHERE
		id = #{id}
	</select>

	<select id="selectTodayHuoProject" resultType="int">
		SELECT count(*)
		FROM project
		WHERE project_type = 2 AND to_days(create_time) = to_days(NOW())
	</select>


	<select id="projectCost" parameterType="map" resultType="map">
		select p.id,p.title,p.total_amount,p.limit_days,p.start_time,p.invested_amount,
		p.noob,p.project_type ,p.parent_id,sumAmount,p.status,

		case when
		p.increase_annualized is not null then (p.annualized- p.increase_annualized)*100 else p.annualized*100 end annualized,
		case when
		p.increase_annualized is not null then p.increase_annualized*100 else NULL end increase_annualized,
		case when time is not null and total_amount=
		invested_amount then time else NULL end time,

		sum(case when inv.type = 1 then hbAmount else 0 end ) xjhb,sum(case when inv.type = 2 then hbAmount
		else 0 end )tzhb
		from (select p2.id, p2.parent_id ,p2.noob,p2.status,p2.project_type,p2.invested_amount,p2.total_amount,
		case when p2.parent_id is not
		null then parent.title else p2.title end title,
		case when p2.parent_id is null and p2.project_type=0 then p2.limit_days else parent.limit_days end
		limit_days,
		case when p2.parent_id is not null then parent.annualized else p2.annualized end annualized,
		case when p2.parent_id is not null OR
		p2.project_type=2 then p2.create_time else p2.start_time end start_time,
		case when p2.parent_id is not null then parent.increase_annualized else
		p2.increase_annualized end increase_annualized

		from project parent right JOIN project p2 on parent.id = p2.parent_id where p2.project_type not
		in(3,4)
		) p left JOIN
		(select project_id,inv.amount invAmount,hb.amount hbAmount,inv.time,hb.type from investment inv left join user u on inv.user_id
		= u.id LEFT JOIN hongbao hb
		on inv.hongbao_id= hb.id

		RIGHT JOIN(
		select id from project p
		where p.project_type not in(3,4)
		<if test="keyword != null">
			and (p.title like '%${keyword}%')
		</if>
		<if test="startTime != null and endTime != null">
			and p.start_time between #{startTime} and #{endTime}
		</if>

		<if test="type != null ">
			<if test="type == 0">
				and p.project_type=0 and noob=0
			</if>
			<if test="type == 1">
				and p.project_type=2
			</if>
			<if test="type == 2">
				and p.project_type=0 and noob = 1
			</if>

			<if test="type == 4">
				and p.project_type=0 and noob = 2
			</if>

			<if test="type == 3">
				and p.parent_id is not null
			</if>

			<if test="limitDays&gt;0  ">
				and p.limit_days =#{limitDays }
			</if>

		</if>
		order by p.id DESC
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>

		) ps on ps.id = inv.project_id
		where u.status=0)
		inv on p.id = inv.project_id
		LEFT JOIN (
		select sum(amount) sumAmount,p.id from investment inv LEFT
		JOIN project p on inv.project_id = p.id LEFT JOIN user u on u.id = inv.user_id where u.status=0
		GROUP BY p.id) invSum on p.id = invSum.id
		where 1=1
		<if test="keyword != null">
			and (p.title like '%${keyword}%')
		</if>
		<if test="startTime != null and endTime != null">
			and p.start_time between #{startTime} and #{endTime}
		</if>

		<if test="type != null ">
			<if test="type == 0">
				and p.project_type=0 and noob=0
			</if>
			<if test="type == 1">
				and p.project_type=2
			</if>
			<if test="type == 2">
				and p.project_type=0 and noob = 1
			</if>

			<if test="type == 4">
				and p.project_type=0 and noob = 2
			</if>


			<if test="type == 3">
				and p.parent_id is not null
			</if>

			<if test="limitDays&gt;0  ">
				and p.limit_days =#{limitDays }
			</if>

		</if>
		GROUP BY p.id order by p.id DESC
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>


	</select>


	<select id="projectCost1" parameterType="map" resultType="map">
		select p.id,p.title,p.total_amount,p.limit_days,p.start_time,p.invested_amount,
		p.noob,p.project_type ,p.parent_id,sumAmount,
		case
		when
		p.project_type=2 then '活期'
		when p.parent_id is null and p.noob=0 then '直投'
		when p.parent_id is null and p.noob=1 then '新手标'
		when p.parent_id is null
		and p.noob=2 then 'vip'
		when p.parent_id is not null then '债权'

		else '其他' end leixing,
		case when p.increase_annualized is not null then (p.annualized-
		p.increase_annualized)*100 else p.annualized*100 end annualized,
		case when p.increase_annualized is not null then p.increase_annualized*100 else NULL
		end increase_annualized,
		case when time is not null and total_amount= invested_amount then time else NULL end time,

		case
		when p.status=0
		and(project_type=0 or project_type=2) then '创建'
		when p.status=1 and(project_type=0 or project_type=2) then '预购'
		when p.status=2 and(project_type=0 or
		project_type=2) then '投资中'
		when p.status=3 and(project_type=0 or project_type=2) then '投资完成'
		when p.status=4 and(project_type=0 or project_type=2)
		then '还款中'
		when p.status=5 and(project_type=0 or project_type=2) then '还款成功'
		when p.status=6 and(project_type=0 or project_type=2) then '还款失败'

		when
		p.status=0 and(project_type=1 ) then '转让中'
		when p.status=1 and(project_type=1 ) then '已转让'
		when p.status=2 and(project_type=1 ) then '已取消'
		else '其他'
		end status,
		sum(case when inv.type = 1 then hbAmount else 0 end ) xjhb,sum(case when inv.type = 2 then hbAmount else 0 end )tzhb
		from (select p2.id,
		p2.parent_id ,p2.noob,p2.status,p2.project_type,p2.invested_amount,p2.total_amount,
		case when p2.parent_id is not null then parent.title else
		p2.title end title,
		case when p2.parent_id is null and p2.project_type=0 then p2.limit_days else parent.limit_days end limit_days,
		case when
		p2.parent_id is not null then parent.annualized else p2.annualized end annualized,
		case when p2.parent_id is not null OR p2.project_type=2 then
		p2.create_time else p2.start_time end start_time,
		case when p2.parent_id is not null then parent.increase_annualized else p2.increase_annualized end
		increase_annualized

		from project parent right JOIN project p2 on parent.id = p2.parent_id where p2.project_type not in(3,4)
		) p left JOIN
		(select
		project_id,inv.amount invAmount,hb.amount hbAmount,inv.time,hb.type from investment inv left join user u on inv.user_id = u.id LEFT JOIN hongbao hb
		on inv.hongbao_id= hb.id where u.status=0 ORDER BY inv.time)
		inv on p.id = inv.project_id
		LEFT JOIN (
		select sum(amount) sumAmount,p.id from investment
		inv LEFT JOIN project p on inv.project_id = p.id LEFT JOIN user u on u.id = inv.user_id where u.status=0
		GROUP BY p.id) invSum on p.id = invSum.id
		where 1=1
		<if test="keyword != null">
			and (p.title like '%${keyword}%')
		</if>
		<if test="startTime != null and endTime != null">
			and p.start_time between #{startTime} and #{endTime}
		</if>

		<if test="type != null ">
			<if test="type == 0">
				and p.project_type=0 and noob=0
			</if>
			<if test="type == 1">
				and p.project_type=2
			</if>
			<if test="type == 2">
				and p.project_type=0 and noob = 1
			</if>

			<if test="type == 4">
				and p.project_type=0 and noob = 2
			</if>


			<if test="type == 3">
				and p.parent_id is not null
			</if>

			<if test="limitDays&gt;0  ">
				and p.limit_days =#{limitDays }
			</if>

		</if>
		GROUP BY p.id order by p.id DESC

	</select>


	<select id="countProjectCost" parameterType="map" resultType="int">
		select count(*) from (
		select p.id
		from (select p2.id, p2.parent_id ,p2.noob,p2.status,p2.project_type,p2.invested_amount,p2.total_amount,
		case when
		p2.parent_id is not null then parent.title else p2.title end title,
		case when p2.parent_id is null and p2.project_type=0 then p2.limit_days else null
		end limit_days,
		case when p2.parent_id is not null then parent.annualized else p2.annualized end annualized,
		case when p2.parent_id is not null OR
		p2.project_type=2 then p2.create_time else p2.start_time end start_time,
		case when p2.parent_id is not null then parent.increase_annualized else
		p2.increase_annualized end increase_annualized

		from project parent right JOIN project p2 on parent.id = p2.parent_id where p2.project_type not
		in(3,4)
		) p left JOIN
		(select project_id,inv.amount invAmount,hb.amount hbAmount,inv.time,hb.type from investment inv left join user u on inv.user_id
		= u.id LEFT JOIN hongbao hb
		on inv.hongbao_id= hb.id where u.status=0 )
		inv on p.id = inv.project_id
		LEFT JOIN (
		select sum(amount) sumAmount,p.id from
		investment inv LEFT JOIN project p on inv.project_id = p.id LEFT JOIN user u on u.id = inv.user_id where u.status=0
		GROUP BY p.id) invSum on p.id =
		invSum.id
		where 1=1
		<if test="keyword != null">
			and (p.title like '%${keyword}%')
		</if>
		<if test="startTime != null and endTime != null">
			and p.start_time between #{startTime} and #{endTime}
		</if>

		<if test="type != null ">
			<if test="type == 0">
				and p.project_type=0 and noob=0
			</if>
			<if test="type == 1">
				and p.project_type=2
			</if>
			<if test="type == 2">
				and p.project_type=0 and noob = 1
			</if>

			<if test="type == 4">
				and p.project_type=0 and noob = 2
			</if>


			<if test="type == 3">
				and p.parent_id is not null
			</if>

			<if test="limitDays&gt;0  ">
				and p.limit_days =#{limitDays }
			</if>

		</if>
		GROUP BY p.id
		) m
	</select>

	<select id="selectRegularReport" parameterType="map" resultType="com.goochou.p2b.model.Project">

		select tt.* from (
		select t.*, i.id investmentId, itst.date lastRepayTime
		from (
		select p.*,ii.trueAmount from project p left join (SELECT
		i.*,SUM(i.amount) trueAmount from investment i,`user`
		u where u.id=i.user_id and u.status !=3 GROUP BY i.project_id) ii on p.id = ii.project_id
		<where>
			<if test="keyword != null">
				and (p.title like '%${keyword}%' or p.deadline like binary '${keyword}%')
			</if>
			<if test="status != null">
				and p.status = #{status}
			</if>
			<if test="noob != null">
				and p.noob = #{noob}
			</if>

			and p.project_type = 0
		</where>
		) t

		left join investment i
		on i.project_id = t.id
		left join interest itst
		on itst.investment_id = i.id
		order by t.id, date desc) tt
		GROUP BY tt.id;
	</select>


	<select id="selectPackageList" parameterType="map" resultMap="BaseResultMap">
		select * from project p where ((p.project_type=5 and p.status=1) or (p.project_type=6 and p.status=0))
		<if test="productId != null">
			and p.product_id=#{productId}
		</if>
		order by (case when (p.parent_id is not null) then 1 else 2 end),p.parent_id
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>

	<select id="getProjectListByProduct" parameterType="int" resultMap="r">
		SELECT p.*
		FROM project p, project_package pp, product pd
		WHERE pp.status = 1
		AND p.package_id = pp.id
		AND pp.product_id = pd.id
		AND pd.id = #{productId}
		AND p.status = 2 AND p.total_amount - p.invested_amount &gt; 0 AND
		pp.status = 1
		ORDER BY project_type DESC, start_time ASC
	</select>

	<select id="queryCycleList" parameterType="map" resultMap="r">
		select p.* from project p
		left join project_package pp on p.package_id=pp.id LEFT JOIN product pt on pt.id = p.product_id
		where p.project_type=5
		<if test="keyword != null">
			and p.title like '%${keyword}%'
		</if>
		<if test="status != null">
			and p.status =#{status}
		</if>
		<if test="title != null">
			and pp.title like '%${title}%'
		</if>
		<if test="title1 != null">
			and pt.name like '%${title1}%'
		</if>
		<if test="startTime != null">
			and p.create_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			and date_format(p.create_time, '%Y-%m-%d') &lt;= #{endTime}
		</if>
		<if test="startDate != null">
			and p.deadline is not null and DATE_ADD(p.deadline,INTERVAL p.limit_days day) &gt;= #{startDate}
		</if>
		<if test="endDate != null">
			and p.deadline is not null and date_format(DATE_ADD(p.deadline,INTERVAL p.limit_days day), '%Y-%m-%d') &lt;= #{endDate}
		</if>
		order by p.id desc
		<if test="start != null and limit != null">
			limit #{start},#{limit}
		</if>
	</select>
	<select id="queryCycleCount" parameterType="map" resultType="int">
		select count(*) from project p
		left join project_package pp on p.package_id=pp.id LEFT JOIN product pt on pt.id = p.product_id
		where p.project_type=5
		<if test="keyword != null">
			and p.title like '%${keyword}%'
		</if>
		<if test="status != null">
			and p.status =#{status}
		</if>
		<if test="title != null">
			and pp.title like '%${title}%'
		</if>
		<if test="title1 != null">
			and pt.name like '%${title1}%'
		</if>
		<if test="startTime != null">
			and p.create_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			and date_format(p.create_time, '%Y-%m-%d') &lt;= #{endTime}
		</if>
		<if test="startDate != null">
			and p.deadline is not null and DATE_ADD(p.deadline,INTERVAL p.limit_days day) &gt;= #{startDate}
		</if>
		<if test="endDate != null">
			and p.deadline is not null and date_format(DATE_ADD(p.deadline,INTERVAL p.limit_days day), '%Y-%m-%d') &lt;= #{endDate}
		</if>
	</select>


	<select id="selectProjectLimit" resultType="map">
		SELECT
		(min(annualized) * 100) minAnnualized,
		(max(annualized) * 100) maxAnnualized,
		min(limit_days)
		minDays,
		max(limit_days) maxDays,
		100 minAmount
		FROM project
		WHERE project_type = 0 AND noob != 1
	</select>

	<select id="selectByExpMoneyIdOrRateCouponId" parameterType="map" resultType="string">
		SELECT IFNULL(t.name, IFNULL(p.title, pp.title)) title
		FROM
		${tableName} r
		LEFT JOIN investment i ON r.investment_id = i.id
		LEFT JOIN project p ON i.project_id = p.id
		LEFT JOIN project pp ON p.parent_id = pp.id
		LEFT JOIN product t ON i.product_id = t.id
		WHERE r.id = #{otherId}
	</select>

	<select id="getThreeInvestors" parameterType="map" resultType="map">
		SELECT
		username,
		sum(i.amount) amount
		FROM
		user, project, investment i
		WHERE user.id
		= i.user_id AND project.id = i.project_id AND project.id = #{projectId}
		AND user.status IN (0, 4)
		GROUP BY i.user_id
		ORDER BY amount DESC LIMIT 3
	</select>

	<select id="queryCanAutoReleaseProjects" parameterType="map" resultType="com.goochou.p2b.model.Project">
		select * from project p where limit_days in (${days})
		and p.`status` =
		0 and project_type = 0
		order by p.sort, p.create_time
	</select>

	<select id="querySellOutProjectCountByLimitDays" parameterType="map" resultType="int">
		select days from auto_release_project_config ar
		left join
		(select limit_days, count from (
		select count(1) count, limit_days from project where status = 2 and project_type = 0 and limit_days in (${days})
		group by
		limit_days) t) t2
		on ar.days = t2.limit_days
		where ar.is_deleted = 1 and t2.count is null;

	</select>

	<update id="updateProjectSortBylimitDays" parameterType="map">
		update project set sort = sort + 1 where limit_days = #{days} and sort != 99 and
		status = 0
		and sort &gt;= #{sort}
	</update>

	<select id="selectRegularProjectLimitList" resultType="map">
		SELECT pc.noob,id,project_title projectTitle,annualized,tag,pc.limit_days
		limitDays,pre_amount preAmount,IFNULL(leftAmount,0),sort,increase_annualized
		increaseAnnualized
		FROM project_class pc LEFT join (
		SELECT
		limit_days,noob,SUM(total_amount-invested_amount) leftAmount FROM project
		WHERE id &gt;=506 AND project_type=0 AND STATUS =2 AND
		total_amount-invested_amount&gt;100
		GROUP BY limit_days
		) AS p on pc.limit_days= p.limit_days
		AND pc.noob = p.noob

		where pc.status =1 ORDER BY sort ASC
	</select>

	<select id="getProjectClassTotalAmount" resultType="double">
		SELECT SUM(total_amount - invested_amount) leftAmount FROM project
		WHERE id &gt;= 506 AND project_type = 0 AND STATUS = 2 AND total_amount -
		invested_amount &gt; 100
		<if test="noob ==1">
			AND noob = 1
		</if>
		<if test="noob !=1">
			AND noob in (0,2,3)
		</if>
		AND limit_days =#{limitDays}
	</select>

	<select id="queryProjectListCount" parameterType="map" resultType="int">
		SELECT
		count(*)
		FROM
		tc_contract_file f
		LEFT JOIN `user` u ON u.id = f.landlord_id
		LEFT JOIN landlord_detail d ON d.user_id = f.landlord_id
		WHERE
		f.status
		= 'Filed'
		<if test="isCreatedProject != null and isCreatedProject != ''">
			AND f.is_created_project = #{isCreatedProject}
		</if>

		<!-- &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;if test="startDate != null and startDate != ''"&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; AND f.lend_begin_time &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt;= #{startDate} &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;if test="endDate != null and endDate != ''"&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; AND 
			f.lend_begin_time &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;= #{endDate} &amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;lt;/if&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;gt; -->
		<if test="orderno != null and orderno != ''">
			AND f.contract_id = #{orderno}
		</if>
	</select>

	<!-- 批量插入 -->
	<insert id="insertProjectList" parameterType="com.goochou.p2b.model.Project">
		INSERT INTO project
		(
		id, parent_id, package_id,
		product_id, investment_id, investment_detail_id,
		enterprise_id, title, annualized,
		increase_annualized,
		deadline, limit_days,
		total_amount, start_time, create_time,
		repayment_method, project_description, use_of_funds,
		repayment_source, project_type,
		user_id,
		investors_num, guarantee_institution_id, collateral_info,
		risk_control_method, involving_lawsuit_info,
		suggestion, risk_money, rental_income,
		address, invested_amount, status,
		lock_mark, tag, item_number,noob,project_risk_grade,rate_coupon_days,contract_id,expiry_date,rent_sum,transferable,
		plat_service_charge
		)
		VALUES
		<foreach collection="list" index="i" item="item" separator=",">
			(
			#{item.id,jdbcType=INTEGER}, #{item.parentId,jdbcType=INTEGER},
			#{item.packageId,jdbcType=INTEGER},
			#{item.productId,jdbcType=INTEGER}, #{item.investmentId,jdbcType=INTEGER},
			#{item.investmentDetailId,jdbcType=INTEGER},
			#{item.enterpriseId,jdbcType=INTEGER}, #{item.title,jdbcType=VARCHAR},
			#{item.annualized,jdbcType=REAL},
			#{item.increaseAnnualized,jdbcType=REAL}, #{item.deadline,jdbcType=TIMESTAMP}, #{item.limitDays,jdbcType=INTEGER},
			#{item.totalAmount,jdbcType=DOUBLE}, #{item.startTime,jdbcType=TIMESTAMP}, #{item.createTime,jdbcType=TIMESTAMP},
			#{item.repaymentMethod,jdbcType=INTEGER}, #{item.projectDescription,jdbcType=VARCHAR}, #{item.useOfFunds,jdbcType=VARCHAR},
			#{item.repaymentSource,jdbcType=VARCHAR}, #{item.projectType,jdbcType=INTEGER}, #{item.userId,jdbcType=INTEGER},
			#{item.investorsNum,jdbcType=INTEGER}, #{item.guaranteeInstitutionId,jdbcType=INTEGER}, #{item.collateralInfo,jdbcType=VARCHAR},
			#{item.riskControlMethod,jdbcType=VARCHAR}, #{item.involvingLawsuitInfo,jdbcType=VARCHAR},
			#{item.suggestion,jdbcType=VARCHAR},
			#{item.riskMoney,jdbcType=VARCHAR}, #{item.rentalIncome,jdbcType=DOUBLE},
			#{item.address,jdbcType=VARCHAR}, #{item.investedAmount,jdbcType=DOUBLE},
			#{item.status,jdbcType=INTEGER},
			#{item.lockMark,jdbcType=INTEGER}, #{item.tag,jdbcType=VARCHAR}, #{item.itemNumber,jdbcType=VARCHAR},
			#{item.noob,jdbcType=INTEGER},#{item.projectRiskGrade,jdbcType=INTEGER},#{item.lendBeginTime,jdbcType=TIMESTAMP},#{item.rateCouponDays,jdbcType=INTEGER},
			#{item.contractId,jdbcType=VARCHAR},#{item.expiryDate,jdbcType=TIMESTAMP},#{item.rentSum,jdbcType=DOUBLE},#{item.transferable,jdbcType=INTEGER},
			#{item.platServiceCharge,jdbcType=DOUBLE}
			)
		</foreach>
	</insert>

	<select id="selectRegularlyProjectCount" parameterType="map" resultType="int">
		SELECT count(*)
		FROM project
		WHERE
		(project_type=0 AND STATUS NOT IN(0,1))
		AND id &gt;=506
		AND (tag NOT LIKE '渠道%' or tag is null)
		<if test="onlyNewHand !=null">
			and noob=1
		</if>
		<if test="noNewHand !=null">
			and noob !=1
		</if>

		<if test="status !=null">
			<!-- 正在投标 -->
			<if test="status == 1">
				and status=2
				<!-- 规定可投资金额必须大于100 -->
				and total_amount - invested_amount &gt;=100
			</if>
			<!-- 还款中 -->
			<if test="status == 2">
				<!-- 正在投标中，但投资金额小于100也算在还款中 -->
			 		<![CDATA[
			 			and (status=3 or status=4 or (status=2 and total_amount - invested_amount < 100)) 
			 		 ]]>
			</if>
			<!-- 还款结束 -->
			<if test="status == 3">
				and status &gt;=5
			</if>
		</if>

		<if test="termType !=null">
			and limit_days = #{termType,jdbcType=INTEGER}
		</if>
	</select>

	<select id="selectRegularlyProjectListPage" parameterType="map" resultMap="BaseResultMap">
		SELECT *
		FROM project
		WHERE
		(project_type=0 AND STATUS NOT IN(0,1))
		AND id &gt;=506
		AND (tag NOT LIKE '渠道%' or tag is null)
		<if test="onlyNewHand !=null">
			and noob=1
		</if>
		<if test="noNewHand !=null">
			and noob !=1
		</if>

		<if test="status !=null">
			<!-- 正在投标 -->
			<if test="status == 1">
				and status=2
				<!-- 规定可投资金额必须大于100 -->
				and total_amount - invested_amount &gt;=100
			</if>
			<!-- 还款中 -->
			<if test="status == 2">
				<!-- 正在投标中，但投资金额小于100也算在还款中 -->
			 		<![CDATA[
			 			and (status=3 or status=4 or (status=2 and total_amount - invested_amount < 100)) 
			 		 ]]>
			</if>
			<!-- 还款结束 -->
			<if test="status == 3">
				and status &gt;=5
			</if>
		</if>

		<if test="termType !=null">
			and limit_days = #{termType,jdbcType=INTEGER}
		</if>

		ORDER BY 
		<![CDATA[
			if((STATUS=2 and (total_amount-invested_amount)<100),3,STATUS) ASC,
		]]>
		<!-- (正在投资中，具有发布时间值，其他状态发布时间为null),消除发布时间对募集完成排序的干扰 -->
		if((STATUS=2 and (total_amount-invested_amount)&gt;=100),start_time,null) ASC,

		<!--(正在投资中，募集完成时间为null，其他状态募集发布时间正常),消除募集完成时间对投资中排序的干扰 -->
		<![CDATA[
			if((STATUS=2 and (total_amount-invested_amount)>=100),null,deadline) desc
		]]>

		<if test="limitStart != null and limitEnd !=null">
			LIMIT #{limitStart,jdbcType=INTEGER},#{limitEnd,jdbcType=INTEGER}
		</if>
	</select>

	<select id="selectAssignmentOfDebtCount" parameterType="map" resultType="int">
		SELECT
		count(*)
		FROM project p
		LEFT JOIN
		project pp
		ON p.parent_id = pp.id
		WHERE
		<!-- 债权转让固定的查询条件 -->
		p.parent_id IS NOT NULL
		AND p.parent_id &gt; 506
		AND ((p.project_type=1) or (p.project_type=7 and p.is_show_at_bond_invest=1))
		AND p.`status`!=2

		<if test="status !=null">
			<!-- 转让中 -->
			<if test="status == 0">
				and p.`status`= 0
				and p.total_amount - p.invested_amount &gt;=100
			</if>
			<!-- 转让成功 -->
			<if test="status == 1">
					<![CDATA[
						and (p.`status`= 1 or (p.`status`= 0 and p.total_amount - p.invested_amount < 100))
					]]>
			</if>
		</if>

		<if test="limitDaysStart !=null">
			and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline,
			INTERVAL
			pp.limit_days DAY), p.create_time) END &gt; #{limitDaysStart,jdbcType=INTEGER}
		</if>

		<if test="limitDaysEnd !=null">
				<![CDATA[
					and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY), p.create_time) END <= #{limitDaysEnd,jdbcType=INTEGER}
				]]>
		</if>
	</select>

	<select id="selectAssignmentOfDebtListPage" parameterType="map" resultType="map">
		SELECT
		p.*,
		pp.title AS trueTitle,
		round((pp.annualized - pp.increase_annualized)*100,1) as trueAnnualized,
		round(pp.increase_annualized*100,1) as
		addRate,
		round(p.total_amount-p.invested_amount,2) as voteAmount,
		case when p.total_amount-p.invested_amount &gt; 0
		then
		round(((p.total_amount-p.invested_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days
		DAY),NOW()))/365,2)
		else
		round(((p.total_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time))/365,2)
		end as expectedProfit,

		CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE
		DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days
		DAY), p.create_time) END as dayDiff,
		pp.limit_days as trueLimitDays,
		p.bond_management_rate
		bondManagementRate,

		case when p.total_amount-p.invested_amount &gt; 0
		then
		((round(((p.total_amount-p.invested_amount)*(pp.annualized -
		pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()))/365,2)) + p.bond_management_rate *
		(p.total_amount-p.invested_amount)) / (p.total_amount-p.invested_amount) / (DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW())) * 365
		* 100
		else
		((round(((p.total_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time))/365,2)) + p.bond_management_rate *
		p.total_amount) / p.total_amount / (DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time)) * 365 * 100
		end as orderbyRate
		FROM project p
		LEFT JOIN
		project pp
		ON p.parent_id = pp.id
		WHERE
		<!-- 债权转让固定的查询条件 -->
		p.parent_id IS NOT NULL
		AND p.parent_id &gt; 506
		AND ((p.project_type=1) or (p.project_type=7 and p.is_show_at_bond_invest=1))
		AND p.`status`!=2

		<if test="status !=null">
			<!-- 转让中 -->
			<if test="status == 0">
				and p.`status`= 0
				and p.total_amount - p.invested_amount &gt;=100
			</if>
			<!-- 转让成功 -->
			<if test="status == 1">
						<![CDATA[
							and (p.`status`= 1 or (p.`status`= 0 and p.total_amount - p.invested_amount < 100))
						]]>
			</if>
		</if>

		<if test="limitDaysStart !=null">
			and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline,
			INTERVAL
			pp.limit_days DAY), p.create_time) END &gt; #{limitDaysStart,jdbcType=INTEGER}
		</if>

		<if test="limitDaysEnd !=null">
					<![CDATA[
						and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY), p.create_time) END <= #{limitDaysEnd,jdbcType=INTEGER}
					]]>
		</if>

		order by
		p.status asc,
		<!-- 转让中，标年华收益正常，非转让中为0，排除年化收益对非转让完成的干扰 -->
		if(p.status=0,orderbyRate,0) desc,
		<!-- 转让中，期限正常，非转让中为0，排除期限对非转让完成的干扰 -->
		if(p.status=0,dayDiff,0) asc,
		<!-- 转让中，发起时间正常，非转让中为null，排除发起时间对非转让完成的干扰 -->
		if(p.status=0,p.create_time,null) asc,
		<!-- 转让中，发起时间为null，非转让中正常，排除发起时间(应为2者的排序规则不一样)转让中的干扰 -->
		if(p.status=0,null,p.create_time) desc
		<if test="limitStart != null and limitEnd !=null">
			LIMIT #{limitStart,jdbcType=INTEGER},#{limitEnd,jdbcType=INTEGER}
		</if>
	</select>

	<!-- 债权转让专用查询字段集合 -->
	<sql id="AssignmentOfDebt_Column_List">
		p.*,
		pp.title AS trueTitle,
		round((pp.annualized - pp.increase_annualized)*100,1) as trueAnnualized,
		round(pp.increase_annualized*100,1) as
		addRate,
		round(p.total_amount-p.invested_amount,2) as voteAmount,
		case when p.total_amount-p.invested_amount &gt; 0
		then
		round(((p.total_amount-p.invested_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days
		DAY),NOW()))/365,2)
		else
		round(((p.total_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time))/365,2)
		end as expectedProfit,

		CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE
		DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days
		DAY), p.create_time) END as dayDiff,
		pp.limit_days as trueLimitDays,
		p.bond_management_rate
		bondManagementRate,
		case when p.total_amount-p.invested_amount &gt; 0
		then
		((round(((p.total_amount-p.invested_amount)*(pp.annualized -
		pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()))/365,2)) + p.bond_management_rate *
		(p.total_amount-p.invested_amount)) / (p.total_amount-p.invested_amount) / (DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW())) * 365
		* 100
		else
		((round(((p.total_amount)*(pp.annualized - pp.increase_annualized)*DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time))/365,2)) + p.bond_management_rate *
		p.total_amount) / p.total_amount / (DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),
		p.create_time)) * 365 * 100
		end as orderbyRate
	</sql>

	<sql id="AssignmentOfDebt_Condition_SQL">
		<!-- 债权转让固定的查询条件 -->
		p.parent_id IS NOT NULL
		AND p.parent_id &gt;= 506
		AND ((p.project_type=1) or (p.project_type=7 and p.is_show_at_bond_invest=1))
		AND p.`status`!=2

		<if test="limitDaysStart !=null">
			and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline,
			INTERVAL pp.limit_days DAY), p.create_time) END &gt; #{limitDaysStart,jdbcType=INTEGER}
		</if>

		<if test="limitDaysEnd !=null">
			<![CDATA[
				and CASE WHEN p.status= 0 THEN DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY),NOW()) ELSE DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY), p.create_time) END <= #{limitDaysEnd,jdbcType=INTEGER}
			]]>
		</if>
	</sql>

	<sql id="AssignmentOfDebt_Condition_Order">
		p.status asc,
		<!-- 转让中，标年华收益正常，非转让中为0，排除年化收益对非转让完成的干扰 -->
		if(p.status=0,orderbyRate,0) desc,
		<!-- 转让中，期限正常，非转让中为0，排除期限对非转让完成的干扰 -->
		if(p.status=0,dayDiff,0) asc,
		<!-- 转让中，发起时间正常，非转让中为null，排除发起时间对非转让完成的干扰 -->
		if(p.status=0,p.create_time,null) asc,
		<!-- 转让中，发起时间为null，非转让中正常，排除发起时间(应为2者的排序规则不一样)转让中的干扰 -->
		if(p.status=0,null,p.create_time) desc
	</sql>

	<!-- 债权转让最新的排序（分用户登录和未登录状态）列表 -->
	<select id="selectAssignmentOfDebtNewListPage" parameterType="map" resultType="map">
		select * from
		(
		<!-- 查询全部和转让中需要 -->
		<if test="status == null or status == 0 ">
			<!-- 查询不包含用户的6条转让中的数据 -->
			(select
			<include refid="AssignmentOfDebt_Column_List" />
			FROM project p
			LEFT JOIN
			project pp
			ON p.parent_id = pp.id
			WHERE
			<include refid="AssignmentOfDebt_Condition_SQL" />
			and p.`status`= 0
			and p.total_amount - p.invested_amount &gt;=100
			<if test="userId != null">
				and p.user_id !=#{userId,jdbcType=INTEGER}
			</if>
			order by
			p.id desc
			)
			<!-- 查询登录用户的转让中的数据 -->
			<if test="userId != null">
				union
				(select
				<include refid="AssignmentOfDebt_Column_List" />
				FROM project p
				LEFT JOIN
				project pp
				ON p.parent_id = pp.id
				WHERE
				<include refid="AssignmentOfDebt_Condition_SQL" />
				and p.`status`= 0
				and p.total_amount - p.invested_amount &gt;=100
				and p.user_id =#{userId,jdbcType=INTEGER})
			</if>
		</if>

		<!-- 只有全部查询时需要出现此关键字 -->
		<if test="status == null">
			union
		</if>
		<!-- 查询已转让完成的数据,只有在查询全部和转让完成状态 -->
		<if test="status == null or status == 1 ">
			(select
			<include refid="AssignmentOfDebt_Column_List" />
			FROM project p
			LEFT JOIN
			project pp
			ON p.parent_id = pp.id
			WHERE
			<include refid="AssignmentOfDebt_Condition_SQL" />
			and p.`status`= 1
			)
		</if>
		) t
		order by
		t.status asc,
		-- t.id desc

		t.bond_management_rate desc, t.create_time

		<if test="limitStart != null and limitEnd !=null">
			LIMIT #{limitStart,jdbcType=INTEGER},#{limitEnd,jdbcType=INTEGER}
		</if>
	</select>

	<select id="selectAssignmentOfDebtNewCount" parameterType="map" resultType="int">
		select count(*) from
		(
		<!-- 查询全部和转让中需要 -->
		<if test="status == null or status == 0 ">
			<!-- 查询不包含用户的6条转让中的数据 -->
			(select
			p.id
			FROM project p
			LEFT JOIN
			project pp
			ON p.parent_id = pp.id
			WHERE
			<include refid="AssignmentOfDebt_Condition_SQL" />
			and p.`status`= 0
			and p.total_amount - p.invested_amount &gt;=100
			<if test="userId != null">
				and p.user_id !=#{userId,jdbcType=INTEGER}
			</if>
			)
			<!-- 查询登录用户的转让中的数据 -->
			<if test="userId != null">
				union
				(select
				p.id
				FROM project p
				LEFT JOIN
				project pp
				ON p.parent_id = pp.id
				WHERE
				<include refid="AssignmentOfDebt_Condition_SQL" />
				and p.`status`= 0
				and p.total_amount - p.invested_amount &gt;=100
				and p.user_id =#{userId,jdbcType=INTEGER})
			</if>
		</if>

		<!-- 只有全部查询时需要出现此关键字 -->
		<if test="status == null">
			union
		</if>
		<!-- 查询已转让完成的数据,只有在查询全部和转让完成状态 -->
		<if test="status == null or status == 1 ">
			(select
			p.id
			FROM project p
			LEFT JOIN
			project pp
			ON p.parent_id = pp.id
			WHERE
			<include refid="AssignmentOfDebt_Condition_SQL" />
			and p.`status`= 1
			)
		</if>
		) t
	</select>

	<select id="queryByLimitDays" parameterType="int" resultMap="BaseResultMap">
		SELECT * FROM project
		WHERE
		status = 2 AND project_type = 0 AND noob IN (0,3) AND
		limit_days = #{limitDays}
		ORDER BY (total_amount-invested_amount) DESC
		LIMIT 1
	</select>

	<select id="queryByContractId" parameterType="String" resultMap="BaseResultMap">
		SELECT * FROM project WHERE contract_id = #{contractId}
	</select>

	<select id="queryP2pEyeLoansData" parameterType="map" resultType="com.goochou.p2b.model.vo.p2peye.P2pEyeLoansData">
		select id, '鑫聚财' platform_name, CONCAT('https://www.xinjucai.com/project/detail?projectId=', id) url,
		title,
		(select CONCAT(left(name, 1), '***' )
		from enterprise where id = p.enterprise_id) username,
		(select id from enterprise where id = p.enterprise_id) userid,
		case status when 2 then 0 else 1
		end status,
		0.1 c_type, total_amount amount, annualized rate, limit_days period, 0 p_type, 2 pay_way,
		FORMAT(invested_amount/total_amount, 1) process,
		0 reward, 0 guarantee, create_time start_time,
		case when deadline is null then (select time from investment where project_id = p.id order by id desc
		limit 1 ) else deadline end end_time,
		(select
		count(1) from investment where project_id = p.id) invest_num, 0 c_reward
		from project p
		where project_type
		= 0
		AND total_amount &gt;= 50
		<if test="inputStatus == 0">
			and status = 2
			and create_time &gt;= #{beginTime} and create_time &lt;= #{endTime}
		</if>
		<if test="inputStatus == 1">
			and status &gt; 2
			and deadline &gt;= #{beginTime} and deadline &lt;= #{endTime}
		</if>
		HAVING process &gt; 0
		limit #{begin}, #{limit}
	</select>

	<select id="queryP2pEyeInvestData" parameterType="map" resultType="com.goochou.p2b.model.vo.p2peye.P2pEyeInvestData">
		select t.id, CONCAT('https://www.xinjucai.com/project/detail?projectId=', t.id) link,
		CONCAT(left(u.true_name, 1), '***' ) username,
		u.id userid,
		amount account, time add_time
		from investment i
		INNER JOIN
		(select id from project where
		project_type = 0
		<if test="inputStatus == 0">
			and status = 2
			and create_time &gt;= #{beginTime} and create_time &lt;= #{endTime}
		</if>
		<if test="inputStatus == 1">
			and status &gt; 2
			and deadline &gt;= #{beginTime} and deadline &lt;= #{endTime}
		</if>
		limit #{begin}, #{limit}) t
		on i.project_id = t.id
		inner join user u
		on i.user_id = u.id where u.status = 0
	</select>
	<select id="queryBondPayList" parameterType="int" resultType="com.goochou.p2b.model.vo.BondPayVO">
		select
		a.date date,
		c.total_amount totalAmount,
		c.deadline deadline,
		c.annualized-c.increase_annualized annualized,
		c.limit_days limitDay,
		a.has_dividended
		hasDividended
		from interest a
		join investment b on
		a.investment_id=b.id
		join project c on b.project_id=c.id
		where c.project_type=0 and c.`status` in (4,5) and c.id=#{projectId}
		GROUP BY c.id, a.date
	</select>
	<select id="getProjectPicture" parameterType="int" resultType="map">
		SELECT u.* FROM project p LEFT JOIN project_picture pp ON p.id =pp.project_id
		LEFT JOIN upload u ON pp.picture_id = u.id
		WHERE p.id=#{id}
		ORDER BY u.id DESC
		limit 1
	</select>
	<select id="queryOrderChangeList" parameterType="int" resultType="com.goochou.p2b.model.vo.OrderChangeVO">
		select n.id id,n.title title,n.`剩余天` syDay, n.`发起时间` sendTime, n.`发起金额`
		sendAmount, n.`受让人` sellUser, n.`转让人` buyUser, n.`投资时间` buyTime, n.`投资金额` buyAmount from (
		select p2.id,p2.title,p.`create_time` '发起时间',p2.limit_days
		-DATEDIFF(DATE_FORMAT((if(i2.time is null,NOW(),i2.time)),'%Y-%m-%d') ,DATE_FORMAT(p2.deadline,'%Y-%m-%d') ) '剩余天',p.total_amount
		'发起金额',p.invested_amount '已投金额',u.true_name '转让人',u2.true_name '受让人',i2.`amount` '投资金额',i2.time '投资时间'
		from project p LEFT JOIN investment i on
		p.investment_id = i.id LEFT JOIN investment i2 on p.id = i2.project_id LEFT JOIN user u on i.user_id = u.id LEFT JOIN user u2 on i2.user_id = u2.id
		LEFT JOIN project p2 on p.parent_id = p2.id
		where p.project_type = 1
		) n where n.`已投金额`!=0 and n.id=#{projectId} ORDER BY n.`发起时间` asc
	</select>

	<select id="queryMonthlyGainProjectList" parameterType="map" resultMap="BaseResultMap">

		select
		<include refid="Base_Column_List" />
		from(
		select
		<include refid="Base_Column_List" />
		from
		project
		where project_type in (7)
		and total_amount - invested_amount &gt; 0
		and package_id is null
		and (product_id = #{productId} or product_id is
		null)
		and is_show_at_bond_invest = 0
		and parent_id is not null
		order by create_time) t1
		union
		select
		<include refid="Base_Column_List" />
		from (
		select
		<include refid="Base_Column_List" />
		from
		project
		where project_type in (7)
		and total_amount - invested_amount &gt; 0
		and package_id is null
		and (product_id = #{productId} or product_id is
		null)
		and is_show_at_bond_invest = 0
		and parent_id is null
		order by create_time) t2

	</select>

	<select id="getUsableBondListCountByProjectId" parameterType="map" resultType="int">
		SELECT count(t.id)
		FROM
		investment t,
		project p
		WHERE
		t.project_id =
		p.id
		AND t.user_id = #{userId}
		AND t.remain_amount &gt; 0
		AND p.id &gt;= 506
		and p.transferable &gt; 0
		AND TO_DAYS(NOW()) &gt;= TO_DAYS(t.time) +
		p.transferable
		AND TO_DAYS(p.deadline) + p.limit_days
		and p.id = #{projectId}
	</select>


	<select id="getProjectByPackageId" parameterType="map" resultMap="BaseResultMap">

		select
		<include refid="Base_Column_List" />
		from(
		select
		<include refid="Base_Column_List" />
		from
		project
		where
		project_type = 7
		and package_id = #{packageId}
		and parent_id is not null
		order by create_time) t1
		union
		select
		<include refid="Base_Column_List" />
		from (
		select
		<include refid="Base_Column_List" />
		from
		project
		where project_type = 7
		and package_id = #{packageId}
		and parent_id is null
		order by create_time) t2

	</select>

	<select id="queryzzList" resultType="com.goochou.p2b.model.Project">
		SELECT * FROM (
		SELECT b.user_id,u.`username`,u.true_name,p.title,b.id,b.investment_id,
		p.annualized+b.bond_management_rate*365/p.limit_days
		annualized,
		CASE WHEN b.status= 0 THEN DATEDIFF(ADDDATE(p.deadline, INTERVAL p.limit_days DAY),NOW())
		ELSE DATEDIFF(ADDDATE(p.deadline, INTERVAL
		p.limit_days DAY), b.create_time) END bondDayDiff,
		CASE WHEN b.status=2 THEN b.deadline ELSE b.create_time END create_time,
		b.total_amount,b.invested_amount,b.bond_management_rate,b.status FROM project b
		LEFT JOIN project p ON b.parent_id= p.id
		LEFT JOIN USER u ON
		b.user_id=u.id
		WHERE b.parent_id IS NOT NULL AND p.id&gt;= 506 and u.status=0 and b.project_type=1
		<if test="keyword != null">
			and (u.username like binary '%${keyword}%' or u.true_name like binary '${keyword}%' or u.id like '${keyword}%')
		</if>
		<if test="startTime != null">
			and b.create_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			and b.create_time &lt;= #{endTime}
		</if>
		<if test="startAmount != null">
			and b.total_amount &gt;= #{startAmount}
		</if>
		<if test="endAmount != null">
			and b.total_amount &lt;= #{endAmount}
		</if>
		<if test="status != null">
			and b.status = #{status}
		</if>
		) a
		<if test="bondDayDiff != null">
			WHERE bondDayDiff &lt;= #{bondDayDiff}
		</if>
		order by status,create_time desc
		<if test="start != null">
			limit #{start},
		</if>
		<if test="limit != null">
			#{limit}
		</if>
	</select>

	<select id="queryzzListCount" resultType="int">
		SELECT count(1) FROM (
		SELECT b.user_id,u.`username`,u.true_name,p.title,
		p.annualized+b.bond_management_rate*365/p.limit_days annualized,
		CASE WHEN
		b.status= 0 THEN DATEDIFF(ADDDATE(p.deadline, INTERVAL p.limit_days DAY),NOW())
		ELSE DATEDIFF(ADDDATE(p.deadline, INTERVAL p.limit_days DAY),
		b.create_time) END bondDayDiff,
		b.create_time,b.total_amount,b.invested_amount,b.bond_management_rate,b.status FROM project b
		LEFT JOIN project p ON
		b.parent_id= p.id
		LEFT JOIN USER u ON b.user_id=u.id
		WHERE b.parent_id IS NOT NULL AND p.id&gt;= 506 and u.status=0 and b.project_type=1
		<if test="keyword != null">
			and (u.username like binary '%${keyword}%' or u.true_name like binary '${keyword}%' or u.id like '${keyword}%')
		</if>
		<if test="startTime != null">
			and b.create_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			and b.create_time &lt;= #{endTime}
		</if>
		<if test="startAmount != null">
			and b.total_amount &gt;= #{startAmount}
		</if>
		<if test="endAmount != null">
			and b.total_amount &lt;= #{endAmount}
		</if>
		<if test="status != null">
			and b.status = #{status}
		</if>
		) a
		<if test="bondDayDiff!= null">
			WHERE bondDayDiff &lt;=#{bondDayDiff}
		</if>
	</select>


	<select id="queryzzTotalAmount" resultType="map">
		SELECT SUM(total_amount) totalAmount,SUM(invested_amount) investedAmount,COUNT(DISTINCT user_id) countUser FROM (
		SELECT
		b.user_id,u.`username`,u.true_name,p.title,b.id,b.investment_id,
		p.annualized+b.bond_management_rate*365/p.limit_days annualized,
		CASE WHEN b.status=
		0 THEN DATEDIFF(ADDDATE(p.deadline, INTERVAL p.limit_days DAY),NOW())
		ELSE DATEDIFF(ADDDATE(p.deadline, INTERVAL p.limit_days DAY), b.create_time)
		END bondDayDiff,
		CASE WHEN b.status=2 THEN b.deadline ELSE b.create_time END create_time,
		b.total_amount,b.invested_amount,b.bond_management_rate,b.status FROM project b
		LEFT JOIN project p ON b.parent_id= p.id
		LEFT JOIN USER u ON
		b.user_id=u.id
		WHERE b.parent_id IS NOT NULL AND p.id&gt;= 506 and u.status=0 and b.project_type=1
		<if test="keyword != null">
			and (u.username like binary '%${keyword}%' or u.true_name like binary '${keyword}%' or u.id like '${keyword}%')
		</if>
		<if test="startTime != null">
			and b.create_time &gt;= #{startTime}
		</if>
		<if test="endTime != null">
			and b.create_time &lt;= #{endTime}
		</if>
		<if test="startAmount != null">
			and b.total_amount &gt;= #{startAmount}
		</if>
		<if test="endAmount != null">
			and b.total_amount &lt;= #{endAmount}
		</if>
		<if test="status != null">
			and b.status = #{status}
		</if>
		) a
		<if test="bondDayDiff != null">
			WHERE bondDayDiff &lt;= #{bondDayDiff}
		</if>
	</select>


	<select id="queryZtDebtProjectList" parameterType="map" resultType="map">
		SELECT p.*,
		pp.title AS true_title,
		pp.limit_days AS limitDays, DATEDIFF(ADDDATE(pp.deadline, INTERVAL pp.limit_days DAY), p.create_time) AS diffDays,
		mgpp.limit_days as mgpp_limitDays
		FROM project p
		LEFT JOIN project pp ON p.parent_id=pp.id
		LEFT JOIN investment i ON p.investment_id=i.id
		LEFT JOIN
		monthly_gain_project_package mgpp ON i.package_id = mgpp.id
		WHERE
		1=1

		<if test="projectType != null and projectType != ''">
			<if test="projectType ==1 ">
				AND p.parent_id IS NOT NULL
			</if>
			<if test="projectType ==2">
				<!-- 原始标的，无条件 -->
				AND p.parent_id IS NULL
			</if>
		</if>
		AND p.project_type = 7
		AND p.package_id IS NULL
		<if test="limitDays !=null and limitDays !=''">
			AND mgpp.limit_days = #{limitDays,jdbcType=INTEGER}
		</if>
		ORDER BY p.create_time ASC
		<if test="start != null and limit != null">
			limit #{start}, #{limit}
		</if>
	</select>

	<select id="queryZtDebtProjectCount" parameterType="map" resultType="int">
		SELECT count(*)
		FROM project p
		left join project pp
		on p.parent_id=pp.id
		LEFT JOIN investment i ON p.investment_id=i.id
		LEFT JOIN
		monthly_gain_project_package mgpp ON i.package_id = mgpp.id
		WHERE
		1=1
		<if test="projectType != null and projectType != ''">
			<if test="projectType ==1 ">
				AND p.parent_id IS NOT NULL
			</if>
			<if test="projectType ==2">
				<!-- 原始标的，无条件 -->
				AND p.parent_id IS NULL
			</if>
		</if>
		AND p.project_type = 7
		AND p.package_id IS NULL
		<if test="limitDays !=null and limitDays !=''">
			AND mgpp.limit_days = #{limitDays,jdbcType=INTEGER}
		</if>
	</select>

	<select id="queryMonthlyGainProjectListWithoutOriginalProject" parameterType="map" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from
		project
		where project_type in (7)
		and total_amount - invested_amount &gt; 0
		and package_id is null
		and (product_id = #{productId} or product_id is
		null)
		and is_show_at_bond_invest = 0
		and parent_id is not null
		order by create_time
	</select>
	<select id="listInvestmentByProjectId" resultType="map">
		select u.true_name,i.amount, date_format(i.create_date, '%Y-%m-%d %H:%i:%s') as create_date,i.client from project p inner join investment i on p.id=i.project_id
		inner join user u on i.user_id=u.id
		where i.pay_status=2 and p.id=#{id}
		<if test="start != null">
			limit #{start},
		</if>
		<if test="limit != null">
			#{limit}
		</if>
	</select>
	
	<select id="countInvestmentByProjectId" parameterType="int" resultType="int">
		select count(1) as count from project p inner join investment i on p.id=i.project_id
		inner join user u on i.user_id=u.id
		where i.pay_status=1 and p.id=#{id}
	</select>
	
	<select id="selectByPrimaryKeyForUpdate" parameterType="java.lang.Integer" resultMap="r">
		select
		<include refid="Base_Column_List" />
		from project
		where id = #{id,jdbcType=INTEGER} for update
	</select>
	
	<select id="listProjectProductPropertyInfoById" resultType="map">
			select  pp.property_name,ppv.property_value 
			from project p   
			inner join  product_property  pp  on   p.product_id=pp.product_id
			inner join  project_property_value ppv on  pp.id= ppv.product_property_id  and ppv.project_id=p.id
			where  p.id=#{projectId}
	</select> 
	
	<select id="getProjectImagePath" resultType="String">
	    select  u.path from  project p   inner join project_picture pp  on p.id=pp.project_id 
		inner join upload  u  on  pp.upload_id=u.id 
		where p.id=#{projectId} and  pp.type=#{type}
	</select>
 
	<select id="getProjectDetailInfo" resultType="map">
		SELECT
			p.id,
			p.title,
			p.annualized,
			p.increase_annualized,
			p.`status`,
			case when p.status=2 then p.update_date else null end as create_date,
			p.repay_unit,
			td.tp AS enterprise_name,
			td.t_value areaId,
			td.memo,
			p.limit_days,
			p.safe_number,
			p.ear_number,
			CONCAT( p.safe_number, ' &gt;&gt;' ) AS safe_number_show,
			CONCAT( p.ear_number, ' &gt;&gt;' ) AS ear_number_show,
			p.total_amount,
			p.sex,
			p.product_id,
			p.weight,
			p.noob 
		FROM
			project p
			INNER JOIN enterprise e ON p.enterprise_id = e.id
			LEFT JOIN tm_dict td ON p.prairie_value = td.t_value 
			AND td.t_key = 'prairie' 
		WHERE
			p.id = #{projectId}
	</select>
	
    <select id="listProjectDetailInfoByPage" parameterType="map" resultType="map">
		select p.id,p.title, p.annualized, p.increase_annualized, p.repay_unit
		,p.limit_days,p.safe_number,p.ear_number,e.name as enterprise_name,p.total_amount,p.sex,p.noob
		from project p
		inner join enterprise e
		on p.enterprise_id=e.id
		where 1=1 
		<if test="status!=null">
			and p.status=#{status}
		</if>
		<if test="noob!=null">
			and p.noob=#{noob}
		</if>
		<if test="limitDays!=null  and limitDays!=''  and limitDays!=1">
			and limit_days=#{limitDays}
		</if>
		<if test="productId !=null and productId !=''  and productId !=0 ">
			and p.product_id=#{productId}
		</if>
        and p.project_type=0
		order by p.total_amount asc,p.interest_amount asc, sort asc, p.id desc
		<if test="limitStart!=null and limitEnd!=null">
			LIMIT #{limitStart},#{limitEnd}
		</if>

	</select>
	<select id="countProjectDetailInfoByPage" parameterType="map" resultType="Integer">
			select count(1) as count_pages
			from project p
			inner join enterprise e
			on p.enterprise_id=e.id
			where 1=1 
			<if test="status!=null">
				and p.status=#{status}
			</if>
			<if test="noob!=null">
				and p.noob=#{noob}
			</if>
			<if test="limitDays!=null  and limitDays!=''  and limitDays!=1">
			and limit_days=#{limitDays}
			</if>
			<if test="productId !=null and productId !=''  and productId !=0 ">
			and p.product_id=#{productId}
		</if>
	</select>
	
		<select id="getProjectDetailInfoByGpsNumber" resultType="map">
		select p.id,p.title, p.annualized,p.increase_annualized,p.`status`,i.create_date,p.repay_unit
		,p.limit_days,p.safe_number,p.ear_number,e.name as enterprise_name,p.total_amount,p.sex,p.product_id,p.weight
		from project p
		inner join enterprise e
		on p.enterprise_id=e.id
		left join investment i on p.id=i.project_id and i.order_status=0
		where p.gps_number=#{gpsNumber}
	</select>

	<select id="getProjectByGpsNumber" resultType="int">
		select count(1) from project p where p.gps_number=#{gpsNumber}
	</select>
	
	<!-- 公牛数量 -->
	<select id="countBull" resultType="int">
		select count(1) as sum from project a where a.sex='0' and a.product_id in (select a.id from product a where a.`name`
		like '%牛%')  		and a.status!=4
		<if test="prairieValue!=0">
			and a.prairie_value=#{prairieValue}
		</if>
	</select>
	<!-- 母牛数量 -->
	<select id="countCow" resultType="int">
		select count(1) as sum from project a where a.sex='1' and a.product_id in (select a.id from product a where a.`name`
		like '%牛%')  		and a.status!=4
		<if test="prairieValue!=0">
			and a.prairie_value=#{prairieValue}
		</if>
	</select>
	<!-- 总牛数量 -->
	<select id="countAllCattle" resultType="int">
		select count(1) as sum from project p where p.product_id in (select a.id from product a where a.`name` like '%牛%' )
				and p.status!=4
		<if test="prairieValue!=0">
			and p.prairie_value=#{prairieValue}
		</if>
	</select>
	<!-- 牛犊数量 -->
    <select id="countCalf" resultType="int">
		select  count(1) as sum from  project a    where a.noob=1 and  a.product_id  in  (select  a.id from product a  where a.`name` like  '%牛%')
		and a.status!=4
			<if test="prairieValue!=0">
				and a.prairie_value=#{prairieValue}
			</if>
	</select>
	
		<select id="listGpsProjectByPage" parameterType="map" resultType="com.goochou.p2b.model.vo.ProjectGpsListVo">
		select 
			p.id,
			p.title,
			p.ear_number,
			dict.t_name as prairieValue,
			p.gps_number
		from project p 
		left join tm_dict dict on p.prairie_value = dict.t_value and t_key = 'prairie'
		where 1=1 and p.status in (0,1,2,3)
		<if test="limitDays!=null  and limitDays!=''  and limitDays!=1">
			and  p.limit_days=#{limitDays}
		</if>
		<!--  1号牧场是基地,显示全部牛只 -->
		<if test="prairieValue != null and prairieValue == 1 ">
			and true
		</if>
		<if test="keyword != null">
			 and p.ear_number like '%${keyword}%' 
		 </if>
		 <!--  其他牧场只显示100头牛只 -->
		<if test="prairieValue != null and prairieValue != 1 ">
			and p.prairie_value = 1
		</if>
		order by  sort asc, p.id desc
		<if test="limitStart!=null and limitEnd!=null">
			LIMIT #{limitStart},#{limitEnd} 
		</if>
	</select>
	
	<select id="countListGpsProjectByPage" parameterType="map" resultType="Integer">
		select count(1)
			from project p  
			left join tm_dict dict on p.prairie_value = dict.t_value and t_key = 'prairie'
		  where 1=1 and p.status in (0,1,2,3) 
		  <if test="limitDays!=null  and limitDays!=''  and limitDays!=1">
			 and limit_days=#{limitDays}
		 </if>
		 <!--  1号牧场是基地,显示全部牛只 -->
		<if test="prairieValue != null and prairieValue == 1 ">
			and true
		</if>
		<if test="keyword != null">
			 and p.ear_number like '%${keyword}%' 
		 </if>
		<!--  其他牧场只显示基地100头牛只 -->
		<if test="prairieValue != null and prairieValue != 1 ">
			and p.prairie_value = 1 limit 100
		</if>
		
	</select>
	
	
	<resultMap id="screenInfo" type="com.goochou.p2b.model.vo.ScreenInfo">
		    <result column="ageQuantity" jdbcType="INTEGER" property="ageQuantity" />
		    <result column="ageDesc" jdbcType="INTEGER" property="ageDesc" />
	</resultMap>
	
	<select id="countAge" resultMap="screenInfo">
	select "0-6月" as ageDesc, count(1) as ageQuantity from project_property_view ppv ,project p1
	where 1=1 and ppv.id=p1.id and ppv.yue_ling between 0 and 6 and ppv.id in (select p.id from project p where p.product_id in
	(select a.id from product a where a.`name` like '%牛%'))
	<if test="prairieValue != 0">
			and p1.prairie_value = #{prairieValue}
	</if>
	union all
	select "6-12月"  as ageDesc, count(1) as ageQuantity from project_property_view ppv ,project p1
	where 1=1 and ppv.id=p1.id and ppv.yue_ling between 6 and 12 and ppv.id in (select p.id from project p where p.product_id in
	(select a.id from product a where a.`name` like '%牛%'))
	<if test="prairieValue != 0">
		and p1.prairie_value = #{prairieValue}
	</if>
	union all
	select "12-24月"  as ageDesc , count(1) as ageQuantity from project_property_view ppv ,project p1
	where 1=1 and ppv.id=p1.id and ppv.yue_ling between 12 and 24 and ppv.id in (select p.id from project p where p.product_id
	in (select a.id from product a where a.`name` like '%牛%'))
	<if test="prairieValue != 0">
		and p1.prairie_value = #{prairieValue}
	</if>
	union all
    select "24月以上"  as ageDesc , count(1) as ageQuantity from project_property_view ppv ,project p1
<![CDATA[	where 1=1 and ppv.id=p1.id and ppv.yue_ling >24 and ppv.id in (select p.id from project p where p.product_id in (select a.id]]>
	from product a where a.`name` like '%牛%'))
	<if test="prairieValue !=0">
		and p1.prairie_value = #{prairieValue}
	</if>
	
	</select>
	
	<select id="listBuyBackRecord" resultType="map">
					select u.true_name,u.phone,i.amount, date_format(i.create_date, '%Y-%m-%d %H:%i:%s') as deal_time,i.client ,od.create_date as buy_back,
					 p.limit_days, p.weight ,ppv.yue_ling ,p.raise_fee,p.manage_fee  ,0 as service_free  ,'已回购'  as status from project p
					inner join investment i on p.id=i.project_id
					inner join user u on i.user_id=u.id
					inner join order_done od  on  od.order_no=i.order_no
					inner join project_property_view ppv on ppv.id=p.id
					where i.pay_status=2 and p.ear_number=#{earNumber} and p.status=4 and  od.order_type='investment' and  od.order_status='success'
	<if test="start != null">
		limit #{start},
	</if>
	<if test="limit != null">
		#{limit}
	</if>
	</select> 
	
	<select id="countBuyBackRecord" resultType="int">
					select count(1) as count from project p
					inner join investment i on p.id=i.project_id
					inner join user u on i.user_id=u.id
					inner join order_done od  on  od.order_no=i.order_no
					inner join project_property_view ppv on ppv.id=p.id
					where i.pay_status=2 and p.ear_number=#{earNumber} and p.status=4 and  od.order_type='investment' and  od.order_status='success'
	</select>
	
	<select id="statisticsInfo" resultType="int">
	select  count(1) as count from project  p  where   p.`status`=0 and  p.product_id   in 
	(select a.id from product a where a.`name` like '%牛%')
	union all
	select count(1) as coun from project p where p.`status`=1 and p.product_id in
	(select a.id from product a where a.`name` like '%牛%')
	union all
	select count(1) as coun from project p where p.`status`=3 and p.product_id in
	(select a.id from product a where a.`name` like '%牛%') 	
	</select>
	
	
		<select id="listBuyBack" resultType="map">
		
					select  p.id,od.create_date as buy_back, i.order_no,u.true_name,1 as quantity ,i.amount,i.interest_amount, (i.amount+i.interest_amount) as  total  , ib.use_amount, (i.amount+i.interest_amount-ib.use_amount) as returned_money, '已回款' as  return_status,'已回购' as status ,p.limit_days,p.ear_number,  ppv.yue_ling  from project p
					inner join investment i on p.id=i.project_id
					inner join user u on i.user_id=u.id
					<if test="adminId != null ">
						inner join admin_responsible 
							on admin_responsible.admin_id=${adminId} 
							and admin_responsible.department_id=u.department_id
				    </if>
				    <if test="departmentId != null">
				    	inner join department_relation
							on department_relation.department_id=${departmentId} 
							and department_relation.sub_department_id=u.department_id
				    </if>
					inner join order_done od  on  od.order_no=i.order_no
					inner join project_property_view ppv on ppv.id=p.id
					inner join investment_blance  ib  on   i.id=ib.investment_id
					where i.pay_status=2 and p.status=4 and  od.order_type='investment' and  od.order_status='success'   
					  <if test="startAge != null  and endAge!=null and startAge != ''  and endAge!=''">
					<![CDATA[ and ( ppv.yue_ling>=#{startAge}  and  ppv.yue_ling<=#{endAge} )  	]]>
					 </if>
					 <if test="startAge != null  and startAge != ''  and (endAge==null or endAge=='' )">
					<![CDATA[ and ( ppv.yue_ling>=#{startAge}  )  	]]>
					 </if>
					 <if test="endAge != null  and endAge != ''  and (startAge==null or startAge=='' )">
					<![CDATA[ and ( ppv.yue_ling<=#{endAge}  )  	]]>
					 </if>
					 
					 <if test="startDate != null  and endDate!=null and startDate != ''  and endDate!=''">
				    <![CDATA[ and  (date_format(od.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  and  date_format(  od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
					 </if>
					 <if test="startDate != null  and startDate!='' and  (endDate == null  or endDate=='')">
				    <![CDATA[ and  (date_format(od.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  )	]]>
					 </if>					 
					 <if test=" endDate != null  and endDate !='' and  ( startDate == null  or startDate =='')">
				    <![CDATA[ and  ( date_format(  od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
					 </if>
					 order by od.create_date desc
					<if test="start != null">
						limit #{start},
					</if>
					<if test="limit != null">
						#{limit}
					</if>

	</select> 
	
			<select id="countBuyBack" resultType="int">

					select count(1) as  count  from project p
					inner join investment i on p.id=i.project_id
					inner join user u on i.user_id=u.id
					<if test="adminId != null ">
						inner join admin_responsible 
							on admin_responsible.admin_id=${adminId} 
							and admin_responsible.department_id=u.department_id
				    </if>
				    <if test="departmentId != null">
				    	inner join department_relation
							on department_relation.department_id=${departmentId} 
							and department_relation.sub_department_id=u.department_id
				    </if>
					inner join order_done od  on  od.order_no=i.order_no
					inner join project_property_view ppv on ppv.id=p.id
					inner join investment_blance  ib  on   i.id=ib.investment_id
					where i.pay_status=2 and p.status=4 and  od.order_type='investment' and  od.order_status='success'   

					  <if test="startAge != null  and endAge!=null and startAge != ''  and endAge!=''">
					<![CDATA[ and ( ppv.yue_ling>=#{startAge}  and  ppv.yue_ling<=#{endAge} )  	]]>
					 </if>
					 <if test="startAge != null  and startAge != ''  and (endAge==null or endAge=='' )">
					<![CDATA[ and ( ppv.yue_ling>=#{startAge}  )  	]]>
					 </if>
					 <if test="endAge != null  and endAge != ''  and (startAge==null or startAge=='' )">
					<![CDATA[ and ( ppv.yue_ling<=#{endAge}  )  	]]>
					 </if>
					 
					 <if test="startDate != null  and endDate!=null and startDate != ''  and endDate!=''">
				    <![CDATA[ and  (date_format(od.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  and  date_format(  od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
					 </if>
					 <if test="startDate != null  and startDate!='' and  (endDate == null  or endDate=='')">
				    <![CDATA[ and  (date_format(od.create_date ,'%Y-%m-%d') >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  )	]]>
					 </if>					 
					 <if test="endDate != null  and endDate !='' and  ( startDate == null  or startDate =='')">
				    <![CDATA[ and  ( date_format(  od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
					 </if>
	
	</select> 
	
	<select id="listBuyBackTJ" resultType="map">
					SELECT
				count( 1 ) AS `count`,
				sum( `i`.`amount` ) AS `amount`,
				sum( `i`.`interest_amount` ) AS `interest_amount`,
				( CASE `p`.`noob` WHEN 0 THEN '基础牛群' WHEN 1 THEN '牛犊' END ) AS `type`,
				( sum( `i`.`amount` ) + sum( `i`.`interest_amount` ) ) AS `yfhj` 
			FROM
				(
					(
						( `project` `p` JOIN `investment` `i` ON ( ( `p`.`id` = `i`.`project_id` ) ) )
						JOIN `order_done` `od` ON ( ( `od`.`order_no` = `i`.`order_no` ) ) 
					)
					JOIN `investment_blance` `ib` ON ( ( `i`.`id` = `ib`.`investment_id` ) ) 
				) 
			WHERE
				(
					( `i`.`pay_status` = 2 ) 
					AND ( `p`.`status` = 4 ) 
					AND ( `od`.`order_type` = 'investment' ) 
					AND ( `od`.`order_status` = 'success' ) 
									 <if test="startDate != null  and endDate!=null and startDate != ''  and endDate!=''">
							    <![CDATA[ and   (date_format(od.create_date,'%Y-%m-%d')   >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  and   date_format(od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
								 </if>
								 <if test="startDate != null  and startDate!='' and  (endDate == null  or endDate=='')">
							    <![CDATA[ and   (date_format(od.create_date,'%Y-%m-%d')   >=STR_TO_DATE(#{startDate},'%Y-%m-%d')   )	]]>
								 </if>
								  <if test="endDate != null  and endDate !='' and  ( startDate == null  or startDate =='')">
							    <![CDATA[ and   ( date_format(od.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
								 </if>
				) 
			GROUP BY
				`p`.`noob`
	
	</select>
	
	<select id="listCreditFunds" resultType="map">
			select trv.create_date ,trv.account_operate_type_id, trv.operate_description as status ,trv.user_true_name , ifnull(trv.investment_amount,trv.goods_total_money ) as investment_amount,
				trv.credit_amount as flow_amount,
				ifnull( trv.investment_order_no,trv.goods_order_no) as order_no,
				trv.recharge_order_no,
				case when   trv.investment_order_no is null  then '商城订单'  else   '物权订单' end as  order_type 
			from trade_record_view trv  
			where trv.account_type_id=2 
				and trv.about_whole_account 
				
			<if test="startDate != null  and endDate!=null and startDate != ''  and endDate!=''">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')  >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  and    date_format(trv.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
			</if>
			<if test="startDate != null  and startDate!='' and  (endDate == null  or endDate=='')">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')  >=STR_TO_DATE(#{startDate},'%Y-%m-%d')   )	]]>
			</if>
			<if test="endDate != null  and endDate !='' and  ( startDate == null  or startDate =='')">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
			</if>
			
			<choose>
			<when test="typeId==1">
			    and 	trv.account_operate_type_id=#{typeId} and trv.business_code='invest'
			</when>
			<when test="typeId==2">
			    and (	trv.account_operate_type_id=2 or trv.account_operate_type_id=4 or trv.account_operate_type_id=6 ) and trv.business_code='goodsorder'
			</when>
			<when test="typeId==3">
			    and 	trv.account_operate_type_id=2 and trv.business_code='invest_buyback_interest'
			</when>
			
			</choose>
			
			order by trv.create_date desc
				<if test="start != null">
						limit #{start},
					</if>
					<if test="limit != null">
						#{limit}
					</if>				
	</select>
	
		<select id="countCreditFunds" resultType="int">
			select count(1) as count
			from trade_record_view trv  
			where trv.account_type_id=2 and ( trv.aoe_type='invest_credit_add'  or trv.aoe_type='goodsorder_credit_frozen_subtract' or trv.aoe_type='invest_buyback_interest_credit_subtract'  or trv.aoe_type='goodsorder_credit_subtract')
				and trv.about_whole_account

			<if test="startDate != null  and endDate!=null and startDate != ''  and endDate!=''">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')  >=STR_TO_DATE(#{startDate},'%Y-%m-%d')  and    date_format(trv.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
			</if>
			<if test="startDate != null  and startDate!='' and  (endDate == null  or endDate=='')">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')  >=STR_TO_DATE(#{startDate},'%Y-%m-%d')   )	]]>
			</if>
			<if test="endDate != null  and endDate !='' and  ( startDate == null  or startDate =='')">
			<![CDATA[ and   ( date_format(trv.create_date,'%Y-%m-%d')<=STR_TO_DATE(#{endDate},'%Y-%m-%d') )	]]>
			</if>
				
					<choose>
			<when test="typeId==1">
			    and 	trv.account_operate_type_id=#{typeId} and trv.business_code='invest'
			</when>
			<when test="typeId==2">
			    and (	trv.account_operate_type_id=2 or trv.account_operate_type_id=4 or trv.account_operate_type_id=6 ) and trv.business_code='goodsorder'
			</when>
			<when test="typeId==3">
			    and 	trv.account_operate_type_id=2 and trv.business_code='invest_buyback_interest'
			</when>
			
			</choose>
				
	</select>
	
	
	<select id="investStatement" resultType="com.goochou.p2b.model.vo.InvestStatementVO"> 
		SELECT
			count(1) as total_count,
			sum( pro.total_amount ) as total_amount,
			sum( pro.manage_fee ) as total_manage_fee,
			sum( pro.raise_fee )  as total_raise_fee,
			sum( inv.balance_pay_money ) as total_balance_pay_money,
			sum( inv.hongbao_money ) as total_hongbao_money,
			sum( inv.remain_amount ) as total_remain_amount ,
			<![CDATA[ case when yue_ling <= 6 then 0 when yue_ling > 6 then 1 end as noob]]>
		FROM
			investment inv 
			inner join project pro on pro.id = inv.project_id 
			inner join project_property_view ppv on ppv.id = pro.id
		WHERE
			pro.`status` IN ( 3, 4 ) and inv.pay_status = 2 and inv.order_status in (1,2)  
		<if test="startDate != null and startDate != '' ">
		 	<![CDATA[ and inv.create_date  >= #{startDate}]]>
		</if>
		<if test="endDate != null and endDate != '' ">
		 	<![CDATA[ and inv.create_date < date_add(#{endDate}, interval 1 day)]]>
		</if>
			<![CDATA[ group by case when yue_ling <= 6 then 0 when yue_ling > 6 then 1 end  ]]>
	</select>

	<select id="listProjectPicture" parameterType="map" resultType="map">
			select
				p.id,
				p.ear_number,
				i.order_no,
				i.create_date,
				(select count(1) from project_life_picture where ear_number = p.ear_number and status = 1) as pic_count,
				(select count(1) from project_life_picture where ear_number = p.ear_number and status = 1 and is_read = 0) as new_count
			from project p
			inner join investment i on i.project_id = p.id
			where i.order_status = 1
		<if test="userId != null">
	  		and i.user_id = #{userId}
	  	</if>
	  		order by i.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
  	</select>

  	<select id="countProjectPicture" parameterType="map" resultType="int">
	  		select count(*)
			from project p
			inner join investment i on i.project_id = p.id
			where i.order_status = 1
	  	<if test="userId != null">
	  		and i.user_id = #{userId}
	  	</if>
  	</select>

  	<select id="getProjectPictureDetail" parameterType="map" resultType="map">
			select
				plp.id,
				plp.ear_number,
				plp.create_user,
				plp.create_date,
				plp.is_read,
				u.path
			from project_life_picture plp
			inner join upload u on u.id = plp.upload_id
			where plp.status = 1
		<if test="userId != null">
	  		and plp.create_user = #{userId}
	  	</if>
		<if test="earNum != null">
	  		and plp.ear_number = #{earNum}
	  	</if>
	  		order by plp.create_date desc
	  	<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
  	</select>

  	<select id="countProjectPictureDetail" parameterType="map" resultType="int">
	  		select count(*)
			from project_life_picture plp
			inner join upload u on u.id = plp.upload_id
			where plp.status = 1
	  	<if test="userId != null">
	  		and plp.create_user = #{userId}
	  	</if>
	  	<if test="earNum != null">
	  		and plp.ear_number = #{earNum}
	  	</if>
  	</select>

	<select id="selectLastOneByRealEarNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
	    select
	    <include refid="Base_Column_List" />
	    from project
	    where real_ear_number = #{real_ear_number,jdbcType=VARCHAR}
	    order by id desc
	    limit 0,1
  </select>

	<select id="listFilialeSell" resultType="com.goochou.p2b.model.vo.FilialeSellVO">
		select a.company,
			a.id as empId,
			a.`name` as realName,
			a.mobile,
			sum(case when c.limit_days=30 then c.num else 0 end) as limitDays30,
			sum(case when c.limit_days=90 then c.num else 0 end) as limitDays90,
			sum(case when c.limit_days=180 then c.num else 0 end) as limitDays180,
			sum(case when c.limit_days=360 then c.num else 0 end) as limitDays360,
			sum(case when c.limit_days=30 then c.amount else 0 end) as investTotalAmount30,
			sum(case when c.limit_days=90 then c.amount else 0 end) as investTotalAmount90,
			sum(case when c.limit_days=180 then c.amount else 0 end) as investTotalAmount180,
			sum(case when c.limit_days=360 then c.amount else 0 end) as investTotalAmount360
		from employ a left join employ_user b on a.id=b.emoloy_id
		left JOIN user u on  u.id = b.user_id 
		left join (
			select 
				limit_days,a.user_id, count(1) num, sum(a.amount) as amount
			from investment a 
			left join project b on a.project_id=b.id   
			inner join order_done done on done.order_no = a.order_no and done.order_type='investment' and done.order_status ='pay' 
			where 1 = 1 and a.order_status in(1,2)
			<if test="startDate != null and startDate != '' ">
			 	<![CDATA[and  DATE_FORMAT(done.create_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
			</if>
			<if test="endDate != null and endDate != '' ">
			 	<![CDATA[and DATE_FORMAT(done.create_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
			</if>	
			GROUP BY limit_days,a.user_id
		) c on (c.user_id = b.user_id)
		where 1=1  and a.is_dimission = 0	
		<if test="keyword != null and keyword != '' ">
	  		and (u.phone = #{keyword} or a.mobile = #{keyword})
	  	</if>
		GROUP BY a.company,a.`name`,a.mobile ORDER BY a.id
		<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
	</select>
	
	<select id="countFilialeSell" resultType="int">
		select count(*) from (
			select a.company,
				a.`name` as realName,
				a.mobile,
				sum(case when c.limit_days=30 then c.num else 0 end) as limitDays30,
				sum(case when c.limit_days=90 then c.num else 0 end) as limitDays90,
				sum(case when c.limit_days=180 then c.num else 0 end) as limitDays180,
				sum(case when c.limit_days=360 then c.num else 0 end) as limitDays360,
				sum(case when c.limit_days=30 then c.amount else 0 end) as investTotalAmount30,
				sum(case when c.limit_days=90 then c.amount else 0 end) as investTotalAmount90,
				sum(case when c.limit_days=180 then c.amount else 0 end) as investTotalAmount180,
				sum(case when c.limit_days=360 then c.amount else 0 end) as investTotalAmount360
			from employ a left join employ_user b on a.id=b.emoloy_id
			left JOIN user u on  u.id = b.user_id 
			left join (
				select 
					limit_days,a.user_id,count(1) num, sum(a.amount) as amount
				from investment a 
				left join project b on a.project_id=b.id  
				inner join order_done done on done.order_no = a.order_no and done.order_type='investment' and done.order_status ='pay' 
				where 1 = 1  and a.order_status in(1,2)
				<if test="startDate != null and startDate != '' ">
				 	<![CDATA[and  DATE_FORMAT(done.create_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
				</if>
				<if test="endDate != null and endDate != '' ">
				 	<![CDATA[and DATE_FORMAT(done.create_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
				</if>
				GROUP BY limit_days,a.user_id
			) c on (c.user_id = b.user_id)
			where 1=1	and a.is_dimission = 0
			<if test="keyword != null and keyword != '' ">
		  		and (u.phone = #{keyword} or a.mobile = #{keyword})
		  	</if>
			GROUP BY a.company,a.`name`,a.mobile ORDER BY a.company) count
	</select>
	
	<select id="detailFilialeSell" resultType="com.goochou.p2b.model.vo.FilialeSellDetailVO">
		SELECT
			inv.id as investId,
			us.id as userId,
			pro.title as title,
			us.true_name as realName,
			us.phone as mobile,
			pro.limit_days as limitDays, 
			1 as number,
			inv.amount,
			inv.create_date as createDate,
			case when inv.order_status = 2 then 1 else 0 end as isExpire
		FROM
			employ_user emp
			left join investment inv ON emp.user_id = inv.user_id
			INNER JOIN project pro on inv.project_id = pro.id
			LEFT JOIN USER us ON us.id = emp.user_id
			INNER join order_done done on done.order_no = inv.order_no and done.order_type='investment' and done.order_status ='pay'
		where 1=1 and (emp.emoloy_id = #{empId} )
		<if test="keyword != null">
			and (us.phone like '%${keyword}%' or us.true_name like '%${keyword}%')
		</if>
		<if test="startDate != null and startDate != '' ">
		 	<![CDATA[and  DATE_FORMAT(done.create_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
		</if>
		<if test="endDate != null and endDate != '' ">
		 	<![CDATA[and DATE_FORMAT(done.create_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
		</if>
		order by us.true_name asc, inv.create_date desc
		<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>

	</select>
	<select id="countDetailFilialeSell" resultType="int">
		SELECT
			count(*)
		FROM
			employ_user emp
			left join investment inv ON emp.user_id = inv.user_id
			INNER JOIN project pro on inv.project_id = pro.id
			LEFT JOIN USER us ON us.id = emp.user_id
			INNER join order_done done on done.order_no = inv.order_no and done.order_type='investment' and done.order_status ='pay'
		where 1=1 and (emp.emoloy_id = #{empId} )
		<if test="keyword != null">
			and (us.phone like '%${keyword}%' or us.true_name like '%${keyword}%')
		</if>
		<if test="startDate != null and startDate != '' ">
		 	<![CDATA[and  DATE_FORMAT(done.create_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
		</if>
		<if test="endDate != null and endDate != '' ">
		 	<![CDATA[and DATE_FORMAT(done.create_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
		</if>		
	</select>
	
	<select id="sumTotalLimitDayByEarNumber" resultType="int">
		<!--  统计出售的和已回购的 -->
		select sum(project.limit_days) from project where status in (3,4)  and ear_number = #{earNumber}
	</select>
	
	<select id="statisticsFilialeSell" resultType="decimal">
		SELECT
			sum(inv.amount)
		FROM
			employ_user emp
			left join investment inv ON emp.user_id = inv.user_id
			INNER JOIN project pro on inv.project_id = pro.id
			LEFT JOIN USER us ON us.id = emp.user_id
			INNER join order_done done on done.order_no = inv.order_no and done.order_type='investment' and done.order_status ='pay'
		where 1=1 and (emp.emoloy_id = #{empId} )
		<if test="keyword != null">
			and (us.phone like '%${keyword}%' or us.true_name like '%${keyword}%')
		</if>
		<if test="startDate != null and startDate != '' ">
		 	<![CDATA[and  DATE_FORMAT(done.create_date,'%Y-%m-%d') >= DATE_FORMAT(#{startDate},'%Y-%m-%d')]]>
		</if>
		<if test="endDate != null and endDate != '' ">
		 	<![CDATA[and DATE_FORMAT(done.create_date,'%Y-%m-%d') <= DATE_FORMAT(#{endDate},'%Y-%m-%d')]]>
		</if>		
	</select>

    <!--app v2.0 牛只列表 公共查询sql-->
    <sql id="List_GroupBy_LimitDays_Select_Base">
      SELECT
       p.*,
       u.path little_image
      FROM
        project p
        INNER JOIN
          (SELECT MAX(project_id) project_id, id, upload_id FROM project_picture WHERE `status` = 0 AND `type` = 1 GROUP BY project_id) pp
          ON p.id = pp.project_id
        INNER JOIN upload u
          ON pp.upload_id = u.id
    </sql>
    
    <!--app v2.0 牛只列表 公共查询条件-->
  
    <sql id="List_GroupBy_LimitDays_Condition_Common">
      
    </sql>
  
	<select id="listGroupByLimitDays" parameterType="com.goochou.p2b.model.ProjectExample" resultMap="BaseResultMap">
select 	p.*
	,u.path little_image 
from(
	SELECT * 
	FROM( 
		SELECT project.*, NULL new_rank, NULL tmp 
		FROM project 
		<choose>
			<when test="oredCriteria.size > 0">
				<include refid="Example_Where_Clause" />
			</when>
			<otherwise>
				where true
			</otherwise>
		</choose>
		AND noob = 1 
		<if test = "orderByClause != null" > ORDER BY ${orderByClause} </if> 
		LIMIT ${limitEnd}
	) t_is_noob 
	
	UNION
	
	SELECT	* 
	FROM( 
		SELECT project.*, 
			IF ( @tmp = limit_days, @rank := @rank + 1, @rank := 1 ) AS new_rank, 
			@tmp := limit_days AS tmp
		FROM project 
		INNER JOIN ( SELECT @tmp := '', @rank := 1 ) t_rank_tmp ON TRUE
		<choose>
			<when test="oredCriteria.size > 0">
				<include refid="Example_Where_Clause" />
			</when>
			<otherwise>
				where true
			</otherwise>
		</choose>
		AND noob = 0 
		ORDER BY limit_days ASC <if test = "orderByClause != null"> ,${orderByClause} </if> 
	) tmp_is_not_noob 
	WHERE new_rank &lt;= ${limitEnd}
	
)p
INNER JOIN ( SELECT MAX( project_id ) project_id, id, upload_id FROM project_picture WHERE `status` = 0 AND `type` = 1 GROUP BY project_id ) pp ON p.id = pp.project_id
INNER JOIN upload u ON pp.upload_id = u.id
	</select>

</mapper>