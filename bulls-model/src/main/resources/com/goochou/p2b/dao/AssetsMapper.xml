<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.AssetsMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.Assets">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="balance_amount" jdbcType="DOUBLE" property="balanceAmount" />
    <result column="frozen_amount" jdbcType="DOUBLE" property="frozenAmount" />
    <result column="credit_amount" jdbcType="DOUBLE" property="creditAmount" />
    <result column="freozen_credit_amount" jdbcType="DOUBLE" property="freozenCreditAmount" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    user_id, balance_amount, frozen_amount, credit_amount, freozen_credit_amount, version, 
    create_date, update_date
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.AssetsExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from assets
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    select 
    <include refid="Base_Column_List" />
    from assets
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    delete from assets
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.AssetsExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    delete from assets
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.goochou.p2b.model.Assets">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    insert into assets (user_id, balance_amount, frozen_amount, 
      credit_amount, freozen_credit_amount, version, 
      create_date, update_date)
    values (#{userId,jdbcType=INTEGER}, #{balanceAmount,jdbcType=DOUBLE}, #{frozenAmount,jdbcType=DOUBLE}, 
      #{creditAmount,jdbcType=DOUBLE}, #{freozenCreditAmount,jdbcType=DOUBLE}, #{version,jdbcType=INTEGER}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.Assets">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    insert into assets
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="balanceAmount != null">
        balance_amount,
      </if>
      <if test="frozenAmount != null">
        frozen_amount,
      </if>
      <if test="creditAmount != null">
        credit_amount,
      </if>
      <if test="freozenCreditAmount != null">
        freozen_credit_amount,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="balanceAmount != null">
        #{balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null">
        #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="creditAmount != null">
        #{creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="freozenCreditAmount != null">
        #{freozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.AssetsExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    select count(*) from assets
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    update assets
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.balanceAmount != null">
        balance_amount = #{record.balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.frozenAmount != null">
        frozen_amount = #{record.frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.creditAmount != null">
        credit_amount = #{record.creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.freozenCreditAmount != null">
        freozen_credit_amount = #{record.freozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    update assets
    set user_id = #{record.userId,jdbcType=INTEGER},
      balance_amount = #{record.balanceAmount,jdbcType=DOUBLE},
      frozen_amount = #{record.frozenAmount,jdbcType=DOUBLE},
      credit_amount = #{record.creditAmount,jdbcType=DOUBLE},
      freozen_credit_amount = #{record.freozenCreditAmount,jdbcType=DOUBLE},
      version = #{record.version,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.Assets">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    update assets
    <set>
      <if test="balanceAmount != null">
        balance_amount = #{balanceAmount,jdbcType=DOUBLE},
      </if>
      <if test="frozenAmount != null">
        frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      </if>
      <if test="creditAmount != null">
        credit_amount = #{creditAmount,jdbcType=DOUBLE},
      </if>
      <if test="freozenCreditAmount != null">
        freozen_credit_amount = #{freozenCreditAmount,jdbcType=DOUBLE},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.Assets">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 09 19:07:23 CST 2019.
    -->
    update assets
    set balance_amount = #{balanceAmount,jdbcType=DOUBLE},
      frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
      credit_amount = #{creditAmount,jdbcType=DOUBLE},
      freozen_credit_amount = #{freozenCreditAmount,jdbcType=DOUBLE},
      version = #{version,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

    <update id="updateByPrimaryKeyAndVersionSelective" parameterType="com.goochou.p2b.model.Assets">
        update assets
        <set>
            version = version + 1,
            <if test="balanceAmount != null">
                balance_amount = #{balanceAmount,jdbcType=DOUBLE},
            </if>
            <if test="frozenAmount != null">
                frozen_amount = #{frozenAmount,jdbcType=DOUBLE},
            </if>
            <if test="creditAmount != null">
                credit_amount = #{creditAmount,jdbcType=DOUBLE},
            </if>
            <if test="freozenCreditAmount != null">
                freozen_credit_amount = #{freozenCreditAmount,jdbcType=DOUBLE},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
    </update>






    <select id="investTop10" resultType="map">
        SELECT
            user.id                        userId,
            user.username                  username,
            assets.total_investment_amount amount
        FROM
            assets
            LEFT JOIN user ON assets.user_id = user.id
        WHERE
            total_investment_amount &lt;&gt; 0
        ORDER BY
            assets.total_investment_amount DESC
        LIMIT 10
    </select>


    <select id="getRankList" parameterType="java.lang.Integer" resultType="map">
        SELECT
			a.id,
			a.username,
			a.true_name,
			b.balance_amount,
			b.frozen_amount,
			b.credit_amount,
			b.freozen_credit_amount,
			ifnull( c.capital, 0 ) capital,
			ifnull( c.interAmount, 0 ) interAmount 
		FROM
			`user` a
			<if test="adminId != null ">
				inner join admin_responsible 
					on admin_responsible.admin_id=${adminId} 
					and admin_responsible.department_id=a.department_id
		    </if>
		    <if test="departmentId != null">
		    	inner join department_relation
					on department_relation.department_id=${departmentId} 
					and department_relation.sub_department_id=a.department_id
		    </if>
			LEFT JOIN assets b ON a.id = b.user_id
			LEFT JOIN ( SELECT user_id, sum( amount ) capital, sum( interest_amount ) interAmount FROM investment WHERE pay_status=2 GROUP BY user_id ) c ON a.id = c.user_id 
		WHERE
			a.`status` =0
        <if test="type == 0">
            order by b.balance_amount+b.frozen_amount+b.credit_amount+b.freozen_credit_amount+ifnull(c.capital,0) desc
        </if>
        <if test="type == 1">
            order by ifnull(c.capital,0) desc
        </if>
        <if test="type == 2">
            order by ifnull(c.interAmount,0) desc
        </if>
        limit 0,10
    </select>

    <select id="getHuoInvestPie" resultType="map">
        SELECT
            count(user_id) count,
            '50-100' AS    type
        FROM assets
        WHERE huo_investment_amount BETWEEN 50 AND 100
        UNION
        SELECT
            count(user_id) count,
            '101-1000' AS  type
        FROM assets
        WHERE huo_investment_amount BETWEEN 101 AND 1000
        UNION
        SELECT
            count(user_id) count,
            '1001-2000' AS type
        FROM assets
        WHERE huo_investment_amount BETWEEN 1001 AND 2000
        UNION
        SELECT
            count(user_id) count,
            '2001-5000' AS type
        FROM assets
        WHERE huo_investment_amount BETWEEN 2001 AND 5000
        UNION
        SELECT
            count(user_id)  count,
            '5001-10000' AS type
        FROM assets
        WHERE huo_investment_amount BETWEEN 5001 AND 10000
        UNION
        SELECT
            count(user_id) count,
            '10000以上' AS   type
        FROM assets
        WHERE huo_investment_amount &gt; 10000
    </select>

    <select id="getByYear" resultType="map">
        SELECT
            SUBSTR(DATE_FORMAT(birthday, '%y'), 1, 1)                      year,
            sum(huo_investment_amount + frozen_amount + available_balance) amount
        FROM user u, assets a
        WHERE u.id = a.user_id AND u.status = 0 AND u.birthday IS NOT NULL
        GROUP BY SUBSTR(DATE_FORMAT(birthday, '%y'), 1, 1)
        ORDER BY birthday ASC
    </select>

    <select id="assetsInvestment" resultType="map">
        SELECT
            u.email,
            u.phone,
            u.true_name             trueName,
            CASE u.sex
            WHEN '0'
                THEN '女'
            WHEN '1'
                THEN '男'
            ELSE '保密' END AS        sex,
            a.available_balance     balance,
            a.huo_investment_amount huoInverstment
        FROM assets a
            LEFT JOIN user u ON u.id = a.user_id
        WHERE a.huo_investment_amount = 0 AND a.available_balance &gt; 50
        ORDER BY a.available_balance DESC;
    </select>

    <select id="selectMyAssets" parameterType="int" resultType="map">
        SELECT
            IFNULL((
                a.available_balance + a.frozen_amount + a.huo_investment_amount
				+ (select sum(capital_amount) from interest where user_id = #{userid} and capital_amount &gt; 0 and has_dividended = 0 and type = 1)
            ),0)                               totalAmount,
            IFNULL(a.available_balance,0)             totalBalance,
            IFNULL(a.huo_investment_amount,0)         huoInvestment,
            IFNULL(a.huo_income,0)                    huoIncome,
            IFNULL(a.huo_left_interest,0)			  huo_left_interest,
            IFNULL(a.uncollect_interest,0)            uncollectInterest,
            IFNULL(uncollect_capital,0)               regularAmount,
            IFNULL((a.total_income - a.huo_income),0) regularIncome,
            IFNULL(a.frozen_amount,0)                 frozenAmount
        FROM
            assets a
        WHERE
            a.user_id = #{userid}
    </select>
    
    <!-- 月月盈待收本金 -->
   

    <select id="selectTotalAssetsRanking" resultType="java.lang.Double">
        SELECT min(b.sumAmount) sumAmount
        FROM (
                 SELECT *
                 FROM (
                          SELECT
                              user_id                                                            id,
                              sum(available_balance + uncollect_capital + huo_investment_amount) sumAmount
                          FROM assets
                          GROUP BY user_id
                      ) a
                 ORDER BY a.sumAmount DESC
                 LIMIT 0, 50
             ) b
    </select>

 
	<select id="selectByPrimaryKeyForUpdate"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from assets
		where user_id = #{userId,jdbcType=INTEGER} for update
	</select>

	<select id="listAssetsSnapshootVO" resultType="com.goochou.p2b.model.vo.AssetsVO" parameterType="com.goochou.p2b.model.AssetsExample" >
		select *
		from (
			SELECT
				@rownum:=@rownum+1 as rownum,
				user.true_name as user_true_name,
				user.username,
				IFNULL(balance_amount,0) balance_amount,
				IFNULL(frozen_amount,0) frozen_amount,
				IFNULL(credit_amount,0) credit_amount,
				IFNULL(freozen_credit_amount,0) freozen_credit_amount,
				IFNULL(amount.amount,0) amount
			FROM user inner join (select @rownum:=0) t on true
			left join ${tableName} assets on user.id=assets.user_id
			left join (
				select user_id,sum(amount) amount
				from investment_view
				where true
				and pay_status=2
				<choose>
					<when test="datePoint != null">
						and order_status in (1,2)
						and pay_time &lt;#{datePoint,jdbcType=DATE}
						and (buy_back_time &gt;=#{datePoint,jdbcType=DATE} or buy_back_time is null)
					</when>
					<otherwise>
						and order_status = 1
					</otherwise>
				</choose>
				group by user_id
			)amount on amount.user_id=user.id
			where assets.user_id is not null or amount.amount is not null
		)AssetsSnapshootVO
		<if test="limitStart != null and limitStart&gt;-1">
	      limit ${limitStart} , ${limitEnd}
	    </if>
	</select>
	
	<select id="countAssetsSnapshootVO" resultType="java.lang.Long" parameterType="com.goochou.p2b.model.AssetsExample" >
		select count(*)
		from(
			SELECT
				@rownum:=@rownum+1 as row_num,
				user.true_name as user_true_name,
				user.username,
				IFNULL(balance_amount,0) balance_amount,
				IFNULL(frozen_amount,0) frozen_amount,
				IFNULL(credit_amount,0) credit_amount,
				IFNULL(freozen_credit_amount,0) freozen_credit_amount,
				IFNULL(amount.amount,0) amount
			FROM user inner join (select @rownum:=0) t on true
			left join ${tableName} assets on user.id=assets.user_id
			left join (
				select user_id,sum(amount) amount
				from investment_view
				where true
				and pay_status=2
				<choose>
					<when test="datePoint != null">
						and order_status in (1,2)
						and pay_time &lt;#{datePoint,jdbcType=DATE}
						and (buy_back_time &gt;=#{datePoint,jdbcType=DATE} or buy_back_time is null)
					</when>
					<otherwise>
						and order_status = 1
					</otherwise>
				</choose>
				group by user_id
			)amount on amount.user_id=user.id
			where assets.user_id is not null or amount.amount is not null
		)AssetsSnapshootVO
	</select>
	
  <select id="sumAssetsSnapshoot" resultMap="BaseResultMap" parameterType="string">
    SELECT
      IFNULL(SUM(balance_amount),0) balance_amount,
      IFNULL(SUM(frozen_amount),0) frozen_amount,
      IFNULL(SUM(credit_amount),0) credit_amount,
      IFNULL(SUM(freozen_credit_amount),0) freozen_credit_amount
    FROM
      ${tableName}
  </select>
	
  <select id="sumTradeRecord" resultType="map" >
    
	select 
		ifnull(sum(case when trade_record_view.account_type_id=0 then trade_record_view.credit_amount  else 0 end),0)  cash_amount,
		ifnull(sum(case when trade_record_view.account_type_id=0 and trade_record_view.business_code='recharge' then trade_record_view.credit_amount else 0 end),0)  cash_recharge_amount,
		ifnull(sum(case when trade_record_view.account_type_id=0 and trade_record_view.business_code='withdraw' then trade_record_view.credit_amount else 0 end),0)  cash_withdraw_amount,
		ifnull(sum(case when trade_record_view.account_type_id=0 and trade_record_view.business_code='invest' then trade_record_view.credit_amount else 0 end),0)  cash_invest_amount,
		ifnull(sum(case when trade_record_view.account_type_id=0 and trade_record_view.business_code='goodsorder' then trade_record_view.credit_amount else 0 end),0)  cash_goodsorder_amount,
		ifnull(sum(case when trade_record_view.account_type_id=0 and trade_record_view.business_code='goodsorder_refund' then trade_record_view.credit_amount else 0 end),0)  cash_refund_amount,
		
		ifnull(sum(case when trade_record_view.account_type_id=1 then trade_record_view.credit_amount else 0 end),0)  balance_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='invest_buyback_principal' then trade_record_view.credit_amount else 0 end),0)  balance_buyback_principal_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='invest_buyback_interest' then trade_record_view.credit_amount else 0 end),0)  balance_buyback_interest_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='use_cash_hongbao' then trade_record_view.credit_amount else 0 end),0)  balance_cash_hongbao_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='recharge' then trade_record_view.credit_amount else 0 end),0)  balance_recharge_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='withdraw' then trade_record_view.credit_amount else 0 end),0)  balance_withdraw_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='invest' then trade_record_view.credit_amount else 0 end),0)  balance_invest_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='goodsorder' then trade_record_view.credit_amount else 0 end),0)  balance_goodsorder_amount,
		ifnull(sum(case when trade_record_view.account_type_id=1 and trade_record_view.business_code='goodsorder_refund' then trade_record_view.credit_amount else 0 end),0)  balance_refund_amount,
		
		ifnull(sum(case when trade_record_view.account_type_id=2 then trade_record_view.credit_amount else 0 end),0)  credit_amount,
		ifnull(sum(case when trade_record_view.account_type_id=2 and trade_record_view.business_code='invest' then trade_record_view.credit_amount else 0 end),0)  credit_invest_amount,
		ifnull(sum(case when trade_record_view.account_type_id=2 and trade_record_view.business_code='invest_buyback_interest' then trade_record_view.credit_amount else 0 end),0)   credit_buyback_interest_amount,
		ifnull(sum(case when trade_record_view.account_type_id=2 and trade_record_view.business_code='goodsorder' then trade_record_view.credit_amount else 0 end),0)  credit_goodsorder_amount,
		ifnull(sum(case when trade_record_view.account_type_id=2 and trade_record_view.business_code='goodsorder_refund' then trade_record_view.credit_amount else 0 end),0) credit_refund_amount
	from trade_record_view
	where trade_record_view.about_whole_account 
	<if test="beginDate != null">
		and trade_record_view.create_date &gt;= #{beginDate,jdbcType=DATE}
	</if>
	<if test="endDate != null">
		and trade_record_view.create_date &lt;  #{endDate,jdbcType=DATE}
	</if>
  </select>
  
  
</mapper>