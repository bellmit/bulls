<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.PropertySalesStoreStatusViewMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.vo.PropertySalesStoreStatusView">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="row_num" jdbcType="INTEGER" property="rowNum" />
    <result column="ear_number" jdbcType="VARCHAR" property="earNumber" />
    <result column="current_project_id" jdbcType="INTEGER" property="currentProjectId" />
    <result column="current_deadline" jdbcType="TIMESTAMP" property="currentDeadline" />
    <result column="current_limit_days" jdbcType="INTEGER" property="currentLimitDays" />
    <result column="current_due_time" jdbcType="TIMESTAMP" property="currentDueTime" />
    <result column="current_yue_ling" jdbcType="BIGINT" property="currentYueLing" />
    <result column="current_unit_manage_price" jdbcType="DOUBLE" property="currentUnitManagePrice" />
    <result column="current_unit_feed_price" jdbcType="DOUBLE" property="currentUnitFeedPrice" />
    <result column="current_investment_id" jdbcType="INTEGER" property="currentInvestmentId" />
    <result column="current_order_no" jdbcType="VARCHAR" property="currentOrderNo" />
    <result column="current_pay_time" jdbcType="TIMESTAMP" property="currentPayTime" />
    <result column="current_buy_back_time" jdbcType="TIMESTAMP" property="currentBuyBackTime" />
    <result column="current_amount" jdbcType="DOUBLE" property="currentAmount" />
    <result column="current_interest_amount" jdbcType="DOUBLE" property="currentInterestAmount" />
    <result column="current_user_id" jdbcType="INTEGER" property="currentUserId" />
    <result column="current_user_true_name" jdbcType="VARCHAR" property="currentUserTrueName" />
    <result column="prior_project_id" jdbcType="INTEGER" property="priorProjectId" />
    <result column="prior_deadline" jdbcType="TIMESTAMP" property="priorDeadline" />
    <result column="prior_limit_days" jdbcType="INTEGER" property="priorLimitDays" />
    <result column="prior_due_time" jdbcType="TIMESTAMP" property="priorDueTime" />
    <result column="prior_yue_ling" jdbcType="BIGINT" property="priorYueLing" />
    <result column="prior_current_unit_manage_price" jdbcType="DOUBLE" property="priorCurrentUnitManagePrice" />
    <result column="prior_current_unit_feed_price" jdbcType="DOUBLE" property="priorCurrentUnitFeedPrice" />
    <result column="prior_investment_id" jdbcType="INTEGER" property="priorInvestmentId" />
    <result column="prior_order_no" jdbcType="VARCHAR" property="priorOrderNo" />
    <result column="prior_pay_time" jdbcType="TIMESTAMP" property="priorPayTime" />
    <result column="prior_buy_back_time" jdbcType="TIMESTAMP" property="priorBuyBackTime" />
    <result column="prior_amount" jdbcType="DOUBLE" property="priorAmount" />
    <result column="prior_interest_amount" jdbcType="DOUBLE" property="priorInterestAmount" />
    <result column="prior_user_id" jdbcType="INTEGER" property="priorUserId" />
    <result column="prior_user_ture_name" jdbcType="VARCHAR" property="priorUserTureName" />
    <result column="is_sold" jdbcType="BOOLEAN" property="isSold" />
    <result column="is_raised_by_us" jdbcType="BOOLEAN" property="isRaisedByUs" />
    <result column="is_sale" jdbcType="BOOLEAN" property="isSale" />
    <result column="last_deadline" jdbcType="TIMESTAMP" property="lastDeadline" />
    <result column="last_limit_days" jdbcType="BIGINT" property="lastLimitDays" />
    <result column="last_due_time" jdbcType="TIMESTAMP" property="lastDueTime" />
    <result column="last_order_no" jdbcType="VARCHAR" property="lastOrderNo" />
    <result column="last_pay_time" jdbcType="TIMESTAMP" property="lastPayTime" />
    <result column="last_buy_back_time" jdbcType="TIMESTAMP" property="lastBuyBackTime" />
    <result column="last_amount" jdbcType="DOUBLE" property="lastAmount" />
    <result column="last_interest_amount" jdbcType="DOUBLE" property="lastInterestAmount" />
    <result column="last_user_id" jdbcType="BIGINT" property="lastUserId" />
    <result column="last_user_true_name" jdbcType="VARCHAR" property="lastUserTrueName" />
    <result column="current_month_manager_day" jdbcType="BIGINT" property="currentMonthManagerDay" />
    <result column="current_month_manager" jdbcType="DOUBLE" property="currentMonthManager" />
    <result column="sum_manager_day" jdbcType="BIGINT" property="sumManagerDay" />
    <result column="sum_manager_fee" jdbcType="DOUBLE" property="sumManagerFee" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    row_num, ear_number, current_project_id, current_deadline, current_limit_days, current_due_time, 
    current_yue_ling, current_unit_manage_price, current_unit_feed_price, current_investment_id, 
    current_order_no, current_pay_time, current_buy_back_time, current_amount, current_interest_amount, 
    current_user_id, current_user_true_name, prior_project_id, prior_deadline, prior_limit_days, 
    prior_due_time, prior_yue_ling, prior_current_unit_manage_price, prior_current_unit_feed_price, 
    prior_investment_id, prior_order_no, prior_pay_time, prior_buy_back_time, prior_amount, 
    prior_interest_amount, prior_user_id, prior_user_ture_name, is_sold, is_raised_by_us, 
    is_sale, last_deadline, last_limit_days, last_due_time, last_order_no, last_pay_time, 
    last_buy_back_time, last_amount, last_interest_amount, last_user_id, last_user_true_name, 
    current_month_manager_day, current_month_manager, sum_manager_day, sum_manager_fee
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.vo.PropertySalesStoreStatusViewExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from property_sales_store_status_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="countByExample" parameterType="com.goochou.p2b.model.vo.PropertySalesStoreStatusViewExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from property_sales_store_status_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <select id="selectHistoryByDatePoint" parameterType="com.goochou.p2b.model.vo.PropertySalesStoreStatusViewExample" resultMap="BaseResultMap">
	select *
	from(
		select @row_num:=@row_num+1 as row_num,
				property_sales_status_view.*
		from(
			select property_sales_status_view.*
			from(
			   select	
			   		property.ear_number,
					project.id current_project_id,
					project.deadline current_deadline,
					project.limit_days current_limit_days,
					project.due_time current_due_time,
					project.yue_ling current_yue_ling,
					project.unit_manage_price current_unit_manage_price,
					project.unit_feed_price current_unit_feed_price,
					
					investment.id current_investment_id,
					investment.order_no current_order_no,
					investment_status.pay_time current_pay_time,
					investment_status.buy_back_time current_buy_back_time,
					investment.amount current_amount,
					investment.interest_amount current_interest_amount,
					
					user.id current_user_id,
					user.true_name current_user_true_name,
					
					prior_project.id prior_project_id,
					prior_project.deadline prior_deadline,
					prior_project.limit_days prior_limit_days,
					prior_project.due_time prior_due_time,
					prior_project.yue_ling prior_yue_ling,
					prior_project.unit_manage_price prior_current_unit_manage_price,
					prior_project.unit_feed_price prior_current_unit_feed_price,
					
					prior_investment.id prior_investment_id,
					prior_investment.order_no prior_order_no,
					prior_investment_status.pay_time prior_pay_time,
					prior_investment_status.buy_back_time prior_buy_back_time,
					prior_investment.amount prior_amount,
					prior_investment.interest_amount prior_interest_amount,
					
					prior_user.id prior_user_id,
					prior_user.true_name prior_user_ture_name,
					
					if(project.deadline &lt; date_point.date_point,true,false)  as is_sold,
					if(project.deadline &lt; date_point.date_point and project.due_time &gt; date_point.date_point,false,true)  as is_raised_by_us,
					if(project.deadline &lt; date_point.date_point and (investment_status.buy_back_time is null or investment_status.buy_back_time &gt;= date_point.date_point ),true,false)  as is_sale,
				
					if(investment.id is not null,project.deadline,prior_project.deadline) as last_deadline,
					if(investment.id is not null,project.limit_days,prior_project.limit_days) as last_limit_days,
					if(investment.id is not null,project.due_time,prior_project.due_time) as last_due_time,
					
					if(investment.id is not null,investment.order_no,prior_investment.order_no) as last_order_no,
					if(investment.id is not null,investment_status.pay_time,prior_investment_status.pay_time) as last_pay_time,
					if(investment.id is not null,investment_status.buy_back_time,prior_investment_status.buy_back_time) as last_buy_back_time,
					if(investment.id is not null,investment.amount,prior_investment.amount) as last_amount,
					if(investment.id is not null,investment.interest_amount,prior_investment.interest_amount) as last_interest_amount,
					if(investment.id is not null,user.id,prior_user.id) as last_user_id,
					if(investment.id is not null,user.true_name,prior_user.true_name) as last_user_true_name,
					
					if(project.deadline is null or project.deadline &gt;= date_point.date_point or project.due_time &lt; date_point.begin_month , 0 ,
										TimeStampDiff(DAY,
											if(project.deadline &gt; date_point.begin_month , project.deadline , date_point.begin_month),
											if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
										)
					) current_month_manager_day,
					if(project.deadline is null or project.deadline &gt;= date_point.date_point or project.due_time &lt; date_point.begin_month , 0 ,
										TimeStampDiff(DAY,
											if(project.deadline &gt; date_point.begin_month , project.deadline , date_point.begin_month),
											if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
										)
					)*(project.unit_manage_price+project.unit_feed_price) current_month_manager,
					if(project.deadline is null or project.deadline &gt;= date_point.date_point , 0 ,
										TimeStampDiff(DAY,project.deadline,
											if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
										)
					) sum_manager_day,
					if(project.deadline is null or project.deadline &gt;= date_point.date_point , 0 ,
										TimeStampDiff(DAY,project.deadline,
											if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
										)
					) *(project.unit_manage_price+project.unit_feed_price) sum_manager_fee
				
				from (
					SELECT  @rownum:=@rownum+1 as row_num,
							project.*
					from (select project.ear_number,max(id) project_id
							from project
							where create_date &lt; #{datePoint}
							group by project.ear_number
					)project,
					(SELECT @rownum:=0)r
				)property
				inner join (
					select	date_format( #{datePoint} ,'%y-%m-%d') date_point,
						date_add(date_add(date_format( #{datePoint} ,'%y-%m-%d'),interval -1 day),interval -day(date_add(date_format( #{datePoint} ,'%y-%m-%d'),interval -1 day))+1 day) as begin_month
					from dual
				)date_point on true
				inner join project_view project on property.project_id=project.id
				left join investment on investment.order_status in (1,2) and investment.project_id=project.id and project.deadline &lt; date_point.date_point
				left join ( 
					select 	order_no,
						max(case when order_status='pay' then create_date else null end)  pay_time,
						max(case when order_status='success' then create_date else null end) buy_back_time
					from order_done
					where order_type='investment'
					and create_date &lt; #{datePoint}
					group by order_no
				)investment_status on investment_status.order_no=investment.order_no
				left join user on user.id=investment.user_id
				
				left join project_view prior_project on prior_project.id=project.parent_id
				left join investment prior_investment on prior_investment.order_status in (1,2) and prior_investment.project_id=prior_project.id
				left join ( 
					select 	order_no,
						max(case when order_status='pay' then create_date else null end)  pay_time,
						max(case when order_status='success' then create_date else null end) buy_back_time
					from order_done
					where order_type='investment'
					and create_date &lt; #{datePoint}
					group by order_no
				)prior_investment_status on prior_investment_status.order_no=prior_investment.order_no
				left join user prior_user on prior_user.id=prior_investment.user_id
			)property_sales_status_view
			<if test="_parameter != null">
		      <include refid="Example_Where_Clause" />
		    </if>
		    <if test="orderByClause != null">
		      order by ${orderByClause}
		    </if>
	    )property_sales_status_view
	    left join  (SELECT @row_num:=0)r on true
    )property_sales_status_view
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  
  <select id="countHistoryByDatePoint" parameterType="com.goochou.p2b.model.vo.PropertySalesStoreStatusViewExample" resultType="java.lang.Long">
	select count(*) 
	from(
		select	property.row_num,
	   		property.ear_number,
			project.id current_project_id,
			project.deadline current_deadline,
			project.limit_days current_limit_days,
			project.due_time current_due_time,
			project.yue_ling current_yue_ling,
			project.unit_manage_price current_unit_manage_price,
			project.unit_feed_price current_unit_feed_price,
			
			investment.id current_investment_id,
			investment.order_no current_order_no,
			investment_status.pay_time current_pay_time,
			investment_status.buy_back_time current_buy_back_time,
			investment.amount current_amount,
			investment.interest_amount current_interest_amount,
			
			user.id current_user_id,
			user.true_name current_user_true_name,
			
			prior_project.id prior_project_id,
			prior_project.deadline prior_deadline,
			prior_project.limit_days prior_limit_days,
			prior_project.due_time prior_due_time,
			prior_project.yue_ling prior_yue_ling,
			prior_project.unit_manage_price prior_current_unit_manage_price,
			prior_project.unit_feed_price prior_current_unit_feed_price,
			
			prior_investment.id prior_investment_id,
			prior_investment.order_no prior_order_no,
			prior_investment_status.pay_time prior_pay_time,
			prior_investment_status.buy_back_time prior_buy_back_time,
			prior_investment.amount prior_amount,
			prior_investment.interest_amount prior_interest_amount,
			
			prior_user.id prior_user_id,
			prior_user.true_name prior_user_ture_name,
			
			if(project.deadline &lt; date_point.date_point,true,false)  as is_sold,
			if(project.deadline &lt; date_point.date_point and project.due_time &gt; date_point.date_point,false,true)  as is_raised_by_us,
			if(project.deadline &lt; date_point.date_point and (investment_status.buy_back_time is null or investment_status.buy_back_time &gt;= date_point.date_point ),true,false)  as is_sale,
		
			if(investment.id is not null,project.deadline,prior_project.deadline) as last_deadline,
			if(investment.id is not null,project.limit_days,prior_project.limit_days) as last_limit_days,
			if(investment.id is not null,project.due_time,prior_project.due_time) as last_due_time,
			
			if(investment.id is not null,investment.order_no,prior_investment.order_no) as last_order_no,
			if(investment.id is not null,investment_status.pay_time,prior_investment_status.pay_time) as last_pay_time,
			if(investment.id is not null,investment_status.buy_back_time,prior_investment_status.buy_back_time) as last_buy_back_time,
			if(investment.id is not null,investment.amount,prior_investment.amount) as last_amount,
			if(investment.id is not null,investment.interest_amount,prior_investment.interest_amount) as last_interest_amount,
			if(investment.id is not null,user.id,prior_user.id) as last_user_id,
			if(investment.id is not null,user.true_name,prior_user.true_name) as last_user_true_name,
			
			if(project.deadline is null or project.deadline &gt;= date_point.date_point or project.due_time &lt; date_point.begin_month , 0 ,
								TimeStampDiff(DAY,
									if(project.deadline &gt; date_point.begin_month , project.deadline , date_point.begin_month),
									if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
								)
			) current_month_manager_day,
			if(project.deadline is null or project.deadline &gt;= date_point.date_point or project.due_time &lt; date_point.begin_month , 0 ,
								TimeStampDiff(DAY,
									if(project.deadline &gt; date_point.begin_month , project.deadline , date_point.begin_month),
									if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
								)
			)*(project.unit_manage_price+project.unit_feed_price) current_month_manager,
			if(project.deadline is null or project.deadline &gt;= date_point.date_point , 0 ,
								TimeStampDiff(DAY,project.deadline,
									if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
								)
			) sum_manager_day,
			if(project.deadline is null or project.deadline &gt;= date_point.date_point , 0 ,
								TimeStampDiff(DAY,project.deadline,
									if(project.due_time &gt; date_point.date_point , date_point.date_point , project.due_time)
								)
			) *(project.unit_manage_price+project.unit_feed_price) sum_manager_fee
		
		from (
			SELECT  @rownum:=@rownum+1 as row_num,
					project.*
			from (select project.ear_number,max(id) project_id
					from project
					where create_date &lt; #{datePoint}
					group by project.ear_number
			)project,
			(SELECT @rownum:=0)r
		)property
		inner join (
			select	date_format( #{datePoint} ,'%y-%m-%d') date_point,
				date_add(date_add(date_format( #{datePoint} ,'%y-%m-%d'),interval -1 day),interval -day(date_add(date_format( #{datePoint} ,'%y-%m-%d'),interval -1 day))+1 day) as begin_month
			from dual
		)date_point on true
		inner join project_view project on property.project_id=project.id
		left join investment on investment.order_status in (1,2) and investment.project_id=project.id and project.deadline &lt; date_point.date_point
		left join ( 
			select 	order_no,
				max(case when order_status='pay' then create_date else null end)  pay_time,
				max(case when order_status='success' then create_date else null end) buy_back_time
			from order_done
			where order_type='investment'
			and create_date &lt; #{datePoint}
			group by order_no
		)investment_status on investment_status.order_no=investment.order_no
		left join user on user.id=investment.user_id
		
		left join project_view prior_project on prior_project.id=project.parent_id
		left join investment prior_investment on prior_investment.order_status in (1,2) and prior_investment.project_id=prior_project.id
		left join ( 
			select 	order_no,
				max(case when order_status='pay' then create_date else null end)  pay_time,
				max(case when order_status='success' then create_date else null end) buy_back_time
			from order_done
			where order_type='investment'
			and create_date &lt; #{datePoint}
			group by order_no
		)prior_investment_status on prior_investment_status.order_no=prior_investment.order_no
		left join user prior_user on prior_user.id=prior_investment.user_id
	)property_sales_status_view
	<if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>

</mapper>