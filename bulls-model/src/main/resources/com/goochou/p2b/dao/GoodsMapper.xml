<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goochou.p2b.dao.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.goochou.p2b.model.goods.Goods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="brand_id" jdbcType="INTEGER" property="brandId" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="goods_no" jdbcType="VARCHAR" property="goodsNo" />
    <result column="buying_price" jdbcType="DECIMAL" property="buyingPrice" />
    <result column="saling_price" jdbcType="DECIMAL" property="salingPrice" />
    <result column="member_saling_price" jdbcType="DECIMAL" property="memberSalingPrice" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="stock_unit" jdbcType="VARCHAR" property="stockUnit" />
    <result column="introduction" jdbcType="VARCHAR" property="introduction" />
    <result column="introduction_html" jdbcType="VARCHAR" property="introductionHtml" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="sell_stock" jdbcType="INTEGER" property="sellStock" />
    <result column="up_down" jdbcType="INTEGER" property="upDown" />
    <result column="is_recommend" jdbcType="INTEGER" property="isRecommend" />
    <result column="actvity_stock" jdbcType="INTEGER" property="actvityStock" />
    <result column="sku_code" jdbcType="VARCHAR" property="skuCode" />
    <result column="weight" jdbcType="DECIMAL" property="weight" />
    <association property="goodsCategory" column="category_id"
                 select="com.goochou.p2b.dao.GoodsCategoryMapper.selectByPrimaryKey"
                 javaType="com.goochou.p2b.model.goods.GoodsCategory" />
    <association property="goodsBrand" column="brand_id"
                 select="com.goochou.p2b.dao.GoodsBrandMapper.selectByPrimaryKey" javaType="com.goochou.p2b.model.goods.GoodsBrand" />
    <collection property="goodsPictures" column="id"  ofType="com.goochou.p2b.model.GoodsPicture"
                select="com.goochou.p2b.dao.GoodsPictureMapper.getGoodsPictureByGoodsId"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, category_id, brand_id, goods_name, goods_no, buying_price, saling_price, member_saling_price, 
    stock, stock_unit, introduction, introduction_html, version, sort, create_date, update_date, 
    sell_stock, up_down, is_recommend, actvity_stock, sku_code, weight
  </sql>
  <select id="selectByExample" parameterType="com.goochou.p2b.model.goods.GoodsExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart&gt;-1">
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from t_goods
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_goods
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.goochou.p2b.model.goods.GoodsExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from t_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="com.goochou.p2b.model.goods.Goods" useGeneratedKeys="true">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_goods (category_id, brand_id, goods_name, 
      goods_no, buying_price, saling_price, 
      member_saling_price, stock, stock_unit, 
      introduction, introduction_html, version, 
      sort, create_date, update_date, 
      sell_stock, up_down, is_recommend, 
      actvity_stock, sku_code, weight
      )
    values (#{categoryId,jdbcType=INTEGER}, #{brandId,jdbcType=INTEGER}, #{goodsName,jdbcType=VARCHAR}, 
      #{goodsNo,jdbcType=VARCHAR}, #{buyingPrice,jdbcType=DECIMAL}, #{salingPrice,jdbcType=DECIMAL}, 
      #{memberSalingPrice,jdbcType=DECIMAL}, #{stock,jdbcType=INTEGER}, #{stockUnit,jdbcType=VARCHAR}, 
      #{introduction,jdbcType=VARCHAR}, #{introductionHtml,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}, 
      #{sort,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{sellStock,jdbcType=INTEGER}, #{upDown,jdbcType=INTEGER}, #{isRecommend,jdbcType=INTEGER}, 
      #{actvityStock,jdbcType=INTEGER}, #{skuCode,jdbcType=VARCHAR}, #{weight,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.goochou.p2b.model.goods.Goods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="brandId != null">
        brand_id,
      </if>
      <if test="goodsName != null">
        goods_name,
      </if>
      <if test="goodsNo != null">
        goods_no,
      </if>
      <if test="buyingPrice != null">
        buying_price,
      </if>
      <if test="salingPrice != null">
        saling_price,
      </if>
      <if test="memberSalingPrice != null">
        member_saling_price,
      </if>
      <if test="stock != null">
        stock,
      </if>
      <if test="stockUnit != null">
        stock_unit,
      </if>
      <if test="introduction != null">
        introduction,
      </if>
      <if test="introductionHtml != null">
        introduction_html,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="sellStock != null">
        sell_stock,
      </if>
      <if test="upDown != null">
        up_down,
      </if>
      <if test="isRecommend != null">
        is_recommend,
      </if>
      <if test="actvityStock != null">
        actvity_stock,
      </if>
      <if test="skuCode != null">
        sku_code,
      </if>
      <if test="weight != null">
        weight,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="brandId != null">
        #{brandId,jdbcType=INTEGER},
      </if>
      <if test="goodsName != null">
        #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsNo != null">
        #{goodsNo,jdbcType=VARCHAR},
      </if>
      <if test="buyingPrice != null">
        #{buyingPrice,jdbcType=DECIMAL},
      </if>
      <if test="salingPrice != null">
        #{salingPrice,jdbcType=DECIMAL},
      </if>
      <if test="memberSalingPrice != null">
        #{memberSalingPrice,jdbcType=DECIMAL},
      </if>
      <if test="stock != null">
        #{stock,jdbcType=INTEGER},
      </if>
      <if test="stockUnit != null">
        #{stockUnit,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="introductionHtml != null">
        #{introductionHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sellStock != null">
        #{sellStock,jdbcType=INTEGER},
      </if>
      <if test="upDown != null">
        #{upDown,jdbcType=INTEGER},
      </if>
      <if test="isRecommend != null">
        #{isRecommend,jdbcType=INTEGER},
      </if>
      <if test="actvityStock != null">
        #{actvityStock,jdbcType=INTEGER},
      </if>
      <if test="skuCode != null">
        #{skuCode,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.goochou.p2b.model.goods.GoodsExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from t_goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.brandId != null">
        brand_id = #{record.brandId,jdbcType=INTEGER},
      </if>
      <if test="record.goodsName != null">
        goods_name = #{record.goodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsNo != null">
        goods_no = #{record.goodsNo,jdbcType=VARCHAR},
      </if>
      <if test="record.buyingPrice != null">
        buying_price = #{record.buyingPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.salingPrice != null">
        saling_price = #{record.salingPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.memberSalingPrice != null">
        member_saling_price = #{record.memberSalingPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.stock != null">
        stock = #{record.stock,jdbcType=INTEGER},
      </if>
      <if test="record.stockUnit != null">
        stock_unit = #{record.stockUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.introduction != null">
        introduction = #{record.introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.introductionHtml != null">
        introduction_html = #{record.introductionHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.sort != null">
        sort = #{record.sort,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.sellStock != null">
        sell_stock = #{record.sellStock,jdbcType=INTEGER},
      </if>
      <if test="record.upDown != null">
        up_down = #{record.upDown,jdbcType=INTEGER},
      </if>
      <if test="record.isRecommend != null">
        is_recommend = #{record.isRecommend,jdbcType=INTEGER},
      </if>
      <if test="record.actvityStock != null">
        actvity_stock = #{record.actvityStock,jdbcType=INTEGER},
      </if>
      <if test="record.skuCode != null">
        sku_code = #{record.skuCode,jdbcType=VARCHAR},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods
    set id = #{record.id,jdbcType=INTEGER},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      brand_id = #{record.brandId,jdbcType=INTEGER},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      goods_no = #{record.goodsNo,jdbcType=VARCHAR},
      buying_price = #{record.buyingPrice,jdbcType=DECIMAL},
      saling_price = #{record.salingPrice,jdbcType=DECIMAL},
      member_saling_price = #{record.memberSalingPrice,jdbcType=DECIMAL},
      stock = #{record.stock,jdbcType=INTEGER},
      stock_unit = #{record.stockUnit,jdbcType=VARCHAR},
      introduction = #{record.introduction,jdbcType=VARCHAR},
      introduction_html = #{record.introductionHtml,jdbcType=VARCHAR},
      version = #{record.version,jdbcType=INTEGER},
      sort = #{record.sort,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      sell_stock = #{record.sellStock,jdbcType=INTEGER},
      up_down = #{record.upDown,jdbcType=INTEGER},
      is_recommend = #{record.isRecommend,jdbcType=INTEGER},
      actvity_stock = #{record.actvityStock,jdbcType=INTEGER},
      sku_code = #{record.skuCode,jdbcType=VARCHAR},
      weight = #{record.weight,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.goochou.p2b.model.goods.Goods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods
    <set>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="brandId != null">
        brand_id = #{brandId,jdbcType=INTEGER},
      </if>
      <if test="goodsName != null">
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="goodsNo != null">
        goods_no = #{goodsNo,jdbcType=VARCHAR},
      </if>
      <if test="buyingPrice != null">
        buying_price = #{buyingPrice,jdbcType=DECIMAL},
      </if>
      <if test="salingPrice != null">
        saling_price = #{salingPrice,jdbcType=DECIMAL},
      </if>
      <if test="memberSalingPrice != null">
        member_saling_price = #{memberSalingPrice,jdbcType=DECIMAL},
      </if>
      <if test="stock != null">
        stock = #{stock,jdbcType=INTEGER},
      </if>
      <if test="stockUnit != null">
        stock_unit = #{stockUnit,jdbcType=VARCHAR},
      </if>
      <if test="introduction != null">
        introduction = #{introduction,jdbcType=LONGVARCHAR},
      </if>
      <if test="introductionHtml != null">
        introduction_html = #{introductionHtml,jdbcType=LONGVARCHAR},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sellStock != null">
        sell_stock = #{sellStock,jdbcType=INTEGER},
      </if>
      <if test="upDown != null">
        up_down = #{upDown,jdbcType=INTEGER},
      </if>
      <if test="isRecommend != null">
        is_recommend = #{isRecommend,jdbcType=INTEGER},
      </if>
      <if test="actvityStock != null">
        actvity_stock = #{actvityStock,jdbcType=INTEGER},
      </if>
      <if test="skuCode != null">
        sku_code = #{skuCode,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.goochou.p2b.model.goods.Goods">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update t_goods
    set category_id = #{categoryId,jdbcType=INTEGER},
      brand_id = #{brandId,jdbcType=INTEGER},
      goods_name = #{goodsName,jdbcType=VARCHAR},
      goods_no = #{goodsNo,jdbcType=VARCHAR},
      buying_price = #{buyingPrice,jdbcType=DECIMAL},
      saling_price = #{salingPrice,jdbcType=DECIMAL},
      member_saling_price = #{memberSalingPrice,jdbcType=DECIMAL},
      stock = #{stock,jdbcType=INTEGER},
      stock_unit = #{stockUnit,jdbcType=VARCHAR},
      introduction = #{introduction,jdbcType=VARCHAR},
      introduction_html = #{introductionHtml,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER},
      sort = #{sort,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      sell_stock = #{sellStock,jdbcType=INTEGER},
      up_down = #{upDown,jdbcType=INTEGER},
      is_recommend = #{isRecommend,jdbcType=INTEGER},
      actvity_stock = #{actvityStock,jdbcType=INTEGER},
      sku_code = #{skuCode,jdbcType=VARCHAR},
      weight = #{weight,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>


    <!--
    *****************************************************************************************
                                    以下是手动加入的代码
    *****************************************************************************************
    -->


    <update id="updateByPrimaryKeyAndVersionSelective" parameterType="com.goochou.p2b.model.goods.Goods">
        update t_goods
        <set>
            version = version + 1,
            <if test="categoryId != null">
                category_id = #{categoryId,jdbcType=INTEGER},
            </if>
            <if test="brandId != null">
                brand_id = #{brandId,jdbcType=INTEGER},
            </if>
            <if test="goodsName != null">
                goods_name = #{goodsName,jdbcType=VARCHAR},
            </if>
            <if test="goodsNo != null">
                goods_no = #{goodsNo,jdbcType=VARCHAR},
            </if>
            <if test="buyingPrice != null">
                buying_price = #{buyingPrice,jdbcType=DECIMAL},
            </if>
            <if test="salingPrice != null">
                saling_price = #{salingPrice,jdbcType=DECIMAL},
            </if>
            <if test="memberSalingPrice != null">
                member_saling_price = #{memberSalingPrice,jdbcType=DECIMAL},
            </if>
            <if test="stock != null">
                stock = #{stock,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="introduction != null">
                introduction = #{introduction,jdbcType=LONGVARCHAR},
            </if>
            <if test="isRecommend != null">
                is_recommend = #{isRecommend,jdbcType=INTEGER},
            </if>
            <if test="actvityStock != null">
                actvity_stock = #{actvityStock,jdbcType=INTEGER},
            </if>
            <if test="skuCode != null">
              sku_code = #{skuCode,jdbcType=VARCHAR},
            </if>
            <if test="weight != null">
              weight = #{weight,jdbcType=DECIMAL},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}
    </update>

    <update id="sell" parameterType="com.goochou.p2b.model.goods.GoodsOrderDetail">
        update t_goods
            set
            version = version + 1,
            stock = stock-#{count,jdbcType=INTEGER},
            sell_stock = sell_stock+#{count,jdbcType=INTEGER},
			update_date = now()
        where id = #{goodsId,jdbcType=INTEGER} and stock&gt;=#{count,jdbcType=INTEGER}
    </update>

    <update id="add" parameterType="com.goochou.p2b.model.goods.GoodsOrderDetail">
        update t_goods
            set
            version = version + 1,
            stock = stock+#{count,jdbcType=INTEGER},
            sell_stock = sell_stock-#{count,jdbcType=INTEGER},
			update_date = now()
        where id = #{goodsId,jdbcType=INTEGER}
    </update>


	<resultMap extends="BaseResultMap" id="GoodsInfo" type="com.goochou.p2b.model.goods.Goods">
		<result column="brand_name" jdbcType="VARCHAR" property="brandName" />
	</resultMap>

	<select id="listGoodsByPage" resultMap="GoodsInfo">
		select g.*,gb.brand_name from t_goods g left join t_goods_brand gb on g.brand_id=gb.id
		where 1 = 1
		<if test="keyword != null and keyword != ''">
		and g.goods_name like '%${keyword}%'
		</if>
		<if test="skuCode != null and skuCode != ''">
		and g.sku_code like '%${skuCode}%'
		</if>
		order by g.id desc limit #{limitStart} , #{limitEnd}
	</select>
	<select id="countGoodsByPage" resultType="int">
		select count(1) from t_goods g left join t_goods_brand gb on g.brand_id=gb.id
		where 1 = 1
	    <if test="keyword != null and keyword != ''">
		and g.goods_name like '%${keyword}%'
		</if>
		<if test="skuCode != null and skuCode != ''">
		and g.sku_code like '%${skuCode}%'
		</if>
		order by g.create_date desc
	</select>

	<select id="listGoodsProperties" resultType="map">
			SELECT  g.id as  goodsId, g.category_id as categotyId, gc.category_name as   categoryName,gp.property_name as propertyName,gp.id as propertyId,gpv.property_value as propertyValue FROM t_goods  g  inner join t_goods_category  gc   on  g.category_id=gc.id
			inner join t_goods_property  gp  on  gp.category_id=gc.id
			inner join  t_goods_property_value  gpv  on  gpv.property_id=gp.id  and gpv.goods_id=#{id}
			where    g.id=#{id}
	</select>

	<delete id="delPropertyValues">
		DELETE  from t_goods_property_value    where goods_id=#{id}
	</delete>

	<select id="getAppGoodsList" resultType="map">
		SELECT
			g.id,
			g.category_id,
			g.brand_id,
			g.goods_name,
			g.goods_no,
            concat(g.buying_price,'') buying_price,
            concat(g.saling_price,'') saling_price,
            concat(g.member_saling_price,'') member_saling_price,
			g.stock,
			g.stock_unit,
			g.introduction,
			g.introduction_html,
			g.version,
			g.sort,
			g.create_date,
			g.update_date,
			ifnull(g.sell_stock, 0) sell_stock,
			g.up_down,
            g.is_recommend,
            g.actvity_stock,
			gb.brand_name,
			up.path
		FROM
			t_goods g
		LEFT JOIN t_goods_brand gb ON g.brand_id = gb.id
		LEFT JOIN (
			SELECT
				max(pic.id),
				pic.goods_id AS goods_id,
				pic.upload_id AS upload_id
			FROM
				t_goods_picture pic
			WHERE
				pic. STATUS = 0
			AND pic.type = 14 GROUP BY pic.goods_id
		) p ON p.goods_id = g.id
		LEFT JOIN upload up ON up.id = p.upload_id
		AND up. STATUS = 0
		left join t_goods_category tgc on g.category_id=tgc.id
		LEFT JOIN (select a.goods_id,sum(a.count) count from t_goods_order_detail a join t_goods_order b on a.order_id=b.id and b.state!=5 GROUP BY goods_id) o on g.id=o.goods_id
		WHERE TRUE and g.up_down = 1<!--  <![CDATA[(
				g.up_down = 1 OR EXISTS 
					(select activity.id from second_kill_activity_view activity where activity.good_id = g.id
				 		and date(activity.date) = curdate() 
				 		and TIMESTAMPDIFF(MINUTE,CURDATE(),activity.begin_time) >= 60)
			 )]]> -->
		<if test="goodsName!=null">
			and g.goods_name like '%#{goodsName}%'
		</if>
		<if test="categoryId !=null and categoryId !='' and categoryId != 0 " >
			and g.category_id=#{categoryId}
		</if>
		<if test="priceRange ==1">
		<![CDATA[	and g.saling_price<=100 ]]>
		</if>
	    <if test="priceRange ==2">
		<![CDATA[	and  100<g.saling_price  and g.saling_price<=200 ]]>
		</if>
	    <if test="priceRange ==3">
		<![CDATA[	and g.saling_price>200 ]]>
		</if>
		
		order by g.sort, g.id desc limit #{limitStart} , #{limitEnd}
	</select>

	<select id="getAppGoodsCount" resultType="int">
		SELECT
			count(1)
		FROM
			t_goods g
		LEFT JOIN t_goods_brand gb ON g.brand_id = gb.id
		LEFT JOIN (
			SELECT
				max(pic.id),
				pic.goods_id AS goods_id,
				pic.upload_id AS upload_id
			FROM
				t_goods_picture pic
			WHERE
				pic. STATUS = 0
			AND pic.type = 14 GROUP BY pic.goods_id
		) p ON p.goods_id = g.id
		LEFT JOIN upload up ON up.id = p.upload_id
		AND up. STATUS = 0
		left join t_goods_category tgc on g.category_id=tgc.id
		WHERE TRUE and g.up_down = 1 <!-- <![CDATA[(
					g.up_down = 1 OR EXISTS 
						(select activity.id from second_kill_activity_view activity where activity.good_id = g.id
					 		and date(activity.date) = curdate() 
					 		and TIMESTAMPDIFF(MINUTE,CURDATE(),activity.begin_time) >= 60)
				 )]]> -->
		<if test="goodsName!=null">
			and g.goods_name like '%#{goodsName}%'
		</if>
		<if test="categoryId !=null and categoryId !='' and categoryId != 0 " >
			and g.category_id=#{categoryId}
		</if>
		
		<if test="priceRange ==1">
		<![CDATA[	and g.saling_price<=100 ]]>
		</if>
	    <if test="priceRange ==2">
		<![CDATA[	and  100<g.saling_price  and g.saling_price<=200 ]]>
		</if>
	    <if test="priceRange ==3">
		<![CDATA[	and g.saling_price>200 ]]>
		</if>
	</select>
	
	<select id="listGoodsByClick" resultType="map">
		select
			g.*,
			ifnull(sum(gc.click),0) as click_sum,
			u.path
		from t_goods g
		left join t_goods_click gc on gc.goods_id = g.id
		left join t_goods_picture gp on gp.goods_id = g.id
		left join upload u on u.id = gp.upload_id
		where g.up_down = 1 and gp.type = 14 and gp.status = 0 and u.status = 0
		group by g.id
		order by click_sum desc
		<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
	</select>
	
	<select id="listGoodsForLove" resultType="map">
		select
			g.*
			,gc.click
			,gc.user_id
			,u.path
		from t_goods g
		left join t_goods_click gc on gc.goods_id = g.id
		left join t_goods_picture gp on gp.goods_id = g.id
		left join upload u on u.id = gp.upload_id
		where g.up_down = 1 and gp.type = 14 and gp.status = 0 and u.status = 0
		<if test="userId != null">
	  		and gc.user_id = #{userId}
	  	</if>
		order by click desc
		<if test="limitStart != null and limitEnd != null">
	  		limit #{limitStart},#{limitEnd}
	  	</if>
	</select>
	<select id="queryGoodsDetailById" resultMap="BaseResultMap" parameterType="int" >
      SELECT 
        g.id,
        g.category_id,
        g.brand_id,
        g.goods_name,
        g.goods_no,
        CONCAT(g.buying_price, '') buying_price,
        CONCAT(g.saling_price, '') saling_price,
        CONCAT(g.member_saling_price, '') member_saling_price,
        g.stock,
        g.stock_unit,
        g.introduction,
        g.introduction_html,
        g.version,
        g.sort,
        g.create_date,
        g.update_date,
        IFNULL(g.sell_stock, 0) sell_stock,
        g.up_down,
        g.is_recommend,
        g.actvity_stock,
        p14.path AS smallPicPath,
        p16.path AS activityPicPath 
      FROM
        t_goods g 
        LEFT JOIN 
          (SELECT 
            gp14.goods_id,
            u14.path 
          FROM
            (SELECT 
              MAX(goods_id) goods_id,
              id,
              upload_id 
            FROM
              t_goods_picture 
            WHERE `status` = 0 
              AND `type` = 14 
            GROUP BY goods_id) gp14 
            INNER JOIN upload u14 
              ON u14.id = gp14.upload_id 
              AND u14.`status` = 0) p14 
          ON p14.goods_id=g.id 
        LEFT JOIN 
          (SELECT 
            gp16.goods_id,
            u16.path 
          FROM
            (SELECT 
              MIN(goods_id) goods_id,
              id,
              upload_id 
            FROM
              t_goods_picture 
            WHERE `status` = 0 
              AND `type` = 16 
            GROUP BY goods_id) gp16 
            INNER JOIN upload u16 
              ON u16.id = gp16.upload_id 
              AND u16.`status` = 0) p16 
          ON p16.goods_id = g.id 
		where g.id = #{goodsId}
	</select>
</mapper>
